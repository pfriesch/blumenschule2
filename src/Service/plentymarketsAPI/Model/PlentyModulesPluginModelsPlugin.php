<?php
/**
 * PlentyModulesPluginModelsPlugin
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PlentyModulesPluginModelsPlugin Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlentyModulesPluginModelsPlugin implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Plenty\Modules\Plugin\Models\Plugin';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'name' => 'string',
'position' => 'int',
'active_stage' => 'bool',
'active_productive' => 'bool',
'created_at' => 'string',
'updated_at' => 'string',
'in_stage' => 'bool',
'in_productive' => 'bool',
'is_connected_with_git' => 'bool',
'update_information' => 'object[]',
'type' => 'string',
'installed' => 'bool',
'version' => 'string',
'version_stage' => 'string',
'version_productive' => 'string',
'description' => 'string',
'namespace' => 'string',
'dependencies' => 'object[]',
'author' => 'string',
'price' => 'BigDecimal',
'keywords' => 'string[]',
'require' => 'string[]',
'not_installed_requirements' => 'string[]',
'not_active_stage_requirements' => 'string[]',
'not_active_productive_requirements' => 'string[]',
'run_on_build' => 'object[]',
'check_on_build' => 'object[]',
'author_icon' => 'string',
'plugin_icon' => 'string',
'license' => 'string',
'short_description' => 'object[]',
'is_closed_source' => 'bool',
'inbox_path' => 'string',
'marketplace_name' => 'object[]',
'source' => 'string',
'java_script_files' => 'string[]',
'containers' => 'object[]',
'data_providers' => 'object[]',
'categories' => 'object[]',
'webhook_url' => 'string',
'is_external_tool' => 'bool',
'direct_download_links' => 'object[]',
'forward_link' => 'string',
'branch' => 'string',
'offer_trial' => 'bool',
'offer_freemium' => 'bool',
'webstores' => '\Swagger\Client\Model\PlentyModulesSystemModelsWebstore[]',
'plugin_set_ids' => 'int[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'name' => null,
'position' => null,
'active_stage' => null,
'active_productive' => null,
'created_at' => null,
'updated_at' => null,
'in_stage' => null,
'in_productive' => null,
'is_connected_with_git' => null,
'update_information' => null,
'type' => null,
'installed' => null,
'version' => null,
'version_stage' => null,
'version_productive' => null,
'description' => null,
'namespace' => null,
'dependencies' => null,
'author' => null,
'price' => null,
'keywords' => null,
'require' => null,
'not_installed_requirements' => null,
'not_active_stage_requirements' => null,
'not_active_productive_requirements' => null,
'run_on_build' => null,
'check_on_build' => null,
'author_icon' => null,
'plugin_icon' => null,
'license' => null,
'short_description' => null,
'is_closed_source' => null,
'inbox_path' => null,
'marketplace_name' => null,
'source' => null,
'java_script_files' => null,
'containers' => null,
'data_providers' => null,
'categories' => null,
'webhook_url' => null,
'is_external_tool' => null,
'direct_download_links' => null,
'forward_link' => null,
'branch' => null,
'offer_trial' => null,
'offer_freemium' => null,
'webstores' => null,
'plugin_set_ids' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'position' => 'position',
'active_stage' => 'activeStage',
'active_productive' => 'activeProductive',
'created_at' => 'created_at',
'updated_at' => 'updated_at',
'in_stage' => 'inStage',
'in_productive' => 'inProductive',
'is_connected_with_git' => 'isConnectedWithGit',
'update_information' => 'updateInformation',
'type' => 'type',
'installed' => 'installed',
'version' => 'version',
'version_stage' => 'versionStage',
'version_productive' => 'versionProductive',
'description' => 'description',
'namespace' => 'namespace',
'dependencies' => 'dependencies',
'author' => 'author',
'price' => 'price',
'keywords' => 'keywords',
'require' => 'require',
'not_installed_requirements' => 'notInstalledRequirements',
'not_active_stage_requirements' => 'notActiveStageRequirements',
'not_active_productive_requirements' => 'notActiveProductiveRequirements',
'run_on_build' => 'runOnBuild',
'check_on_build' => 'checkOnBuild',
'author_icon' => 'authorIcon',
'plugin_icon' => 'pluginIcon',
'license' => 'license',
'short_description' => 'shortDescription',
'is_closed_source' => 'isClosedSource',
'inbox_path' => 'inboxPath',
'marketplace_name' => 'marketplaceName',
'source' => 'source',
'java_script_files' => 'javaScriptFiles',
'containers' => 'containers',
'data_providers' => 'dataProviders',
'categories' => 'categories',
'webhook_url' => 'webhookUrl',
'is_external_tool' => 'isExternalTool',
'direct_download_links' => 'directDownloadLinks',
'forward_link' => 'forwardLink',
'branch' => 'branch',
'offer_trial' => 'offerTrial',
'offer_freemium' => 'offerFreemium',
'webstores' => 'webstores',
'plugin_set_ids' => 'pluginSetIds'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'position' => 'setPosition',
'active_stage' => 'setActiveStage',
'active_productive' => 'setActiveProductive',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt',
'in_stage' => 'setInStage',
'in_productive' => 'setInProductive',
'is_connected_with_git' => 'setIsConnectedWithGit',
'update_information' => 'setUpdateInformation',
'type' => 'setType',
'installed' => 'setInstalled',
'version' => 'setVersion',
'version_stage' => 'setVersionStage',
'version_productive' => 'setVersionProductive',
'description' => 'setDescription',
'namespace' => 'setNamespace',
'dependencies' => 'setDependencies',
'author' => 'setAuthor',
'price' => 'setPrice',
'keywords' => 'setKeywords',
'require' => 'setRequire',
'not_installed_requirements' => 'setNotInstalledRequirements',
'not_active_stage_requirements' => 'setNotActiveStageRequirements',
'not_active_productive_requirements' => 'setNotActiveProductiveRequirements',
'run_on_build' => 'setRunOnBuild',
'check_on_build' => 'setCheckOnBuild',
'author_icon' => 'setAuthorIcon',
'plugin_icon' => 'setPluginIcon',
'license' => 'setLicense',
'short_description' => 'setShortDescription',
'is_closed_source' => 'setIsClosedSource',
'inbox_path' => 'setInboxPath',
'marketplace_name' => 'setMarketplaceName',
'source' => 'setSource',
'java_script_files' => 'setJavaScriptFiles',
'containers' => 'setContainers',
'data_providers' => 'setDataProviders',
'categories' => 'setCategories',
'webhook_url' => 'setWebhookUrl',
'is_external_tool' => 'setIsExternalTool',
'direct_download_links' => 'setDirectDownloadLinks',
'forward_link' => 'setForwardLink',
'branch' => 'setBranch',
'offer_trial' => 'setOfferTrial',
'offer_freemium' => 'setOfferFreemium',
'webstores' => 'setWebstores',
'plugin_set_ids' => 'setPluginSetIds'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'position' => 'getPosition',
'active_stage' => 'getActiveStage',
'active_productive' => 'getActiveProductive',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt',
'in_stage' => 'getInStage',
'in_productive' => 'getInProductive',
'is_connected_with_git' => 'getIsConnectedWithGit',
'update_information' => 'getUpdateInformation',
'type' => 'getType',
'installed' => 'getInstalled',
'version' => 'getVersion',
'version_stage' => 'getVersionStage',
'version_productive' => 'getVersionProductive',
'description' => 'getDescription',
'namespace' => 'getNamespace',
'dependencies' => 'getDependencies',
'author' => 'getAuthor',
'price' => 'getPrice',
'keywords' => 'getKeywords',
'require' => 'getRequire',
'not_installed_requirements' => 'getNotInstalledRequirements',
'not_active_stage_requirements' => 'getNotActiveStageRequirements',
'not_active_productive_requirements' => 'getNotActiveProductiveRequirements',
'run_on_build' => 'getRunOnBuild',
'check_on_build' => 'getCheckOnBuild',
'author_icon' => 'getAuthorIcon',
'plugin_icon' => 'getPluginIcon',
'license' => 'getLicense',
'short_description' => 'getShortDescription',
'is_closed_source' => 'getIsClosedSource',
'inbox_path' => 'getInboxPath',
'marketplace_name' => 'getMarketplaceName',
'source' => 'getSource',
'java_script_files' => 'getJavaScriptFiles',
'containers' => 'getContainers',
'data_providers' => 'getDataProviders',
'categories' => 'getCategories',
'webhook_url' => 'getWebhookUrl',
'is_external_tool' => 'getIsExternalTool',
'direct_download_links' => 'getDirectDownloadLinks',
'forward_link' => 'getForwardLink',
'branch' => 'getBranch',
'offer_trial' => 'getOfferTrial',
'offer_freemium' => 'getOfferFreemium',
'webstores' => 'getWebstores',
'plugin_set_ids' => 'getPluginSetIds'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['active_stage'] = isset($data['active_stage']) ? $data['active_stage'] : null;
        $this->container['active_productive'] = isset($data['active_productive']) ? $data['active_productive'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['in_stage'] = isset($data['in_stage']) ? $data['in_stage'] : null;
        $this->container['in_productive'] = isset($data['in_productive']) ? $data['in_productive'] : null;
        $this->container['is_connected_with_git'] = isset($data['is_connected_with_git']) ? $data['is_connected_with_git'] : null;
        $this->container['update_information'] = isset($data['update_information']) ? $data['update_information'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['installed'] = isset($data['installed']) ? $data['installed'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['version_stage'] = isset($data['version_stage']) ? $data['version_stage'] : null;
        $this->container['version_productive'] = isset($data['version_productive']) ? $data['version_productive'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['namespace'] = isset($data['namespace']) ? $data['namespace'] : null;
        $this->container['dependencies'] = isset($data['dependencies']) ? $data['dependencies'] : null;
        $this->container['author'] = isset($data['author']) ? $data['author'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['keywords'] = isset($data['keywords']) ? $data['keywords'] : null;
        $this->container['require'] = isset($data['require']) ? $data['require'] : null;
        $this->container['not_installed_requirements'] = isset($data['not_installed_requirements']) ? $data['not_installed_requirements'] : null;
        $this->container['not_active_stage_requirements'] = isset($data['not_active_stage_requirements']) ? $data['not_active_stage_requirements'] : null;
        $this->container['not_active_productive_requirements'] = isset($data['not_active_productive_requirements']) ? $data['not_active_productive_requirements'] : null;
        $this->container['run_on_build'] = isset($data['run_on_build']) ? $data['run_on_build'] : null;
        $this->container['check_on_build'] = isset($data['check_on_build']) ? $data['check_on_build'] : null;
        $this->container['author_icon'] = isset($data['author_icon']) ? $data['author_icon'] : null;
        $this->container['plugin_icon'] = isset($data['plugin_icon']) ? $data['plugin_icon'] : null;
        $this->container['license'] = isset($data['license']) ? $data['license'] : null;
        $this->container['short_description'] = isset($data['short_description']) ? $data['short_description'] : null;
        $this->container['is_closed_source'] = isset($data['is_closed_source']) ? $data['is_closed_source'] : null;
        $this->container['inbox_path'] = isset($data['inbox_path']) ? $data['inbox_path'] : null;
        $this->container['marketplace_name'] = isset($data['marketplace_name']) ? $data['marketplace_name'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['java_script_files'] = isset($data['java_script_files']) ? $data['java_script_files'] : null;
        $this->container['containers'] = isset($data['containers']) ? $data['containers'] : null;
        $this->container['data_providers'] = isset($data['data_providers']) ? $data['data_providers'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['webhook_url'] = isset($data['webhook_url']) ? $data['webhook_url'] : null;
        $this->container['is_external_tool'] = isset($data['is_external_tool']) ? $data['is_external_tool'] : null;
        $this->container['direct_download_links'] = isset($data['direct_download_links']) ? $data['direct_download_links'] : null;
        $this->container['forward_link'] = isset($data['forward_link']) ? $data['forward_link'] : null;
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['offer_trial'] = isset($data['offer_trial']) ? $data['offer_trial'] : null;
        $this->container['offer_freemium'] = isset($data['offer_freemium']) ? $data['offer_freemium'] : null;
        $this->container['webstores'] = isset($data['webstores']) ? $data['webstores'] : null;
        $this->container['plugin_set_ids'] = isset($data['plugin_set_ids']) ? $data['plugin_set_ids'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the plugin
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the plugin
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int $position The position of the plugin. The position is used to determine the plugin order.
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets active_stage
     *
     * @return bool
     */
    public function getActiveStage()
    {
        return $this->container['active_stage'];
    }

    /**
     * Sets active_stage
     *
     * @param bool $active_stage Shows whether the plugin is active in Stage. Inactive plugins will not be provisioned in Stage.
     *
     * @return $this
     */
    public function setActiveStage($active_stage)
    {
        $this->container['active_stage'] = $active_stage;

        return $this;
    }

    /**
     * Gets active_productive
     *
     * @return bool
     */
    public function getActiveProductive()
    {
        return $this->container['active_productive'];
    }

    /**
     * Sets active_productive
     *
     * @param bool $active_productive Shows whether the plugin is active in Productive. Inactive plugins will not be provisioned in Productive.
     *
     * @return $this
     */
    public function setActiveProductive($active_productive)
    {
        $this->container['active_productive'] = $active_productive;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at The date that the plugin was created.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at The date that the plugin was updated last.
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets in_stage
     *
     * @return bool
     */
    public function getInStage()
    {
        return $this->container['in_stage'];
    }

    /**
     * Sets in_stage
     *
     * @param bool $in_stage Shows whether the plugin is provisioned in Stage.
     *
     * @return $this
     */
    public function setInStage($in_stage)
    {
        $this->container['in_stage'] = $in_stage;

        return $this;
    }

    /**
     * Gets in_productive
     *
     * @return bool
     */
    public function getInProductive()
    {
        return $this->container['in_productive'];
    }

    /**
     * Sets in_productive
     *
     * @param bool $in_productive Shows whether the plugin is provisioned in Productive.
     *
     * @return $this
     */
    public function setInProductive($in_productive)
    {
        $this->container['in_productive'] = $in_productive;

        return $this;
    }

    /**
     * Gets is_connected_with_git
     *
     * @return bool
     */
    public function getIsConnectedWithGit()
    {
        return $this->container['is_connected_with_git'];
    }

    /**
     * Sets is_connected_with_git
     *
     * @param bool $is_connected_with_git is_connected_with_git
     *
     * @return $this
     */
    public function setIsConnectedWithGit($is_connected_with_git)
    {
        $this->container['is_connected_with_git'] = $is_connected_with_git;

        return $this;
    }

    /**
     * Gets update_information
     *
     * @return object[]
     */
    public function getUpdateInformation()
    {
        return $this->container['update_information'];
    }

    /**
     * Sets update_information
     *
     * @param object[] $update_information update_information
     *
     * @return $this
     */
    public function setUpdateInformation($update_information)
    {
        $this->container['update_information'] = $update_information;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of the plugin. The following plugin types are available: <ul>     <li>Template</li>     <li>Export</li> </ul>
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets installed
     *
     * @return bool
     */
    public function getInstalled()
    {
        return $this->container['installed'];
    }

    /**
     * Sets installed
     *
     * @param bool $installed Whether or not the plugin is installed. This will be false for plugins that have been purchased from the marketplace but have not yet been installed in any set.
     *
     * @return $this
     */
    public function setInstalled($installed)
    {
        $this->container['installed'] = $installed;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version The version of the plugin
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets version_stage
     *
     * @return string
     */
    public function getVersionStage()
    {
        return $this->container['version_stage'];
    }

    /**
     * Sets version_stage
     *
     * @param string $version_stage The version of the plugin in stage
     *
     * @return $this
     */
    public function setVersionStage($version_stage)
    {
        $this->container['version_stage'] = $version_stage;

        return $this;
    }

    /**
     * Gets version_productive
     *
     * @return string
     */
    public function getVersionProductive()
    {
        return $this->container['version_productive'];
    }

    /**
     * Sets version_productive
     *
     * @param string $version_productive The version of the plugin in productive
     *
     * @return $this
     */
    public function setVersionProductive($version_productive)
    {
        $this->container['version_productive'] = $version_productive;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description text of the plugin
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets namespace
     *
     * @return string
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     *
     * @param string $namespace The namespace of the plugin
     *
     * @return $this
     */
    public function setNamespace($namespace)
    {
        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets dependencies
     *
     * @return object[]
     */
    public function getDependencies()
    {
        return $this->container['dependencies'];
    }

    /**
     * Sets dependencies
     *
     * @param object[] $dependencies A list of plugins with dependencies to the plugin
     *
     * @return $this
     */
    public function setDependencies($dependencies)
    {
        $this->container['dependencies'] = $dependencies;

        return $this;
    }

    /**
     * Gets author
     *
     * @return string
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param string $author The name of the plugin author
     *
     * @return $this
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets price
     *
     * @return BigDecimal
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param BigDecimal $price The price of the plugin
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets keywords
     *
     * @return string[]
     */
    public function getKeywords()
    {
        return $this->container['keywords'];
    }

    /**
     * Sets keywords
     *
     * @param string[] $keywords A list of plugin keywords
     *
     * @return $this
     */
    public function setKeywords($keywords)
    {
        $this->container['keywords'] = $keywords;

        return $this;
    }

    /**
     * Gets require
     *
     * @return string[]
     */
    public function getRequire()
    {
        return $this->container['require'];
    }

    /**
     * Sets require
     *
     * @param string[] $require A list of plugins that are required by the plugin
     *
     * @return $this
     */
    public function setRequire($require)
    {
        $this->container['require'] = $require;

        return $this;
    }

    /**
     * Gets not_installed_requirements
     *
     * @return string[]
     */
    public function getNotInstalledRequirements()
    {
        return $this->container['not_installed_requirements'];
    }

    /**
     * Sets not_installed_requirements
     *
     * @param string[] $not_installed_requirements A list of required plugins that are not installed
     *
     * @return $this
     */
    public function setNotInstalledRequirements($not_installed_requirements)
    {
        $this->container['not_installed_requirements'] = $not_installed_requirements;

        return $this;
    }

    /**
     * Gets not_active_stage_requirements
     *
     * @return string[]
     */
    public function getNotActiveStageRequirements()
    {
        return $this->container['not_active_stage_requirements'];
    }

    /**
     * Sets not_active_stage_requirements
     *
     * @param string[] $not_active_stage_requirements A list of required plugins that are not active in stage
     *
     * @return $this
     */
    public function setNotActiveStageRequirements($not_active_stage_requirements)
    {
        $this->container['not_active_stage_requirements'] = $not_active_stage_requirements;

        return $this;
    }

    /**
     * Gets not_active_productive_requirements
     *
     * @return string[]
     */
    public function getNotActiveProductiveRequirements()
    {
        return $this->container['not_active_productive_requirements'];
    }

    /**
     * Sets not_active_productive_requirements
     *
     * @param string[] $not_active_productive_requirements A list of required plugins that are not active in productive
     *
     * @return $this
     */
    public function setNotActiveProductiveRequirements($not_active_productive_requirements)
    {
        $this->container['not_active_productive_requirements'] = $not_active_productive_requirements;

        return $this;
    }

    /**
     * Gets run_on_build
     *
     * @return object[]
     */
    public function getRunOnBuild()
    {
        return $this->container['run_on_build'];
    }

    /**
     * Sets run_on_build
     *
     * @param object[] $run_on_build The list of classes to execute once on plugin build
     *
     * @return $this
     */
    public function setRunOnBuild($run_on_build)
    {
        $this->container['run_on_build'] = $run_on_build;

        return $this;
    }

    /**
     * Gets check_on_build
     *
     * @return object[]
     */
    public function getCheckOnBuild()
    {
        return $this->container['check_on_build'];
    }

    /**
     * Sets check_on_build
     *
     * @param object[] $check_on_build The list of classes to execute on every plugin build
     *
     * @return $this
     */
    public function setCheckOnBuild($check_on_build)
    {
        $this->container['check_on_build'] = $check_on_build;

        return $this;
    }

    /**
     * Gets author_icon
     *
     * @return string
     */
    public function getAuthorIcon()
    {
        return $this->container['author_icon'];
    }

    /**
     * Sets author_icon
     *
     * @param string $author_icon The author icon
     *
     * @return $this
     */
    public function setAuthorIcon($author_icon)
    {
        $this->container['author_icon'] = $author_icon;

        return $this;
    }

    /**
     * Gets plugin_icon
     *
     * @return string
     */
    public function getPluginIcon()
    {
        return $this->container['plugin_icon'];
    }

    /**
     * Sets plugin_icon
     *
     * @param string $plugin_icon The plugin icon
     *
     * @return $this
     */
    public function setPluginIcon($plugin_icon)
    {
        $this->container['plugin_icon'] = $plugin_icon;

        return $this;
    }

    /**
     * Gets license
     *
     * @return string
     */
    public function getLicense()
    {
        return $this->container['license'];
    }

    /**
     * Sets license
     *
     * @param string $license The plugin license
     *
     * @return $this
     */
    public function setLicense($license)
    {
        $this->container['license'] = $license;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return object[]
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param object[] $short_description short_description
     *
     * @return $this
     */
    public function setShortDescription($short_description)
    {
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets is_closed_source
     *
     * @return bool
     */
    public function getIsClosedSource()
    {
        return $this->container['is_closed_source'];
    }

    /**
     * Sets is_closed_source
     *
     * @param bool $is_closed_source is closed source
     *
     * @return $this
     */
    public function setIsClosedSource($is_closed_source)
    {
        $this->container['is_closed_source'] = $is_closed_source;

        return $this;
    }

    /**
     * Gets inbox_path
     *
     * @return string
     */
    public function getInboxPath()
    {
        return $this->container['inbox_path'];
    }

    /**
     * Sets inbox_path
     *
     * @param string $inbox_path path in the inbox (closed source, open source)
     *
     * @return $this
     */
    public function setInboxPath($inbox_path)
    {
        $this->container['inbox_path'] = $inbox_path;

        return $this;
    }

    /**
     * Gets marketplace_name
     *
     * @return object[]
     */
    public function getMarketplaceName()
    {
        return $this->container['marketplace_name'];
    }

    /**
     * Sets marketplace_name
     *
     * @param object[] $marketplace_name The plugin name displayed in marketplace
     *
     * @return $this
     */
    public function setMarketplaceName($marketplace_name)
    {
        $this->container['marketplace_name'] = $marketplace_name;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source Whether this plugin was installed from marketplace, git or local
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets java_script_files
     *
     * @return string[]
     */
    public function getJavaScriptFiles()
    {
        return $this->container['java_script_files'];
    }

    /**
     * Sets java_script_files
     *
     * @param string[] $java_script_files A list of included javascript files
     *
     * @return $this
     */
    public function setJavaScriptFiles($java_script_files)
    {
        $this->container['java_script_files'] = $java_script_files;

        return $this;
    }

    /**
     * Gets containers
     *
     * @return object[]
     */
    public function getContainers()
    {
        return $this->container['containers'];
    }

    /**
     * Sets containers
     *
     * @param object[] $containers A list of provided containers with name and description
     *
     * @return $this
     */
    public function setContainers($containers)
    {
        $this->container['containers'] = $containers;

        return $this;
    }

    /**
     * Gets data_providers
     *
     * @return object[]
     */
    public function getDataProviders()
    {
        return $this->container['data_providers'];
    }

    /**
     * Sets data_providers
     *
     * @param object[] $data_providers A list of data providers with name and description
     *
     * @return $this
     */
    public function setDataProviders($data_providers)
    {
        $this->container['data_providers'] = $data_providers;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return object[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param object[] $categories categories
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets webhook_url
     *
     * @return string
     */
    public function getWebhookUrl()
    {
        return $this->container['webhook_url'];
    }

    /**
     * Sets webhook_url
     *
     * @param string $webhook_url webhookUrl
     *
     * @return $this
     */
    public function setWebhookUrl($webhook_url)
    {
        $this->container['webhook_url'] = $webhook_url;

        return $this;
    }

    /**
     * Gets is_external_tool
     *
     * @return bool
     */
    public function getIsExternalTool()
    {
        return $this->container['is_external_tool'];
    }

    /**
     * Sets is_external_tool
     *
     * @param bool $is_external_tool is external tool
     *
     * @return $this
     */
    public function setIsExternalTool($is_external_tool)
    {
        $this->container['is_external_tool'] = $is_external_tool;

        return $this;
    }

    /**
     * Gets direct_download_links
     *
     * @return object[]
     */
    public function getDirectDownloadLinks()
    {
        return $this->container['direct_download_links'];
    }

    /**
     * Sets direct_download_links
     *
     * @param object[] $direct_download_links A list of urls for the external tool
     *
     * @return $this
     */
    public function setDirectDownloadLinks($direct_download_links)
    {
        $this->container['direct_download_links'] = $direct_download_links;

        return $this;
    }

    /**
     * Gets forward_link
     *
     * @return string
     */
    public function getForwardLink()
    {
        return $this->container['forward_link'];
    }

    /**
     * Sets forward_link
     *
     * @param string $forward_link A forward link to the external tool developers page
     *
     * @return $this
     */
    public function setForwardLink($forward_link)
    {
        $this->container['forward_link'] = $forward_link;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return string
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param string $branch The branch to checkout for this particular Plugin
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets offer_trial
     *
     * @return bool
     */
    public function getOfferTrial()
    {
        return $this->container['offer_trial'];
    }

    /**
     * Sets offer_trial
     *
     * @param bool $offer_trial Determines if the plugin offers a trial period for plentyMarketplace
     *
     * @return $this
     */
    public function setOfferTrial($offer_trial)
    {
        $this->container['offer_trial'] = $offer_trial;

        return $this;
    }

    /**
     * Gets offer_freemium
     *
     * @return bool
     */
    public function getOfferFreemium()
    {
        return $this->container['offer_freemium'];
    }

    /**
     * Sets offer_freemium
     *
     * @param bool $offer_freemium Determines if the plugin offers freemium functionality
     *
     * @return $this
     */
    public function setOfferFreemium($offer_freemium)
    {
        $this->container['offer_freemium'] = $offer_freemium;

        return $this;
    }

    /**
     * Gets webstores
     *
     * @return \Swagger\Client\Model\PlentyModulesSystemModelsWebstore[]
     */
    public function getWebstores()
    {
        return $this->container['webstores'];
    }

    /**
     * Sets webstores
     *
     * @param \Swagger\Client\Model\PlentyModulesSystemModelsWebstore[] $webstores A list of clients (stores) activated for the plugin (List)
     *
     * @return $this
     */
    public function setWebstores($webstores)
    {
        $this->container['webstores'] = $webstores;

        return $this;
    }

    /**
     * Gets plugin_set_ids
     *
     * @return int[]
     */
    public function getPluginSetIds()
    {
        return $this->container['plugin_set_ids'];
    }

    /**
     * Sets plugin_set_ids
     *
     * @param int[] $plugin_set_ids Array of PluginSet Ids where this plugin is contained.
     *
     * @return $this
     */
    public function setPluginSetIds($plugin_set_ids)
    {
        $this->container['plugin_set_ids'] = $plugin_set_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

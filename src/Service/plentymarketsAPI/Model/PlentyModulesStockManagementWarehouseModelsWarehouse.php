<?php
/**
 * PlentyModulesStockManagementWarehouseModelsWarehouse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PlentyModulesStockManagementWarehouseModelsWarehouse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlentyModulesStockManagementWarehouseModelsWarehouse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Plenty\Modules\StockManagement\Warehouse\Models\Warehouse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'name' => 'string',
'note' => 'string',
'type_id' => 'int',
'on_stock_availability' => 'int',
'out_of_stock_availability' => 'int',
'split_by_shipping_profile' => 'bool',
'storage_location_type' => 'string',
'storage_location_zone' => 'int',
'repair_warehouse_id' => 'int',
'is_inventory_mode_active' => 'bool',
'logistics_type' => 'string',
'updated_at' => 'string',
'created_at' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'name' => null,
'note' => null,
'type_id' => null,
'on_stock_availability' => null,
'out_of_stock_availability' => null,
'split_by_shipping_profile' => null,
'storage_location_type' => null,
'storage_location_zone' => null,
'repair_warehouse_id' => null,
'is_inventory_mode_active' => null,
'logistics_type' => null,
'updated_at' => null,
'created_at' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'note' => 'note',
'type_id' => 'typeId',
'on_stock_availability' => 'onStockAvailability',
'out_of_stock_availability' => 'outOfStockAvailability',
'split_by_shipping_profile' => 'splitByShippingProfile',
'storage_location_type' => 'storageLocationType',
'storage_location_zone' => 'storageLocationZone',
'repair_warehouse_id' => 'repairWarehouseId',
'is_inventory_mode_active' => 'isInventoryModeActive',
'logistics_type' => 'logisticsType',
'updated_at' => 'updatedAt',
'created_at' => 'createdAt'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'note' => 'setNote',
'type_id' => 'setTypeId',
'on_stock_availability' => 'setOnStockAvailability',
'out_of_stock_availability' => 'setOutOfStockAvailability',
'split_by_shipping_profile' => 'setSplitByShippingProfile',
'storage_location_type' => 'setStorageLocationType',
'storage_location_zone' => 'setStorageLocationZone',
'repair_warehouse_id' => 'setRepairWarehouseId',
'is_inventory_mode_active' => 'setIsInventoryModeActive',
'logistics_type' => 'setLogisticsType',
'updated_at' => 'setUpdatedAt',
'created_at' => 'setCreatedAt'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'note' => 'getNote',
'type_id' => 'getTypeId',
'on_stock_availability' => 'getOnStockAvailability',
'out_of_stock_availability' => 'getOutOfStockAvailability',
'split_by_shipping_profile' => 'getSplitByShippingProfile',
'storage_location_type' => 'getStorageLocationType',
'storage_location_zone' => 'getStorageLocationZone',
'repair_warehouse_id' => 'getRepairWarehouseId',
'is_inventory_mode_active' => 'getIsInventoryModeActive',
'logistics_type' => 'getLogisticsType',
'updated_at' => 'getUpdatedAt',
'created_at' => 'getCreatedAt'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['type_id'] = isset($data['type_id']) ? $data['type_id'] : null;
        $this->container['on_stock_availability'] = isset($data['on_stock_availability']) ? $data['on_stock_availability'] : null;
        $this->container['out_of_stock_availability'] = isset($data['out_of_stock_availability']) ? $data['out_of_stock_availability'] : null;
        $this->container['split_by_shipping_profile'] = isset($data['split_by_shipping_profile']) ? $data['split_by_shipping_profile'] : null;
        $this->container['storage_location_type'] = isset($data['storage_location_type']) ? $data['storage_location_type'] : null;
        $this->container['storage_location_zone'] = isset($data['storage_location_zone']) ? $data['storage_location_zone'] : null;
        $this->container['repair_warehouse_id'] = isset($data['repair_warehouse_id']) ? $data['repair_warehouse_id'] : null;
        $this->container['is_inventory_mode_active'] = isset($data['is_inventory_mode_active']) ? $data['is_inventory_mode_active'] : null;
        $this->container['logistics_type'] = isset($data['logistics_type']) ? $data['logistics_type'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The id of the warehouse
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the warehouse
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note A note for this warehouse
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets type_id
     *
     * @return int
     */
    public function getTypeId()
    {
        return $this->container['type_id'];
    }

    /**
     * Sets type_id
     *
     * @param int $type_id The id of the warehouse type. The following types are available: <ul>     <li>0 = Sales warehouse</li>     <li>1 = Repair warehouse</li>     <li>4 = Storage warehouse</li>     <li>5 = Transit warehouse</li>     <li>6 = Distribution warehouse</li>     <li>7 = Other</li> </ul>
     *
     * @return $this
     */
    public function setTypeId($type_id)
    {
        $this->container['type_id'] = $type_id;

        return $this;
    }

    /**
     * Gets on_stock_availability
     *
     * @return int
     */
    public function getOnStockAvailability()
    {
        return $this->container['on_stock_availability'];
    }

    /**
     * Sets on_stock_availability
     *
     * @param int $on_stock_availability Displayed availability of a variation if stock is available
     *
     * @return $this
     */
    public function setOnStockAvailability($on_stock_availability)
    {
        $this->container['on_stock_availability'] = $on_stock_availability;

        return $this;
    }

    /**
     * Gets out_of_stock_availability
     *
     * @return int
     */
    public function getOutOfStockAvailability()
    {
        return $this->container['out_of_stock_availability'];
    }

    /**
     * Sets out_of_stock_availability
     *
     * @param int $out_of_stock_availability Displayed availability of a variation if no stock is available
     *
     * @return $this
     */
    public function setOutOfStockAvailability($out_of_stock_availability)
    {
        $this->container['out_of_stock_availability'] = $out_of_stock_availability;

        return $this;
    }

    /**
     * Gets split_by_shipping_profile
     *
     * @return bool
     */
    public function getSplitByShippingProfile()
    {
        return $this->container['split_by_shipping_profile'];
    }

    /**
     * Sets split_by_shipping_profile
     *
     * @param bool $split_by_shipping_profile Flag that indicates if for this warehouse orders are split by shipping profiles or not. <ul><li>True = Orders are split by shipping profiles</li> <li>False = Orders will not be split by shipping profiles</li></ul>
     *
     * @return $this
     */
    public function setSplitByShippingProfile($split_by_shipping_profile)
    {
        $this->container['split_by_shipping_profile'] = $split_by_shipping_profile;

        return $this;
    }

    /**
     * Gets storage_location_type
     *
     * @return string
     */
    public function getStorageLocationType()
    {
        return $this->container['storage_location_type'];
    }

    /**
     * Sets storage_location_type
     *
     * @param string $storage_location_type The storage location type. The following types are available: <ul><li>none</li> <li>small</li><li>medium</li> <li>large</li> <li>europallet</li></ul>
     *
     * @return $this
     */
    public function setStorageLocationType($storage_location_type)
    {
        $this->container['storage_location_type'] = $storage_location_type;

        return $this;
    }

    /**
     * Gets storage_location_zone
     *
     * @return int
     */
    public function getStorageLocationZone()
    {
        return $this->container['storage_location_zone'];
    }

    /**
     * Sets storage_location_zone
     *
     * @param int $storage_location_zone The zone that the storage location is in
     *
     * @return $this
     */
    public function setStorageLocationZone($storage_location_zone)
    {
        $this->container['storage_location_zone'] = $storage_location_zone;

        return $this;
    }

    /**
     * Gets repair_warehouse_id
     *
     * @return int
     */
    public function getRepairWarehouseId()
    {
        return $this->container['repair_warehouse_id'];
    }

    /**
     * Sets repair_warehouse_id
     *
     * @param int $repair_warehouse_id The id of the associated repair warehouse
     *
     * @return $this
     */
    public function setRepairWarehouseId($repair_warehouse_id)
    {
        $this->container['repair_warehouse_id'] = $repair_warehouse_id;

        return $this;
    }

    /**
     * Gets is_inventory_mode_active
     *
     * @return bool
     */
    public function getIsInventoryModeActive()
    {
        return $this->container['is_inventory_mode_active'];
    }

    /**
     * Sets is_inventory_mode_active
     *
     * @param bool $is_inventory_mode_active Flag that indicates if the inventory mode for this warehouse is active or not. <ul><li>True = active</li> <li>False = inactive</li></ul>
     *
     * @return $this
     */
    public function setIsInventoryModeActive($is_inventory_mode_active)
    {
        $this->container['is_inventory_mode_active'] = $is_inventory_mode_active;

        return $this;
    }

    /**
     * Gets logistics_type
     *
     * @return string
     */
    public function getLogisticsType()
    {
        return $this->container['logistics_type'];
    }

    /**
     * Sets logistics_type
     *
     * @param string $logistics_type The id of the logistics type of the warehouse. The logistics type states which service provider fulfills the storage and shipping. The following logistics types are available: <ul> <li>own</li> <li>amazon</li> <li>dhlFulfillment</li> </ul>
     *
     * @return $this
     */
    public function setLogisticsType($logistics_type)
    {
        $this->container['logistics_type'] = $logistics_type;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at The updated at timestamp of the warehouse
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at The created at timestamp of the warehouse
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

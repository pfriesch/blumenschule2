<?php
/**
 * PlentyModulesItemManufacturerModelsManufacturer
 *
 * PHP version 5
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BSApp\Service\plentymarketsAPI\Model;

use \ArrayAccess;
use \BSApp\Service\plentymarketsAPI\ObjectSerializer;

/**
 * PlentyModulesItemManufacturerModelsManufacturer Class Doc Comment
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlentyModulesItemManufacturerModelsManufacturer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Plenty\Modules\Item\Manufacturer\Models\Manufacturer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'name' => 'string',
'external_name' => 'string',
'logo' => 'string',
'url' => 'string',
'street' => 'string',
'house_no' => 'string',
'postcode' => 'string',
'town' => 'string',
'phone_number' => 'string',
'fax_number' => 'string',
'email' => 'string',
'country_id' => 'int',
'pixmania_brand_id' => 'int',
'neckermann_at_ep_brand_id' => 'int',
'la_redoute_brand_id' => 'int',
'position' => 'int',
'comment' => 'string',
'updated_at' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'name' => null,
'external_name' => null,
'logo' => null,
'url' => null,
'street' => null,
'house_no' => null,
'postcode' => null,
'town' => null,
'phone_number' => null,
'fax_number' => null,
'email' => null,
'country_id' => null,
'pixmania_brand_id' => null,
'neckermann_at_ep_brand_id' => null,
'la_redoute_brand_id' => null,
'position' => null,
'comment' => null,
'updated_at' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'external_name' => 'externalName',
'logo' => 'logo',
'url' => 'url',
'street' => 'street',
'house_no' => 'houseNo',
'postcode' => 'postcode',
'town' => 'town',
'phone_number' => 'phoneNumber',
'fax_number' => 'faxNumber',
'email' => 'email',
'country_id' => 'countryId',
'pixmania_brand_id' => 'pixmaniaBrandId',
'neckermann_at_ep_brand_id' => 'neckermannAtEpBrandId',
'la_redoute_brand_id' => 'laRedouteBrandId',
'position' => 'position',
'comment' => 'comment',
'updated_at' => 'updatedAt'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'external_name' => 'setExternalName',
'logo' => 'setLogo',
'url' => 'setUrl',
'street' => 'setStreet',
'house_no' => 'setHouseNo',
'postcode' => 'setPostcode',
'town' => 'setTown',
'phone_number' => 'setPhoneNumber',
'fax_number' => 'setFaxNumber',
'email' => 'setEmail',
'country_id' => 'setCountryId',
'pixmania_brand_id' => 'setPixmaniaBrandId',
'neckermann_at_ep_brand_id' => 'setNeckermannAtEpBrandId',
'la_redoute_brand_id' => 'setLaRedouteBrandId',
'position' => 'setPosition',
'comment' => 'setComment',
'updated_at' => 'setUpdatedAt'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'external_name' => 'getExternalName',
'logo' => 'getLogo',
'url' => 'getUrl',
'street' => 'getStreet',
'house_no' => 'getHouseNo',
'postcode' => 'getPostcode',
'town' => 'getTown',
'phone_number' => 'getPhoneNumber',
'fax_number' => 'getFaxNumber',
'email' => 'getEmail',
'country_id' => 'getCountryId',
'pixmania_brand_id' => 'getPixmaniaBrandId',
'neckermann_at_ep_brand_id' => 'getNeckermannAtEpBrandId',
'la_redoute_brand_id' => 'getLaRedouteBrandId',
'position' => 'getPosition',
'comment' => 'getComment',
'updated_at' => 'getUpdatedAt'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['external_name'] = isset($data['external_name']) ? $data['external_name'] : null;
        $this->container['logo'] = isset($data['logo']) ? $data['logo'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['street'] = isset($data['street']) ? $data['street'] : null;
        $this->container['house_no'] = isset($data['house_no']) ? $data['house_no'] : null;
        $this->container['postcode'] = isset($data['postcode']) ? $data['postcode'] : null;
        $this->container['town'] = isset($data['town']) ? $data['town'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['fax_number'] = isset($data['fax_number']) ? $data['fax_number'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['country_id'] = isset($data['country_id']) ? $data['country_id'] : null;
        $this->container['pixmania_brand_id'] = isset($data['pixmania_brand_id']) ? $data['pixmania_brand_id'] : null;
        $this->container['neckermann_at_ep_brand_id'] = isset($data['neckermann_at_ep_brand_id']) ? $data['neckermann_at_ep_brand_id'] : null;
        $this->container['la_redoute_brand_id'] = isset($data['la_redoute_brand_id']) ? $data['la_redoute_brand_id'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique ID of the manufacturer.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the manufacturer
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets external_name
     *
     * @return string
     */
    public function getExternalName()
    {
        return $this->container['external_name'];
    }

    /**
     * Sets external_name
     *
     * @param string $external_name The external name of the manufacturer. The external name is used for the item export to external markets. If no external name is saved, the Name will be used. The external name will also be transferred to FINDOLOGIC and will be indexed for item searches.
     *
     * @return $this
     */
    public function setExternalName($external_name)
    {
        $this->container['external_name'] = $external_name;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string $logo The URL of the manufacturer's logo
     *
     * @return $this
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The URL of the manufacturer's website
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string $street The street of the manufacturer's address
     *
     * @return $this
     */
    public function setStreet($street)
    {
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets house_no
     *
     * @return string
     */
    public function getHouseNo()
    {
        return $this->container['house_no'];
    }

    /**
     * Sets house_no
     *
     * @param string $house_no The house number of the manufacturer's address
     *
     * @return $this
     */
    public function setHouseNo($house_no)
    {
        $this->container['house_no'] = $house_no;

        return $this;
    }

    /**
     * Gets postcode
     *
     * @return string
     */
    public function getPostcode()
    {
        return $this->container['postcode'];
    }

    /**
     * Sets postcode
     *
     * @param string $postcode The postal code of the manufacturer's address
     *
     * @return $this
     */
    public function setPostcode($postcode)
    {
        $this->container['postcode'] = $postcode;

        return $this;
    }

    /**
     * Gets town
     *
     * @return string
     */
    public function getTown()
    {
        return $this->container['town'];
    }

    /**
     * Sets town
     *
     * @param string $town The town of the manufacturer's address
     *
     * @return $this
     */
    public function setTown($town)
    {
        $this->container['town'] = $town;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number The phone number of the manufacturer
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets fax_number
     *
     * @return string
     */
    public function getFaxNumber()
    {
        return $this->container['fax_number'];
    }

    /**
     * Sets fax_number
     *
     * @param string $fax_number The fax number of the manufacturer
     *
     * @return $this
     */
    public function setFaxNumber($fax_number)
    {
        $this->container['fax_number'] = $fax_number;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The email address of the manufacturer
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return int
     */
    public function getCountryId()
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param int $country_id The ID of the <a href=\"https://developers.plentymarkets.com/rest-doc/introduction#countries\" target=\"_blank\">country</a> in which the manufacturer is based; 0 = unknown.
     *
     * @return $this
     */
    public function setCountryId($country_id)
    {
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets pixmania_brand_id
     *
     * @return int
     */
    public function getPixmaniaBrandId()
    {
        return $this->container['pixmania_brand_id'];
    }

    /**
     * Sets pixmania_brand_id
     *
     * @param int $pixmania_brand_id The manufacturer's ID on the market Pixmania
     *
     * @return $this
     */
    public function setPixmaniaBrandId($pixmania_brand_id)
    {
        $this->container['pixmania_brand_id'] = $pixmania_brand_id;

        return $this;
    }

    /**
     * Gets neckermann_at_ep_brand_id
     *
     * @return int
     */
    public function getNeckermannAtEpBrandId()
    {
        return $this->container['neckermann_at_ep_brand_id'];
    }

    /**
     * Sets neckermann_at_ep_brand_id
     *
     * @param int $neckermann_at_ep_brand_id The manufacturer's ID on the market Neckermann Austria, Enterprise version
     *
     * @return $this
     */
    public function setNeckermannAtEpBrandId($neckermann_at_ep_brand_id)
    {
        $this->container['neckermann_at_ep_brand_id'] = $neckermann_at_ep_brand_id;

        return $this;
    }

    /**
     * Gets la_redoute_brand_id
     *
     * @return int
     */
    public function getLaRedouteBrandId()
    {
        return $this->container['la_redoute_brand_id'];
    }

    /**
     * Sets la_redoute_brand_id
     *
     * @param int $la_redoute_brand_id The manufacturer's ID on the market La Redoute
     *
     * @return $this
     */
    public function setLaRedouteBrandId($la_redoute_brand_id)
    {
        $this->container['la_redoute_brand_id'] = $la_redoute_brand_id;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int $position The position of the manufacturer
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment Internal comments about the manufacturer (optional)
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at The time the manufacturer information was last updated.
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

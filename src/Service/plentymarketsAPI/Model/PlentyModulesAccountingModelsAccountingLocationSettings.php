<?php
/**
 * PlentyModulesAccountingModelsAccountingLocationSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BSApp\Service\plentymarketsAPI\Model;

use \ArrayAccess;
use \BSApp\Service\plentymarketsAPI\ObjectSerializer;

/**
 * PlentyModulesAccountingModelsAccountingLocationSettings Class Doc Comment
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlentyModulesAccountingModelsAccountingLocationSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'Plenty\Modules\Accounting\Models\AccountingLocationSettings';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'location_id' => 'int',
        'is_invoice_eu_net' => 'bool',
        'is_invoice_export_net' => 'bool',
        'show_shipping_vat' => 'bool',
        'is_small_business' => 'bool',
        'number_of_decimal_places' => 'int',
        'round_totals_only' => 'bool'];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'location_id' => null,
        'is_invoice_eu_net' => null,
        'is_invoice_export_net' => null,
        'show_shipping_vat' => null,
        'is_small_business' => null,
        'number_of_decimal_places' => null,
        'round_totals_only' => null];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'location_id' => 'locationId',
        'is_invoice_eu_net' => 'isInvoiceEUNet',
        'is_invoice_export_net' => 'isInvoiceExportNet',
        'show_shipping_vat' => 'showShippingVat',
        'is_small_business' => 'isSmallBusiness',
        'number_of_decimal_places' => 'numberOfDecimalPlaces',
        'round_totals_only' => 'roundTotalsOnly'];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'location_id' => 'setLocationId',
        'is_invoice_eu_net' => 'setIsInvoiceEuNet',
        'is_invoice_export_net' => 'setIsInvoiceExportNet',
        'show_shipping_vat' => 'setShowShippingVat',
        'is_small_business' => 'setIsSmallBusiness',
        'number_of_decimal_places' => 'setNumberOfDecimalPlaces',
        'round_totals_only' => 'setRoundTotalsOnly'];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'location_id' => 'getLocationId',
        'is_invoice_eu_net' => 'getIsInvoiceEuNet',
        'is_invoice_export_net' => 'getIsInvoiceExportNet',
        'show_shipping_vat' => 'getShowShippingVat',
        'is_small_business' => 'getIsSmallBusiness',
        'number_of_decimal_places' => 'getNumberOfDecimalPlaces',
        'round_totals_only' => 'getRoundTotalsOnly'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['is_invoice_eu_net'] = isset($data['is_invoice_eu_net']) ? $data['is_invoice_eu_net'] : null;
        $this->container['is_invoice_export_net'] = isset($data['is_invoice_export_net']) ? $data['is_invoice_export_net'] : null;
        $this->container['show_shipping_vat'] = isset($data['show_shipping_vat']) ? $data['show_shipping_vat'] : null;
        $this->container['is_small_business'] = isset($data['is_small_business']) ? $data['is_small_business'] : null;
        $this->container['number_of_decimal_places'] = isset($data['number_of_decimal_places']) ? $data['number_of_decimal_places'] : null;
        $this->container['round_totals_only'] = isset($data['round_totals_only']) ? $data['round_totals_only'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets location_id
     *
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int $location_id The ID of the accounting location
     *
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets is_invoice_eu_net
     *
     * @return bool
     */
    public function getIsInvoiceEuNet()
    {
        return $this->container['is_invoice_eu_net'];
    }

    /**
     * Sets is_invoice_eu_net
     *
     * @param bool $is_invoice_eu_net Is the invoice net for EU?
     *
     * @return $this
     */
    public function setIsInvoiceEuNet($is_invoice_eu_net)
    {
        $this->container['is_invoice_eu_net'] = $is_invoice_eu_net;

        return $this;
    }

    /**
     * Gets is_invoice_export_net
     *
     * @return bool
     */
    public function getIsInvoiceExportNet()
    {
        return $this->container['is_invoice_export_net'];
    }

    /**
     * Sets is_invoice_export_net
     *
     * @param bool $is_invoice_export_net Is the invoice net for export?
     *
     * @return $this
     */
    public function setIsInvoiceExportNet($is_invoice_export_net)
    {
        $this->container['is_invoice_export_net'] = $is_invoice_export_net;

        return $this;
    }

    /**
     * Gets show_shipping_vat
     *
     * @return bool
     */
    public function getShowShippingVat()
    {
        return $this->container['show_shipping_vat'];
    }

    /**
     * Sets show_shipping_vat
     *
     * @param bool $show_shipping_vat Show the vat for shipping costs on the invoice?
     *
     * @return $this
     */
    public function setShowShippingVat($show_shipping_vat)
    {
        $this->container['show_shipping_vat'] = $show_shipping_vat;

        return $this;
    }

    /**
     * Gets is_small_business
     *
     * @return bool
     */
    public function getIsSmallBusiness()
    {
        return $this->container['is_small_business'];
    }

    /**
     * Sets is_small_business
     *
     * @param bool $is_small_business Is it a small business?
     *
     * @return $this
     */
    public function setIsSmallBusiness($is_small_business)
    {
        $this->container['is_small_business'] = $is_small_business;

        return $this;
    }

    /**
     * Gets number_of_decimal_places
     *
     * @return int
     */
    public function getNumberOfDecimalPlaces()
    {
        return $this->container['number_of_decimal_places'];
    }

    /**
     * Sets number_of_decimal_places
     *
     * @param int $number_of_decimal_places The number of decimal places for prices
     *
     * @return $this
     */
    public function setNumberOfDecimalPlaces($number_of_decimal_places)
    {
        $this->container['number_of_decimal_places'] = $number_of_decimal_places;

        return $this;
    }

    /**
     * Gets round_totals_only
     *
     * @return bool
     */
    public function getRoundTotalsOnly()
    {
        return $this->container['round_totals_only'];
    }

    /**
     * Sets round_totals_only
     *
     * @param bool $round_totals_only Do only round totals?
     *
     * @return $this
     */
    public function setRoundTotalsOnly($round_totals_only)
    {
        $this->container['round_totals_only'] = $round_totals_only;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

<?php
/**
 * PlentyModulesItemVariationModelsVariation
 *
 * PHP version 5
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BSApp\Service\plentymarketsAPI\Model;

use \ArrayAccess;
use \BSApp\Service\plentymarketsAPI\ObjectSerializer;

/**
 * PlentyModulesItemVariationModelsVariation Class Doc Comment
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlentyModulesItemVariationModelsVariation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Plenty\Modules\Item\Variation\Models\Variation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'is_main' => 'bool',
'main_variation_id' => 'int',
'item_id' => 'int',
'position' => 'int',
'is_active' => 'bool',
'number' => 'string',
'model' => 'string',
'external_id' => 'string',
'availability' => 'int',
'estimated_available_at' => 'string',
'purchase_price' => 'BigDecimal',
'moving_average_price' => 'BigDecimal',
'created_at' => 'string',
'updated_at' => 'string',
'related_updated_at' => 'string',
'availability_updated_at' => 'string',
'price_calculation_id' => 'int',
'picking' => 'string',
'stock_limitation' => 'int',
'is_visible_if_net_stock_is_positive' => 'bool',
'is_invisible_if_net_stock_is_not_positive' => 'bool',
'is_available_if_net_stock_is_positive' => 'bool',
'is_unavailable_if_net_stock_is_not_positive' => 'bool',
'is_visible_in_list_if_net_stock_is_positive' => 'bool',
'is_invisible_in_list_if_net_stock_is_not_positive' => 'bool',
'main_warehouse_id' => 'int',
'maximum_order_quantity' => 'BigDecimal',
'minimum_order_quantity' => 'BigDecimal',
'interval_order_quantity' => 'BigDecimal',
'available_until' => 'string',
'released_at' => 'string',
'name' => 'string',
'unit_combination_id' => 'int',
'weight_g' => 'int',
'weight_net_g' => 'int',
'width_mm' => 'int',
'length_mm' => 'int',
'height_mm' => 'int',
'extra_shipping_charge1' => 'BigDecimal',
'extra_shipping_charge2' => 'BigDecimal',
'units_contained' => 'int',
'pallet_type_id' => 'int',
'packing_units' => 'int',
'packing_unit_type_id' => 'int',
'transportation_costs' => 'BigDecimal',
'storage_costs' => 'BigDecimal',
'customs' => 'BigDecimal',
'operating_costs' => 'BigDecimal',
'vat_id' => 'int',
'bundle_type' => 'string',
'automatic_client_visibility' => 'int',
'automatic_list_visibility' => 'int',
'is_hidden_in_category_list' => 'bool',
'default_shipping_costs' => 'BigDecimal',
'may_show_unit_price' => 'bool',
'sales_rank' => 'int',
'parent_variation_id' => 'int',
'parent_variation_quantity' => 'BigDecimal',
'single_item_count' => 'int',
'category_variation_id' => 'int',
'market_variation_id' => 'int',
'client_variation_id' => 'int',
'sales_price_variation_id' => 'int',
'supplier_variation_id' => 'int',
'warehouse_variation_id' => 'int',
'property_variation_id' => 'int',
'tag_variation_id' => 'int',
'has_calculated_bundle_weight' => 'bool',
'has_calculated_bundle_net_weight' => 'bool',
'has_calculated_bundle_purchase_price' => 'bool',
'has_calculated_bundle_moving_average_price' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'is_main' => null,
'main_variation_id' => null,
'item_id' => null,
'position' => null,
'is_active' => null,
'number' => null,
'model' => null,
'external_id' => null,
'availability' => null,
'estimated_available_at' => null,
'purchase_price' => null,
'moving_average_price' => null,
'created_at' => null,
'updated_at' => null,
'related_updated_at' => null,
'availability_updated_at' => null,
'price_calculation_id' => null,
'picking' => null,
'stock_limitation' => null,
'is_visible_if_net_stock_is_positive' => null,
'is_invisible_if_net_stock_is_not_positive' => null,
'is_available_if_net_stock_is_positive' => null,
'is_unavailable_if_net_stock_is_not_positive' => null,
'is_visible_in_list_if_net_stock_is_positive' => null,
'is_invisible_in_list_if_net_stock_is_not_positive' => null,
'main_warehouse_id' => null,
'maximum_order_quantity' => null,
'minimum_order_quantity' => null,
'interval_order_quantity' => null,
'available_until' => null,
'released_at' => null,
'name' => null,
'unit_combination_id' => null,
'weight_g' => null,
'weight_net_g' => null,
'width_mm' => null,
'length_mm' => null,
'height_mm' => null,
'extra_shipping_charge1' => null,
'extra_shipping_charge2' => null,
'units_contained' => null,
'pallet_type_id' => null,
'packing_units' => null,
'packing_unit_type_id' => null,
'transportation_costs' => null,
'storage_costs' => null,
'customs' => null,
'operating_costs' => null,
'vat_id' => null,
'bundle_type' => null,
'automatic_client_visibility' => null,
'automatic_list_visibility' => null,
'is_hidden_in_category_list' => null,
'default_shipping_costs' => null,
'may_show_unit_price' => null,
'sales_rank' => null,
'parent_variation_id' => null,
'parent_variation_quantity' => null,
'single_item_count' => null,
'category_variation_id' => null,
'market_variation_id' => null,
'client_variation_id' => null,
'sales_price_variation_id' => null,
'supplier_variation_id' => null,
'warehouse_variation_id' => null,
'property_variation_id' => null,
'tag_variation_id' => null,
'has_calculated_bundle_weight' => null,
'has_calculated_bundle_net_weight' => null,
'has_calculated_bundle_purchase_price' => null,
'has_calculated_bundle_moving_average_price' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'is_main' => 'isMain',
'main_variation_id' => 'mainVariationId',
'item_id' => 'itemId',
'position' => 'position',
'is_active' => 'isActive',
'number' => 'number',
'model' => 'model',
'external_id' => 'externalId',
'availability' => 'availability',
'estimated_available_at' => 'estimatedAvailableAt',
'purchase_price' => 'purchasePrice',
'moving_average_price' => 'movingAveragePrice',
'created_at' => 'createdAt',
'updated_at' => 'updatedAt',
'related_updated_at' => 'relatedUpdatedAt',
'availability_updated_at' => 'availabilityUpdatedAt',
'price_calculation_id' => 'priceCalculationId',
'picking' => 'picking',
'stock_limitation' => 'stockLimitation',
'is_visible_if_net_stock_is_positive' => 'isVisibleIfNetStockIsPositive',
'is_invisible_if_net_stock_is_not_positive' => 'isInvisibleIfNetStockIsNotPositive',
'is_available_if_net_stock_is_positive' => 'isAvailableIfNetStockIsPositive',
'is_unavailable_if_net_stock_is_not_positive' => 'isUnavailableIfNetStockIsNotPositive',
'is_visible_in_list_if_net_stock_is_positive' => 'isVisibleInListIfNetStockIsPositive',
'is_invisible_in_list_if_net_stock_is_not_positive' => 'isInvisibleInListIfNetStockIsNotPositive',
'main_warehouse_id' => 'mainWarehouseId',
'maximum_order_quantity' => 'maximumOrderQuantity',
'minimum_order_quantity' => 'minimumOrderQuantity',
'interval_order_quantity' => 'intervalOrderQuantity',
'available_until' => 'availableUntil',
'released_at' => 'releasedAt',
'name' => 'name',
'unit_combination_id' => 'unitCombinationId',
'weight_g' => 'weightG',
'weight_net_g' => 'weightNetG',
'width_mm' => 'widthMM',
'length_mm' => 'lengthMM',
'height_mm' => 'heightMM',
'extra_shipping_charge1' => 'extraShippingCharge1',
'extra_shipping_charge2' => 'extraShippingCharge2',
'units_contained' => 'unitsContained',
'pallet_type_id' => 'palletTypeId',
'packing_units' => 'packingUnits',
'packing_unit_type_id' => 'packingUnitTypeId',
'transportation_costs' => 'transportationCosts',
'storage_costs' => 'storageCosts',
'customs' => 'customs',
'operating_costs' => 'operatingCosts',
'vat_id' => 'vatId',
'bundle_type' => 'bundleType',
'automatic_client_visibility' => 'automaticClientVisibility',
'automatic_list_visibility' => 'automaticListVisibility',
'is_hidden_in_category_list' => 'isHiddenInCategoryList',
'default_shipping_costs' => 'defaultShippingCosts',
'may_show_unit_price' => 'mayShowUnitPrice',
'sales_rank' => 'salesRank',
'parent_variation_id' => 'parentVariationId',
'parent_variation_quantity' => 'parentVariationQuantity',
'single_item_count' => 'singleItemCount',
'category_variation_id' => 'categoryVariationId',
'market_variation_id' => 'marketVariationId',
'client_variation_id' => 'clientVariationId',
'sales_price_variation_id' => 'salesPriceVariationId',
'supplier_variation_id' => 'supplierVariationId',
'warehouse_variation_id' => 'warehouseVariationId',
'property_variation_id' => 'propertyVariationId',
'tag_variation_id' => 'tagVariationId',
'has_calculated_bundle_weight' => 'hasCalculatedBundleWeight',
'has_calculated_bundle_net_weight' => 'hasCalculatedBundleNetWeight',
'has_calculated_bundle_purchase_price' => 'hasCalculatedBundlePurchasePrice',
'has_calculated_bundle_moving_average_price' => 'hasCalculatedBundleMovingAveragePrice'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'is_main' => 'setIsMain',
'main_variation_id' => 'setMainVariationId',
'item_id' => 'setItemId',
'position' => 'setPosition',
'is_active' => 'setIsActive',
'number' => 'setNumber',
'model' => 'setModel',
'external_id' => 'setExternalId',
'availability' => 'setAvailability',
'estimated_available_at' => 'setEstimatedAvailableAt',
'purchase_price' => 'setPurchasePrice',
'moving_average_price' => 'setMovingAveragePrice',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt',
'related_updated_at' => 'setRelatedUpdatedAt',
'availability_updated_at' => 'setAvailabilityUpdatedAt',
'price_calculation_id' => 'setPriceCalculationId',
'picking' => 'setPicking',
'stock_limitation' => 'setStockLimitation',
'is_visible_if_net_stock_is_positive' => 'setIsVisibleIfNetStockIsPositive',
'is_invisible_if_net_stock_is_not_positive' => 'setIsInvisibleIfNetStockIsNotPositive',
'is_available_if_net_stock_is_positive' => 'setIsAvailableIfNetStockIsPositive',
'is_unavailable_if_net_stock_is_not_positive' => 'setIsUnavailableIfNetStockIsNotPositive',
'is_visible_in_list_if_net_stock_is_positive' => 'setIsVisibleInListIfNetStockIsPositive',
'is_invisible_in_list_if_net_stock_is_not_positive' => 'setIsInvisibleInListIfNetStockIsNotPositive',
'main_warehouse_id' => 'setMainWarehouseId',
'maximum_order_quantity' => 'setMaximumOrderQuantity',
'minimum_order_quantity' => 'setMinimumOrderQuantity',
'interval_order_quantity' => 'setIntervalOrderQuantity',
'available_until' => 'setAvailableUntil',
'released_at' => 'setReleasedAt',
'name' => 'setName',
'unit_combination_id' => 'setUnitCombinationId',
'weight_g' => 'setWeightG',
'weight_net_g' => 'setWeightNetG',
'width_mm' => 'setWidthMm',
'length_mm' => 'setLengthMm',
'height_mm' => 'setHeightMm',
'extra_shipping_charge1' => 'setExtraShippingCharge1',
'extra_shipping_charge2' => 'setExtraShippingCharge2',
'units_contained' => 'setUnitsContained',
'pallet_type_id' => 'setPalletTypeId',
'packing_units' => 'setPackingUnits',
'packing_unit_type_id' => 'setPackingUnitTypeId',
'transportation_costs' => 'setTransportationCosts',
'storage_costs' => 'setStorageCosts',
'customs' => 'setCustoms',
'operating_costs' => 'setOperatingCosts',
'vat_id' => 'setVatId',
'bundle_type' => 'setBundleType',
'automatic_client_visibility' => 'setAutomaticClientVisibility',
'automatic_list_visibility' => 'setAutomaticListVisibility',
'is_hidden_in_category_list' => 'setIsHiddenInCategoryList',
'default_shipping_costs' => 'setDefaultShippingCosts',
'may_show_unit_price' => 'setMayShowUnitPrice',
'sales_rank' => 'setSalesRank',
'parent_variation_id' => 'setParentVariationId',
'parent_variation_quantity' => 'setParentVariationQuantity',
'single_item_count' => 'setSingleItemCount',
'category_variation_id' => 'setCategoryVariationId',
'market_variation_id' => 'setMarketVariationId',
'client_variation_id' => 'setClientVariationId',
'sales_price_variation_id' => 'setSalesPriceVariationId',
'supplier_variation_id' => 'setSupplierVariationId',
'warehouse_variation_id' => 'setWarehouseVariationId',
'property_variation_id' => 'setPropertyVariationId',
'tag_variation_id' => 'setTagVariationId',
'has_calculated_bundle_weight' => 'setHasCalculatedBundleWeight',
'has_calculated_bundle_net_weight' => 'setHasCalculatedBundleNetWeight',
'has_calculated_bundle_purchase_price' => 'setHasCalculatedBundlePurchasePrice',
'has_calculated_bundle_moving_average_price' => 'setHasCalculatedBundleMovingAveragePrice'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'is_main' => 'getIsMain',
'main_variation_id' => 'getMainVariationId',
'item_id' => 'getItemId',
'position' => 'getPosition',
'is_active' => 'getIsActive',
'number' => 'getNumber',
'model' => 'getModel',
'external_id' => 'getExternalId',
'availability' => 'getAvailability',
'estimated_available_at' => 'getEstimatedAvailableAt',
'purchase_price' => 'getPurchasePrice',
'moving_average_price' => 'getMovingAveragePrice',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt',
'related_updated_at' => 'getRelatedUpdatedAt',
'availability_updated_at' => 'getAvailabilityUpdatedAt',
'price_calculation_id' => 'getPriceCalculationId',
'picking' => 'getPicking',
'stock_limitation' => 'getStockLimitation',
'is_visible_if_net_stock_is_positive' => 'getIsVisibleIfNetStockIsPositive',
'is_invisible_if_net_stock_is_not_positive' => 'getIsInvisibleIfNetStockIsNotPositive',
'is_available_if_net_stock_is_positive' => 'getIsAvailableIfNetStockIsPositive',
'is_unavailable_if_net_stock_is_not_positive' => 'getIsUnavailableIfNetStockIsNotPositive',
'is_visible_in_list_if_net_stock_is_positive' => 'getIsVisibleInListIfNetStockIsPositive',
'is_invisible_in_list_if_net_stock_is_not_positive' => 'getIsInvisibleInListIfNetStockIsNotPositive',
'main_warehouse_id' => 'getMainWarehouseId',
'maximum_order_quantity' => 'getMaximumOrderQuantity',
'minimum_order_quantity' => 'getMinimumOrderQuantity',
'interval_order_quantity' => 'getIntervalOrderQuantity',
'available_until' => 'getAvailableUntil',
'released_at' => 'getReleasedAt',
'name' => 'getName',
'unit_combination_id' => 'getUnitCombinationId',
'weight_g' => 'getWeightG',
'weight_net_g' => 'getWeightNetG',
'width_mm' => 'getWidthMm',
'length_mm' => 'getLengthMm',
'height_mm' => 'getHeightMm',
'extra_shipping_charge1' => 'getExtraShippingCharge1',
'extra_shipping_charge2' => 'getExtraShippingCharge2',
'units_contained' => 'getUnitsContained',
'pallet_type_id' => 'getPalletTypeId',
'packing_units' => 'getPackingUnits',
'packing_unit_type_id' => 'getPackingUnitTypeId',
'transportation_costs' => 'getTransportationCosts',
'storage_costs' => 'getStorageCosts',
'customs' => 'getCustoms',
'operating_costs' => 'getOperatingCosts',
'vat_id' => 'getVatId',
'bundle_type' => 'getBundleType',
'automatic_client_visibility' => 'getAutomaticClientVisibility',
'automatic_list_visibility' => 'getAutomaticListVisibility',
'is_hidden_in_category_list' => 'getIsHiddenInCategoryList',
'default_shipping_costs' => 'getDefaultShippingCosts',
'may_show_unit_price' => 'getMayShowUnitPrice',
'sales_rank' => 'getSalesRank',
'parent_variation_id' => 'getParentVariationId',
'parent_variation_quantity' => 'getParentVariationQuantity',
'single_item_count' => 'getSingleItemCount',
'category_variation_id' => 'getCategoryVariationId',
'market_variation_id' => 'getMarketVariationId',
'client_variation_id' => 'getClientVariationId',
'sales_price_variation_id' => 'getSalesPriceVariationId',
'supplier_variation_id' => 'getSupplierVariationId',
'warehouse_variation_id' => 'getWarehouseVariationId',
'property_variation_id' => 'getPropertyVariationId',
'tag_variation_id' => 'getTagVariationId',
'has_calculated_bundle_weight' => 'getHasCalculatedBundleWeight',
'has_calculated_bundle_net_weight' => 'getHasCalculatedBundleNetWeight',
'has_calculated_bundle_purchase_price' => 'getHasCalculatedBundlePurchasePrice',
'has_calculated_bundle_moving_average_price' => 'getHasCalculatedBundleMovingAveragePrice'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_main'] = isset($data['is_main']) ? $data['is_main'] : null;
        $this->container['main_variation_id'] = isset($data['main_variation_id']) ? $data['main_variation_id'] : null;
        $this->container['item_id'] = isset($data['item_id']) ? $data['item_id'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['availability'] = isset($data['availability']) ? $data['availability'] : null;
        $this->container['estimated_available_at'] = isset($data['estimated_available_at']) ? $data['estimated_available_at'] : null;
        $this->container['purchase_price'] = isset($data['purchase_price']) ? $data['purchase_price'] : null;
        $this->container['moving_average_price'] = isset($data['moving_average_price']) ? $data['moving_average_price'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['related_updated_at'] = isset($data['related_updated_at']) ? $data['related_updated_at'] : null;
        $this->container['availability_updated_at'] = isset($data['availability_updated_at']) ? $data['availability_updated_at'] : null;
        $this->container['price_calculation_id'] = isset($data['price_calculation_id']) ? $data['price_calculation_id'] : null;
        $this->container['picking'] = isset($data['picking']) ? $data['picking'] : null;
        $this->container['stock_limitation'] = isset($data['stock_limitation']) ? $data['stock_limitation'] : null;
        $this->container['is_visible_if_net_stock_is_positive'] = isset($data['is_visible_if_net_stock_is_positive']) ? $data['is_visible_if_net_stock_is_positive'] : null;
        $this->container['is_invisible_if_net_stock_is_not_positive'] = isset($data['is_invisible_if_net_stock_is_not_positive']) ? $data['is_invisible_if_net_stock_is_not_positive'] : null;
        $this->container['is_available_if_net_stock_is_positive'] = isset($data['is_available_if_net_stock_is_positive']) ? $data['is_available_if_net_stock_is_positive'] : null;
        $this->container['is_unavailable_if_net_stock_is_not_positive'] = isset($data['is_unavailable_if_net_stock_is_not_positive']) ? $data['is_unavailable_if_net_stock_is_not_positive'] : null;
        $this->container['is_visible_in_list_if_net_stock_is_positive'] = isset($data['is_visible_in_list_if_net_stock_is_positive']) ? $data['is_visible_in_list_if_net_stock_is_positive'] : null;
        $this->container['is_invisible_in_list_if_net_stock_is_not_positive'] = isset($data['is_invisible_in_list_if_net_stock_is_not_positive']) ? $data['is_invisible_in_list_if_net_stock_is_not_positive'] : null;
        $this->container['main_warehouse_id'] = isset($data['main_warehouse_id']) ? $data['main_warehouse_id'] : null;
        $this->container['maximum_order_quantity'] = isset($data['maximum_order_quantity']) ? $data['maximum_order_quantity'] : null;
        $this->container['minimum_order_quantity'] = isset($data['minimum_order_quantity']) ? $data['minimum_order_quantity'] : null;
        $this->container['interval_order_quantity'] = isset($data['interval_order_quantity']) ? $data['interval_order_quantity'] : null;
        $this->container['available_until'] = isset($data['available_until']) ? $data['available_until'] : null;
        $this->container['released_at'] = isset($data['released_at']) ? $data['released_at'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['unit_combination_id'] = isset($data['unit_combination_id']) ? $data['unit_combination_id'] : null;
        $this->container['weight_g'] = isset($data['weight_g']) ? $data['weight_g'] : null;
        $this->container['weight_net_g'] = isset($data['weight_net_g']) ? $data['weight_net_g'] : null;
        $this->container['width_mm'] = isset($data['width_mm']) ? $data['width_mm'] : null;
        $this->container['length_mm'] = isset($data['length_mm']) ? $data['length_mm'] : null;
        $this->container['height_mm'] = isset($data['height_mm']) ? $data['height_mm'] : null;
        $this->container['extra_shipping_charge1'] = isset($data['extra_shipping_charge1']) ? $data['extra_shipping_charge1'] : null;
        $this->container['extra_shipping_charge2'] = isset($data['extra_shipping_charge2']) ? $data['extra_shipping_charge2'] : null;
        $this->container['units_contained'] = isset($data['units_contained']) ? $data['units_contained'] : null;
        $this->container['pallet_type_id'] = isset($data['pallet_type_id']) ? $data['pallet_type_id'] : null;
        $this->container['packing_units'] = isset($data['packing_units']) ? $data['packing_units'] : null;
        $this->container['packing_unit_type_id'] = isset($data['packing_unit_type_id']) ? $data['packing_unit_type_id'] : null;
        $this->container['transportation_costs'] = isset($data['transportation_costs']) ? $data['transportation_costs'] : null;
        $this->container['storage_costs'] = isset($data['storage_costs']) ? $data['storage_costs'] : null;
        $this->container['customs'] = isset($data['customs']) ? $data['customs'] : null;
        $this->container['operating_costs'] = isset($data['operating_costs']) ? $data['operating_costs'] : null;
        $this->container['vat_id'] = isset($data['vat_id']) ? $data['vat_id'] : null;
        $this->container['bundle_type'] = isset($data['bundle_type']) ? $data['bundle_type'] : null;
        $this->container['automatic_client_visibility'] = isset($data['automatic_client_visibility']) ? $data['automatic_client_visibility'] : null;
        $this->container['automatic_list_visibility'] = isset($data['automatic_list_visibility']) ? $data['automatic_list_visibility'] : null;
        $this->container['is_hidden_in_category_list'] = isset($data['is_hidden_in_category_list']) ? $data['is_hidden_in_category_list'] : null;
        $this->container['default_shipping_costs'] = isset($data['default_shipping_costs']) ? $data['default_shipping_costs'] : null;
        $this->container['may_show_unit_price'] = isset($data['may_show_unit_price']) ? $data['may_show_unit_price'] : null;
        $this->container['sales_rank'] = isset($data['sales_rank']) ? $data['sales_rank'] : null;
        $this->container['parent_variation_id'] = isset($data['parent_variation_id']) ? $data['parent_variation_id'] : null;
        $this->container['parent_variation_quantity'] = isset($data['parent_variation_quantity']) ? $data['parent_variation_quantity'] : null;
        $this->container['single_item_count'] = isset($data['single_item_count']) ? $data['single_item_count'] : null;
        $this->container['category_variation_id'] = isset($data['category_variation_id']) ? $data['category_variation_id'] : null;
        $this->container['market_variation_id'] = isset($data['market_variation_id']) ? $data['market_variation_id'] : null;
        $this->container['client_variation_id'] = isset($data['client_variation_id']) ? $data['client_variation_id'] : null;
        $this->container['sales_price_variation_id'] = isset($data['sales_price_variation_id']) ? $data['sales_price_variation_id'] : null;
        $this->container['supplier_variation_id'] = isset($data['supplier_variation_id']) ? $data['supplier_variation_id'] : null;
        $this->container['warehouse_variation_id'] = isset($data['warehouse_variation_id']) ? $data['warehouse_variation_id'] : null;
        $this->container['property_variation_id'] = isset($data['property_variation_id']) ? $data['property_variation_id'] : null;
        $this->container['tag_variation_id'] = isset($data['tag_variation_id']) ? $data['tag_variation_id'] : null;
        $this->container['has_calculated_bundle_weight'] = isset($data['has_calculated_bundle_weight']) ? $data['has_calculated_bundle_weight'] : null;
        $this->container['has_calculated_bundle_net_weight'] = isset($data['has_calculated_bundle_net_weight']) ? $data['has_calculated_bundle_net_weight'] : null;
        $this->container['has_calculated_bundle_purchase_price'] = isset($data['has_calculated_bundle_purchase_price']) ? $data['has_calculated_bundle_purchase_price'] : null;
        $this->container['has_calculated_bundle_moving_average_price'] = isset($data['has_calculated_bundle_moving_average_price']) ? $data['has_calculated_bundle_moving_average_price'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the variation. The ID must be unique.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_main
     *
     * @return bool
     */
    public function getIsMain()
    {
        return $this->container['is_main'];
    }

    /**
     * Sets is_main
     *
     * @param bool $is_main Flag that indicates if the variation is the main variation of the item.
     *
     * @return $this
     */
    public function setIsMain($is_main)
    {
        $this->container['is_main'] = $is_main;

        return $this;
    }

    /**
     * Gets main_variation_id
     *
     * @return int
     */
    public function getMainVariationId()
    {
        return $this->container['main_variation_id'];
    }

    /**
     * Sets main_variation_id
     *
     * @param int $main_variation_id The variation ID of the item's main variation. Value is NULL if this variation is the item's main variation.
     *
     * @return $this
     */
    public function setMainVariationId($main_variation_id)
    {
        $this->container['main_variation_id'] = $main_variation_id;

        return $this;
    }

    /**
     * Gets item_id
     *
     * @return int
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param int $item_id The item ID of the item that this variation belongs to.
     *
     * @return $this
     */
    public function setItemId($item_id)
    {
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int $position The position of the variation. Value is inherited from the item's main variation if inheritance is active.
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active Flag that indicates if the variation is active. Only active variations can be offered in the online store and/or on markets.
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number The unique variation number of the variation. The variation number must be specified.
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string $model The model of the variation. Value is inherited from the item's main variation if inheritance is active.
     *
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id The external variation ID of this variation. The external variation number is optional and allows importing items and variations from external systems to plentymarkets.
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets availability
     *
     * @return int
     */
    public function getAvailability()
    {
        return $this->container['availability'];
    }

    /**
     * Sets availability
     *
     * @param int $availability The availability of the variation. Possible values: 1 to 10, null = Variation inherits value of main variation.
     *
     * @return $this
     */
    public function setAvailability($availability)
    {
        $this->container['availability'] = $availability;

        return $this;
    }

    /**
     * Gets estimated_available_at
     *
     * @return string
     */
    public function getEstimatedAvailableAt()
    {
        return $this->container['estimated_available_at'];
    }

    /**
     * Sets estimated_available_at
     *
     * @param string $estimated_available_at The estimated delivery date of variations on reorder.
     *
     * @return $this
     */
    public function setEstimatedAvailableAt($estimated_available_at)
    {
        $this->container['estimated_available_at'] = $estimated_available_at;

        return $this;
    }

    /**
     * Gets purchase_price
     *
     * @return BigDecimal
     */
    public function getPurchasePrice()
    {
        return $this->container['purchase_price'];
    }

    /**
     * Sets purchase_price
     *
     * @param BigDecimal $purchase_price The net purchase price. Value e.g. is used for price calculations.
     *
     * @return $this
     */
    public function setPurchasePrice($purchase_price)
    {
        $this->container['purchase_price'] = $purchase_price;

        return $this;
    }

    /**
     * Gets moving_average_price
     *
     * @return BigDecimal
     */
    public function getMovingAveragePrice()
    {
        return $this->container['moving_average_price'];
    }

    /**
     * Sets moving_average_price
     *
     * @param BigDecimal $moving_average_price The moving average purchase price of the variation.
     *
     * @return $this
     */
    public function setMovingAveragePrice($moving_average_price)
    {
        $this->container['moving_average_price'] = $moving_average_price;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at The time the variation was created.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at The time the variation was last updated.
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets related_updated_at
     *
     * @return string
     */
    public function getRelatedUpdatedAt()
    {
        return $this->container['related_updated_at'];
    }

    /**
     * Sets related_updated_at
     *
     * @param string $related_updated_at The time at which related information for this variation was last updated. Related information is defined as information that is linked to the variation, i.e. barcodes, categories, images, markets, clients (stores), prices, suppliers, warehouses and the default category.
     *
     * @return $this
     */
    public function setRelatedUpdatedAt($related_updated_at)
    {
        $this->container['related_updated_at'] = $related_updated_at;

        return $this;
    }

    /**
     * Gets availability_updated_at
     *
     * @return string
     */
    public function getAvailabilityUpdatedAt()
    {
        return $this->container['availability_updated_at'];
    }

    /**
     * Sets availability_updated_at
     *
     * @param string $availability_updated_at The time at which the availability of this variation was last updated.
     *
     * @return $this
     */
    public function setAvailabilityUpdatedAt($availability_updated_at)
    {
        $this->container['availability_updated_at'] = $availability_updated_at;

        return $this;
    }

    /**
     * Gets price_calculation_id
     *
     * @return int
     */
    public function getPriceCalculationId()
    {
        return $this->container['price_calculation_id'];
    }

    /**
     * Sets price_calculation_id
     *
     * @param int $price_calculation_id The ID of the price calculation linked to the variation.
     *
     * @return $this
     */
    public function setPriceCalculationId($price_calculation_id)
    {
        $this->container['price_calculation_id'] = $price_calculation_id;

        return $this;
    }

    /**
     * Gets picking
     *
     * @return string
     */
    public function getPicking()
    {
        return $this->container['picking'];
    }

    /**
     * Sets picking
     *
     * @param string $picking The order picking type of the variation. Possible values: single_picking, no_single_picking, exclude_from_picklist, null (no order picking type)
     *
     * @return $this
     */
    public function setPicking($picking)
    {
        $this->container['picking'] = $picking;

        return $this;
    }

    /**
     * Gets stock_limitation
     *
     * @return int
     */
    public function getStockLimitation()
    {
        return $this->container['stock_limitation'];
    }

    /**
     * Sets stock_limitation
     *
     * @param int $stock_limitation The stock limitation for the variation. Possible values: <ul><li>0 = No limitation, i.e. stock is not limited. The variations's availability is not checked automatically.</li><li>1 = Stock is limited to net stock. The variation's availability is checked automatically.</li><li>2 = Do not administer stock for this variation.</li></ul>
     *
     * @return $this
     */
    public function setStockLimitation($stock_limitation)
    {
        $this->container['stock_limitation'] = $stock_limitation;

        return $this;
    }

    /**
     * Gets is_visible_if_net_stock_is_positive
     *
     * @return bool
     */
    public function getIsVisibleIfNetStockIsPositive()
    {
        return $this->container['is_visible_if_net_stock_is_positive'];
    }

    /**
     * Sets is_visible_if_net_stock_is_positive
     *
     * @param bool $is_visible_if_net_stock_is_positive Flag that indicates if the variation is visible in the online store if net stock is positive. If true, the variation automatically becomes visible when the net stock changes to positive.
     *
     * @return $this
     */
    public function setIsVisibleIfNetStockIsPositive($is_visible_if_net_stock_is_positive)
    {
        $this->container['is_visible_if_net_stock_is_positive'] = $is_visible_if_net_stock_is_positive;

        return $this;
    }

    /**
     * Gets is_invisible_if_net_stock_is_not_positive
     *
     * @return bool
     */
    public function getIsInvisibleIfNetStockIsNotPositive()
    {
        return $this->container['is_invisible_if_net_stock_is_not_positive'];
    }

    /**
     * Sets is_invisible_if_net_stock_is_not_positive
     *
     * @param bool $is_invisible_if_net_stock_is_not_positive Flag that indicates if the variation is invisible in the online store if net stock is not positive. If true, the variation automatically becomes invisible when the net stock changes to 0 or negative.
     *
     * @return $this
     */
    public function setIsInvisibleIfNetStockIsNotPositive($is_invisible_if_net_stock_is_not_positive)
    {
        $this->container['is_invisible_if_net_stock_is_not_positive'] = $is_invisible_if_net_stock_is_not_positive;

        return $this;
    }

    /**
     * Gets is_available_if_net_stock_is_positive
     *
     * @return bool
     */
    public function getIsAvailableIfNetStockIsPositive()
    {
        return $this->container['is_available_if_net_stock_is_positive'];
    }

    /**
     * Sets is_available_if_net_stock_is_positive
     *
     * @param bool $is_available_if_net_stock_is_positive Flag that indicates if the variation is available in the online store if net stock is positive. If true, the variation automatically becomes available when the net stock changes to positive.
     *
     * @return $this
     */
    public function setIsAvailableIfNetStockIsPositive($is_available_if_net_stock_is_positive)
    {
        $this->container['is_available_if_net_stock_is_positive'] = $is_available_if_net_stock_is_positive;

        return $this;
    }

    /**
     * Gets is_unavailable_if_net_stock_is_not_positive
     *
     * @return bool
     */
    public function getIsUnavailableIfNetStockIsNotPositive()
    {
        return $this->container['is_unavailable_if_net_stock_is_not_positive'];
    }

    /**
     * Sets is_unavailable_if_net_stock_is_not_positive
     *
     * @param bool $is_unavailable_if_net_stock_is_not_positive Flag that indicates if the variation is unavailable in the online store if net stock is not positive. If true, the variation automatically becomes available when the net stock changes to 0 or negative.
     *
     * @return $this
     */
    public function setIsUnavailableIfNetStockIsNotPositive($is_unavailable_if_net_stock_is_not_positive)
    {
        $this->container['is_unavailable_if_net_stock_is_not_positive'] = $is_unavailable_if_net_stock_is_not_positive;

        return $this;
    }

    /**
     * Gets is_visible_in_list_if_net_stock_is_positive
     *
     * @return bool
     */
    public function getIsVisibleInListIfNetStockIsPositive()
    {
        return $this->container['is_visible_in_list_if_net_stock_is_positive'];
    }

    /**
     * Sets is_visible_in_list_if_net_stock_is_positive
     *
     * @param bool $is_visible_in_list_if_net_stock_is_positive Flag that indicates if the variation is visible in the item list of the online store if net stock is positive. If true, the variation automatically becomes visible in categories, search results and item lists (store specials, cross-selling, last seen items) when the net stock changes to positive.
     *
     * @return $this
     */
    public function setIsVisibleInListIfNetStockIsPositive($is_visible_in_list_if_net_stock_is_positive)
    {
        $this->container['is_visible_in_list_if_net_stock_is_positive'] = $is_visible_in_list_if_net_stock_is_positive;

        return $this;
    }

    /**
     * Gets is_invisible_in_list_if_net_stock_is_not_positive
     *
     * @return bool
     */
    public function getIsInvisibleInListIfNetStockIsNotPositive()
    {
        return $this->container['is_invisible_in_list_if_net_stock_is_not_positive'];
    }

    /**
     * Sets is_invisible_in_list_if_net_stock_is_not_positive
     *
     * @param bool $is_invisible_in_list_if_net_stock_is_not_positive Flag that indicates if the variation is invisible in the item list of the online store if net stock is not positive. If true and no net stock is available for the variation, the variation can only be opened using the direct URL. The variation is not shown in the categories, search results or item lists (store specials, cross-selling, last seen items).
     *
     * @return $this
     */
    public function setIsInvisibleInListIfNetStockIsNotPositive($is_invisible_in_list_if_net_stock_is_not_positive)
    {
        $this->container['is_invisible_in_list_if_net_stock_is_not_positive'] = $is_invisible_in_list_if_net_stock_is_not_positive;

        return $this;
    }

    /**
     * Gets main_warehouse_id
     *
     * @return int
     */
    public function getMainWarehouseId()
    {
        return $this->container['main_warehouse_id'];
    }

    /**
     * Sets main_warehouse_id
     *
     * @param int $main_warehouse_id The ID of the main warehouse of the variation.
     *
     * @return $this
     */
    public function setMainWarehouseId($main_warehouse_id)
    {
        $this->container['main_warehouse_id'] = $main_warehouse_id;

        return $this;
    }

    /**
     * Gets maximum_order_quantity
     *
     * @return BigDecimal
     */
    public function getMaximumOrderQuantity()
    {
        return $this->container['maximum_order_quantity'];
    }

    /**
     * Sets maximum_order_quantity
     *
     * @param BigDecimal $maximum_order_quantity The maximum order quantity permitted per order. Decimal values are possible to allow orders by weight or length. Default value is 0. If value is 0, the maximum order quantity is unlimited.
     *
     * @return $this
     */
    public function setMaximumOrderQuantity($maximum_order_quantity)
    {
        $this->container['maximum_order_quantity'] = $maximum_order_quantity;

        return $this;
    }

    /**
     * Gets minimum_order_quantity
     *
     * @return BigDecimal
     */
    public function getMinimumOrderQuantity()
    {
        return $this->container['minimum_order_quantity'];
    }

    /**
     * Sets minimum_order_quantity
     *
     * @param BigDecimal $minimum_order_quantity The minimum order quantity. Decimal values are possible to allow orders by weight or length.
     *
     * @return $this
     */
    public function setMinimumOrderQuantity($minimum_order_quantity)
    {
        $this->container['minimum_order_quantity'] = $minimum_order_quantity;

        return $this;
    }

    /**
     * Gets interval_order_quantity
     *
     * @return BigDecimal
     */
    public function getIntervalOrderQuantity()
    {
        return $this->container['interval_order_quantity'];
    }

    /**
     * Sets interval_order_quantity
     *
     * @param BigDecimal $interval_order_quantity The quantity intervals the variation can be ordered in. Decimal values are possible to allow orders by weight or length.
     *
     * @return $this
     */
    public function setIntervalOrderQuantity($interval_order_quantity)
    {
        $this->container['interval_order_quantity'] = $interval_order_quantity;

        return $this;
    }

    /**
     * Gets available_until
     *
     * @return string
     */
    public function getAvailableUntil()
    {
        return $this->container['available_until'];
    }

    /**
     * Sets available_until
     *
     * @param string $available_until The last date the item will be available for sale.
     *
     * @return $this
     */
    public function setAvailableUntil($available_until)
    {
        $this->container['available_until'] = $available_until;

        return $this;
    }

    /**
     * Gets released_at
     *
     * @return string
     */
    public function getReleasedAt()
    {
        return $this->container['released_at'];
    }

    /**
     * Sets released_at
     *
     * @param string $released_at The release date of the variation. This is the date on which the variation will become available. The variation can be visible in the online store before this date, e.g. for preorders.
     *
     * @return $this
     */
    public function setReleasedAt($released_at)
    {
        $this->container['released_at'] = $released_at;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the variation
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets unit_combination_id
     *
     * @return int
     */
    public function getUnitCombinationId()
    {
        return $this->container['unit_combination_id'];
    }

    /**
     * Sets unit_combination_id
     *
     * @param int $unit_combination_id The unit combination id of the variation
     *
     * @return $this
     */
    public function setUnitCombinationId($unit_combination_id)
    {
        $this->container['unit_combination_id'] = $unit_combination_id;

        return $this;
    }

    /**
     * Gets weight_g
     *
     * @return int
     */
    public function getWeightG()
    {
        return $this->container['weight_g'];
    }

    /**
     * Sets weight_g
     *
     * @param int $weight_g The gross weight of the variation in gramms (g). This weight includes the packaging for variations that are packaged separately. This value is used for calculating shipping packages and weight-based shipping costs.
     *
     * @return $this
     */
    public function setWeightG($weight_g)
    {
        $this->container['weight_g'] = $weight_g;

        return $this;
    }

    /**
     * Gets weight_net_g
     *
     * @return int
     */
    public function getWeightNetG()
    {
        return $this->container['weight_net_g'];
    }

    /**
     * Sets weight_net_g
     *
     * @param int $weight_net_g The net weight of the variation in gramms (g). This is the weight of the variation without packaging.
     *
     * @return $this
     */
    public function setWeightNetG($weight_net_g)
    {
        $this->container['weight_net_g'] = $weight_net_g;

        return $this;
    }

    /**
     * Gets width_mm
     *
     * @return int
     */
    public function getWidthMm()
    {
        return $this->container['width_mm'];
    }

    /**
     * Sets width_mm
     *
     * @param int $width_mm The width of the variation in millimetres (mm)
     *
     * @return $this
     */
    public function setWidthMm($width_mm)
    {
        $this->container['width_mm'] = $width_mm;

        return $this;
    }

    /**
     * Gets length_mm
     *
     * @return int
     */
    public function getLengthMm()
    {
        return $this->container['length_mm'];
    }

    /**
     * Sets length_mm
     *
     * @param int $length_mm The length of the variation in millimeters (mm)
     *
     * @return $this
     */
    public function setLengthMm($length_mm)
    {
        $this->container['length_mm'] = $length_mm;

        return $this;
    }

    /**
     * Gets height_mm
     *
     * @return int
     */
    public function getHeightMm()
    {
        return $this->container['height_mm'];
    }

    /**
     * Sets height_mm
     *
     * @param int $height_mm The height of the variation in millimetres (mm)
     *
     * @return $this
     */
    public function setHeightMm($height_mm)
    {
        $this->container['height_mm'] = $height_mm;

        return $this;
    }

    /**
     * Gets extra_shipping_charge1
     *
     * @return BigDecimal
     */
    public function getExtraShippingCharge1()
    {
        return $this->container['extra_shipping_charge1'];
    }

    /**
     * Sets extra_shipping_charge1
     *
     * @param BigDecimal $extra_shipping_charge1 The extra shipping charge 1 for the variation. Extra shipping charges are useful for large or bulky items that are particularly expensive to ship. Charge 1 is added to the regular shipping costs for the first item of an order. If different variations are ordered, the extra shipping charge 1 of the variation with the highest charge 1 is selected.
     *
     * @return $this
     */
    public function setExtraShippingCharge1($extra_shipping_charge1)
    {
        $this->container['extra_shipping_charge1'] = $extra_shipping_charge1;

        return $this;
    }

    /**
     * Gets extra_shipping_charge2
     *
     * @return BigDecimal
     */
    public function getExtraShippingCharge2()
    {
        return $this->container['extra_shipping_charge2'];
    }

    /**
     * Sets extra_shipping_charge2
     *
     * @param BigDecimal $extra_shipping_charge2 The extra shipping charge 2 for the variation. Extra shipping charges are useful for large or bulky items that are expensive to ship. Charge 2 is added to the shipping costs for any additional items of an order.
     *
     * @return $this
     */
    public function setExtraShippingCharge2($extra_shipping_charge2)
    {
        $this->container['extra_shipping_charge2'] = $extra_shipping_charge2;

        return $this;
    }

    /**
     * Gets units_contained
     *
     * @return int
     */
    public function getUnitsContained()
    {
        return $this->container['units_contained'];
    }

    /**
     * Sets units_contained
     *
     * @param int $units_contained The number of sales units contained in one package. Default value is 1.
     *
     * @return $this
     */
    public function setUnitsContained($units_contained)
    {
        $this->container['units_contained'] = $units_contained;

        return $this;
    }

    /**
     * Gets pallet_type_id
     *
     * @return int
     */
    public function getPalletTypeId()
    {
        return $this->container['pallet_type_id'];
    }

    /**
     * Sets pallet_type_id
     *
     * @param int $pallet_type_id The ID of the pallet type
     *
     * @return $this
     */
    public function setPalletTypeId($pallet_type_id)
    {
        $this->container['pallet_type_id'] = $pallet_type_id;

        return $this;
    }

    /**
     * Gets packing_units
     *
     * @return int
     */
    public function getPackingUnits()
    {
        return $this->container['packing_units'];
    }

    /**
     * Sets packing_units
     *
     * @param int $packing_units The number of packing units if the item consists of multiple packages. Value is 0 if an item is sent as one package. All items of an order that have the value 0 will be packed into one package.
     *
     * @return $this
     */
    public function setPackingUnits($packing_units)
    {
        $this->container['packing_units'] = $packing_units;

        return $this;
    }

    /**
     * Gets packing_unit_type_id
     *
     * @return int
     */
    public function getPackingUnitTypeId()
    {
        return $this->container['packing_unit_type_id'];
    }

    /**
     * Sets packing_unit_type_id
     *
     * @param int $packing_unit_type_id The ID of the packing unit type.
     *
     * @return $this
     */
    public function setPackingUnitTypeId($packing_unit_type_id)
    {
        $this->container['packing_unit_type_id'] = $packing_unit_type_id;

        return $this;
    }

    /**
     * Gets transportation_costs
     *
     * @return BigDecimal
     */
    public function getTransportationCosts()
    {
        return $this->container['transportation_costs'];
    }

    /**
     * Sets transportation_costs
     *
     * @param BigDecimal $transportation_costs The net transportation costs for the variation. This value is used for price calculations and for calculating the acquisition price.
     *
     * @return $this
     */
    public function setTransportationCosts($transportation_costs)
    {
        $this->container['transportation_costs'] = $transportation_costs;

        return $this;
    }

    /**
     * Gets storage_costs
     *
     * @return BigDecimal
     */
    public function getStorageCosts()
    {
        return $this->container['storage_costs'];
    }

    /**
     * Sets storage_costs
     *
     * @param BigDecimal $storage_costs The net storage costs for the variation
     *
     * @return $this
     */
    public function setStorageCosts($storage_costs)
    {
        $this->container['storage_costs'] = $storage_costs;

        return $this;
    }

    /**
     * Gets customs
     *
     * @return BigDecimal
     */
    public function getCustoms()
    {
        return $this->container['customs'];
    }

    /**
     * Sets customs
     *
     * @param BigDecimal $customs The customs rate in percent
     *
     * @return $this
     */
    public function setCustoms($customs)
    {
        $this->container['customs'] = $customs;

        return $this;
    }

    /**
     * Gets operating_costs
     *
     * @return BigDecimal
     */
    public function getOperatingCosts()
    {
        return $this->container['operating_costs'];
    }

    /**
     * Sets operating_costs
     *
     * @param BigDecimal $operating_costs The operating costs for the variation in percent
     *
     * @return $this
     */
    public function setOperatingCosts($operating_costs)
    {
        $this->container['operating_costs'] = $operating_costs;

        return $this;
    }

    /**
     * Gets vat_id
     *
     * @return int
     */
    public function getVatId()
    {
        return $this->container['vat_id'];
    }

    /**
     * Sets vat_id
     *
     * @param int $vat_id The ID of the VAT rate of the variation. VAT rates are created for each client (store) and linked to the variation.
     *
     * @return $this
     */
    public function setVatId($vat_id)
    {
        $this->container['vat_id'] = $vat_id;

        return $this;
    }

    /**
     * Gets bundle_type
     *
     * @return string
     */
    public function getBundleType()
    {
        return $this->container['bundle_type'];
    }

    /**
     * Sets bundle_type
     *
     * @param string $bundle_type Indicates the bundle type of the variation. Possible values:<ul><li>bundle = The variation is a bundle</li><li>bundle_item = The variation is a bundle component.</li><li>Null = The variation is not associated with a bundle</li></ul>
     *
     * @return $this
     */
    public function setBundleType($bundle_type)
    {
        $this->container['bundle_type'] = $bundle_type;

        return $this;
    }

    /**
     * Gets automatic_client_visibility
     *
     * @return int
     */
    public function getAutomaticClientVisibility()
    {
        return $this->container['automatic_client_visibility'];
    }

    /**
     * Sets automatic_client_visibility
     *
     * @param int $automatic_client_visibility Indicates if the variation is set as available for any clients (stores). Possible values:<ul><li>0 / -1 (GET) or 0 (POST) = Variation is not available in any client (store).</li><li>1 / 2 (GET) or 1 (POST) = Variation is available in at least one client (store).</li></ul>The variation's actual visibility depends on the settings for net stock dependency.
     *
     * @return $this
     */
    public function setAutomaticClientVisibility($automatic_client_visibility)
    {
        $this->container['automatic_client_visibility'] = $automatic_client_visibility;

        return $this;
    }

    /**
     * Gets automatic_list_visibility
     *
     * @return int
     */
    public function getAutomaticListVisibility()
    {
        return $this->container['automatic_list_visibility'];
    }

    /**
     * Sets automatic_list_visibility
     *
     * @param int $automatic_list_visibility Indicates if the variation currently is visible in item lists. 3 = Variation is visible in item list because $isHiddenInCategoryList is false. 2, 1 = Variation is visible in item list because $isVisibleInListIfNetStockIsPositive is true and net stock is positive. 0, -1 = Variation is invisible in item list because $isInvisibleInListIfNetStockIsNotPositive is true and net stock is 0 or negative. -2 = Variation is invisible in item list because $isHiddenInCategoryList is true.
     *
     * @return $this
     */
    public function setAutomaticListVisibility($automatic_list_visibility)
    {
        $this->container['automatic_list_visibility'] = $automatic_list_visibility;

        return $this;
    }

    /**
     * Gets is_hidden_in_category_list
     *
     * @return bool
     */
    public function getIsHiddenInCategoryList()
    {
        return $this->container['is_hidden_in_category_list'];
    }

    /**
     * Sets is_hidden_in_category_list
     *
     * @param bool $is_hidden_in_category_list Flag that indicates if the variation is hidden in the category list. If true, the variation will not be shown in any item category and will not be returned as a search result. The variation can only be accessed via its URL.
     *
     * @return $this
     */
    public function setIsHiddenInCategoryList($is_hidden_in_category_list)
    {
        $this->container['is_hidden_in_category_list'] = $is_hidden_in_category_list;

        return $this;
    }

    /**
     * Gets default_shipping_costs
     *
     * @return BigDecimal
     */
    public function getDefaultShippingCosts()
    {
        return $this->container['default_shipping_costs'];
    }

    /**
     * Sets default_shipping_costs
     *
     * @param BigDecimal $default_shipping_costs The default shipping costs for the variation.
     *
     * @return $this
     */
    public function setDefaultShippingCosts($default_shipping_costs)
    {
        $this->container['default_shipping_costs'] = $default_shipping_costs;

        return $this;
    }

    /**
     * Gets may_show_unit_price
     *
     * @return bool
     */
    public function getMayShowUnitPrice()
    {
        return $this->container['may_show_unit_price'];
    }

    /**
     * Sets may_show_unit_price
     *
     * @param bool $may_show_unit_price Display unit price in the online store
     *
     * @return $this
     */
    public function setMayShowUnitPrice($may_show_unit_price)
    {
        $this->container['may_show_unit_price'] = $may_show_unit_price;

        return $this;
    }

    /**
     * Gets sales_rank
     *
     * @return int
     */
    public function getSalesRank()
    {
        return $this->container['sales_rank'];
    }

    /**
     * Sets sales_rank
     *
     * @param int $sales_rank The sales rank of the variation. This ranking is used to position top items automatically if the option <b>Automatically sort by monthly sales</b> (<b>Settings » Client (store) » Standard » Item layouts » Basic settings</b>) is set to <b>Yes</b>. The sales ranking is calculated daily. If the option <b>Automatically sort by monthly sales</b> is set to <b>No</b>, a value of 0 is returned and variations are sorted by position instead.
     *
     * @return $this
     */
    public function setSalesRank($sales_rank)
    {
        $this->container['sales_rank'] = $sales_rank;

        return $this;
    }

    /**
     * Gets parent_variation_id
     *
     * @return int
     */
    public function getParentVariationId()
    {
        return $this->container['parent_variation_id'];
    }

    /**
     * Sets parent_variation_id
     *
     * @param int $parent_variation_id parent_variation_id
     *
     * @return $this
     */
    public function setParentVariationId($parent_variation_id)
    {
        $this->container['parent_variation_id'] = $parent_variation_id;

        return $this;
    }

    /**
     * Gets parent_variation_quantity
     *
     * @return BigDecimal
     */
    public function getParentVariationQuantity()
    {
        return $this->container['parent_variation_quantity'];
    }

    /**
     * Sets parent_variation_quantity
     *
     * @param BigDecimal $parent_variation_quantity parent_variation_quantity
     *
     * @return $this
     */
    public function setParentVariationQuantity($parent_variation_quantity)
    {
        $this->container['parent_variation_quantity'] = $parent_variation_quantity;

        return $this;
    }

    /**
     * Gets single_item_count
     *
     * @return int
     */
    public function getSingleItemCount()
    {
        return $this->container['single_item_count'];
    }

    /**
     * Sets single_item_count
     *
     * @param int $single_item_count single_item_count
     *
     * @return $this
     */
    public function setSingleItemCount($single_item_count)
    {
        $this->container['single_item_count'] = $single_item_count;

        return $this;
    }

    /**
     * Gets category_variation_id
     *
     * @return int
     */
    public function getCategoryVariationId()
    {
        return $this->container['category_variation_id'];
    }

    /**
     * Sets category_variation_id
     *
     * @param int $category_variation_id Either the ID of the variation or the ID of the item's main variation. No other values are permitted.<ul><li>ID of the variation = Categories are not inherited from the main variation.</li><li>ID of the item's main variation = Inheritance of categories is active.</li></ul>
     *
     * @return $this
     */
    public function setCategoryVariationId($category_variation_id)
    {
        $this->container['category_variation_id'] = $category_variation_id;

        return $this;
    }

    /**
     * Gets market_variation_id
     *
     * @return int
     */
    public function getMarketVariationId()
    {
        return $this->container['market_variation_id'];
    }

    /**
     * Sets market_variation_id
     *
     * @param int $market_variation_id Either the ID of the variation or the ID of the item's main variation. No other values are permitted.<ul><li>ID of the variation = Markets are not inherited from the main variation.</li><li>ID of the item's main variation = Inheritance of markets is active.</li></ul>
     *
     * @return $this
     */
    public function setMarketVariationId($market_variation_id)
    {
        $this->container['market_variation_id'] = $market_variation_id;

        return $this;
    }

    /**
     * Gets client_variation_id
     *
     * @return int
     */
    public function getClientVariationId()
    {
        return $this->container['client_variation_id'];
    }

    /**
     * Sets client_variation_id
     *
     * @param int $client_variation_id Either the ID of the variation or the ID of the item's main variation. No other values are permitted.<ul><li>ID of the variation = Clients (stores) are not inherited from the main variation.</li><li>ID of the item's main variation = Inheritance of clients (stores) is active.</li></ul>
     *
     * @return $this
     */
    public function setClientVariationId($client_variation_id)
    {
        $this->container['client_variation_id'] = $client_variation_id;

        return $this;
    }

    /**
     * Gets sales_price_variation_id
     *
     * @return int
     */
    public function getSalesPriceVariationId()
    {
        return $this->container['sales_price_variation_id'];
    }

    /**
     * Sets sales_price_variation_id
     *
     * @param int $sales_price_variation_id Either the ID of the variation or the ID of the item's main variation. No other values are permitted.<ul><li>ID of the variation = Sales prices are not inherited from the main variation.</li><li>ID of the item's main variation = Inheritance of sales prices is active.</li></ul>
     *
     * @return $this
     */
    public function setSalesPriceVariationId($sales_price_variation_id)
    {
        $this->container['sales_price_variation_id'] = $sales_price_variation_id;

        return $this;
    }

    /**
     * Gets supplier_variation_id
     *
     * @return int
     */
    public function getSupplierVariationId()
    {
        return $this->container['supplier_variation_id'];
    }

    /**
     * Sets supplier_variation_id
     *
     * @param int $supplier_variation_id Either the ID of the variation or the ID of the item's main variation. No other values are permitted.<ul><li>ID of the variation = Suppliers are not inherited from the main variation.</li><li>ID of the item's main variation = Inheritance of suppliers is active.</li></ul>
     *
     * @return $this
     */
    public function setSupplierVariationId($supplier_variation_id)
    {
        $this->container['supplier_variation_id'] = $supplier_variation_id;

        return $this;
    }

    /**
     * Gets warehouse_variation_id
     *
     * @return int
     */
    public function getWarehouseVariationId()
    {
        return $this->container['warehouse_variation_id'];
    }

    /**
     * Sets warehouse_variation_id
     *
     * @param int $warehouse_variation_id Either the ID of the variation or the ID of the item's main variation. No other values are permitted.<ul><li>ID of the variation = Warehouses are not inherited from the main variation.</li><li>ID of the item's main variation = Inheritance of warehouses is active.</li></ul>
     *
     * @return $this
     */
    public function setWarehouseVariationId($warehouse_variation_id)
    {
        $this->container['warehouse_variation_id'] = $warehouse_variation_id;

        return $this;
    }

    /**
     * Gets property_variation_id
     *
     * @return int
     */
    public function getPropertyVariationId()
    {
        return $this->container['property_variation_id'];
    }

    /**
     * Sets property_variation_id
     *
     * @param int $property_variation_id Either the ID of the variation or the ID of the item's main variation. No other values are permitted.<ul><li>ID of the variation = Properties are not inherited from the main variation.</li><li>ID of the item's main variation = Inheritance of properties is active.</li></ul>
     *
     * @return $this
     */
    public function setPropertyVariationId($property_variation_id)
    {
        $this->container['property_variation_id'] = $property_variation_id;

        return $this;
    }

    /**
     * Gets tag_variation_id
     *
     * @return int
     */
    public function getTagVariationId()
    {
        return $this->container['tag_variation_id'];
    }

    /**
     * Sets tag_variation_id
     *
     * @param int $tag_variation_id Either the ID of the variation or the ID of the item's main variation. No other values are permitted.<ul><li>ID of the variation = Tags are not inherited from the main variation.</li><li>ID of the item's main variation = Inheritance of tags is active.</li></ul>
     *
     * @return $this
     */
    public function setTagVariationId($tag_variation_id)
    {
        $this->container['tag_variation_id'] = $tag_variation_id;

        return $this;
    }

    /**
     * Gets has_calculated_bundle_weight
     *
     * @return bool
     */
    public function getHasCalculatedBundleWeight()
    {
        return $this->container['has_calculated_bundle_weight'];
    }

    /**
     * Sets has_calculated_bundle_weight
     *
     * @param bool $has_calculated_bundle_weight Indicates if the gross bundle weight is calculated by its components.
     *
     * @return $this
     */
    public function setHasCalculatedBundleWeight($has_calculated_bundle_weight)
    {
        $this->container['has_calculated_bundle_weight'] = $has_calculated_bundle_weight;

        return $this;
    }

    /**
     * Gets has_calculated_bundle_net_weight
     *
     * @return bool
     */
    public function getHasCalculatedBundleNetWeight()
    {
        return $this->container['has_calculated_bundle_net_weight'];
    }

    /**
     * Sets has_calculated_bundle_net_weight
     *
     * @param bool $has_calculated_bundle_net_weight Indicates if the net bundle weight is calculated by its components.
     *
     * @return $this
     */
    public function setHasCalculatedBundleNetWeight($has_calculated_bundle_net_weight)
    {
        $this->container['has_calculated_bundle_net_weight'] = $has_calculated_bundle_net_weight;

        return $this;
    }

    /**
     * Gets has_calculated_bundle_purchase_price
     *
     * @return bool
     */
    public function getHasCalculatedBundlePurchasePrice()
    {
        return $this->container['has_calculated_bundle_purchase_price'];
    }

    /**
     * Sets has_calculated_bundle_purchase_price
     *
     * @param bool $has_calculated_bundle_purchase_price Indicates if the net purchase price is calculated by its components.
     *
     * @return $this
     */
    public function setHasCalculatedBundlePurchasePrice($has_calculated_bundle_purchase_price)
    {
        $this->container['has_calculated_bundle_purchase_price'] = $has_calculated_bundle_purchase_price;

        return $this;
    }

    /**
     * Gets has_calculated_bundle_moving_average_price
     *
     * @return bool
     */
    public function getHasCalculatedBundleMovingAveragePrice()
    {
        return $this->container['has_calculated_bundle_moving_average_price'];
    }

    /**
     * Sets has_calculated_bundle_moving_average_price
     *
     * @param bool $has_calculated_bundle_moving_average_price Indicates if the moving average net purchase price is calculated by its components.
     *
     * @return $this
     */
    public function setHasCalculatedBundleMovingAveragePrice($has_calculated_bundle_moving_average_price)
    {
        $this->container['has_calculated_bundle_moving_average_price'] = $has_calculated_bundle_moving_average_price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

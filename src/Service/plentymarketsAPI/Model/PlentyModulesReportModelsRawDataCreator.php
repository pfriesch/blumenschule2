<?php
/**
 * PlentyModulesReportModelsRawDataCreator
 *
 * PHP version 5
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BSApp\Service\plentymarketsAPI\Model;

use \ArrayAccess;
use \BSApp\Service\plentymarketsAPI\ObjectSerializer;

/**
 * PlentyModulesReportModelsRawDataCreator Class Doc Comment
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlentyModulesReportModelsRawDataCreator implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'Plenty\Modules\Report\Models\RawDataCreator';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'data_name' => 'string',
        'file_format' => 'string',
        'limit_page' => 'int',
        'limit_day' => 'int',
        'earliest_possible_data_date' => 'string',
        'delete_raw_data_after_days_minimum' => 'int',
        'delete_raw_data_after_days_maximum' => 'int',
        'filter_type' => 'string',
        'data_updated_at_column_name' => 'string',
        'default_active' => 'bool',
        'interval' => 'string',
        'should_processed' => 'bool'];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'data_name' => null,
        'file_format' => null,
        'limit_page' => null,
        'limit_day' => null,
        'earliest_possible_data_date' => null,
        'delete_raw_data_after_days_minimum' => null,
        'delete_raw_data_after_days_maximum' => null,
        'filter_type' => null,
        'data_updated_at_column_name' => null,
        'default_active' => null,
        'interval' => null,
        'should_processed' => null];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'data_name' => 'dataName',
        'file_format' => 'fileFormat',
        'limit_page' => 'limitPage',
        'limit_day' => 'limitDay',
        'earliest_possible_data_date' => 'earliestPossibleDataDate',
        'delete_raw_data_after_days_minimum' => 'deleteRawDataAfterDaysMinimum',
        'delete_raw_data_after_days_maximum' => 'deleteRawDataAfterDaysMaximum',
        'filter_type' => 'filterType',
        'data_updated_at_column_name' => 'dataUpdatedAtColumnName',
        'default_active' => 'defaultActive',
        'interval' => 'interval',
        'should_processed' => 'shouldProcessed'];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'data_name' => 'setDataName',
        'file_format' => 'setFileFormat',
        'limit_page' => 'setLimitPage',
        'limit_day' => 'setLimitDay',
        'earliest_possible_data_date' => 'setEarliestPossibleDataDate',
        'delete_raw_data_after_days_minimum' => 'setDeleteRawDataAfterDaysMinimum',
        'delete_raw_data_after_days_maximum' => 'setDeleteRawDataAfterDaysMaximum',
        'filter_type' => 'setFilterType',
        'data_updated_at_column_name' => 'setDataUpdatedAtColumnName',
        'default_active' => 'setDefaultActive',
        'interval' => 'setInterval',
        'should_processed' => 'setShouldProcessed'];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'data_name' => 'getDataName',
        'file_format' => 'getFileFormat',
        'limit_page' => 'getLimitPage',
        'limit_day' => 'getLimitDay',
        'earliest_possible_data_date' => 'getEarliestPossibleDataDate',
        'delete_raw_data_after_days_minimum' => 'getDeleteRawDataAfterDaysMinimum',
        'delete_raw_data_after_days_maximum' => 'getDeleteRawDataAfterDaysMaximum',
        'filter_type' => 'getFilterType',
        'data_updated_at_column_name' => 'getDataUpdatedAtColumnName',
        'default_active' => 'getDefaultActive',
        'interval' => 'getInterval',
        'should_processed' => 'getShouldProcessed'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['data_name'] = isset($data['data_name']) ? $data['data_name'] : null;
        $this->container['file_format'] = isset($data['file_format']) ? $data['file_format'] : null;
        $this->container['limit_page'] = isset($data['limit_page']) ? $data['limit_page'] : null;
        $this->container['limit_day'] = isset($data['limit_day']) ? $data['limit_day'] : null;
        $this->container['earliest_possible_data_date'] = isset($data['earliest_possible_data_date']) ? $data['earliest_possible_data_date'] : null;
        $this->container['delete_raw_data_after_days_minimum'] = isset($data['delete_raw_data_after_days_minimum']) ? $data['delete_raw_data_after_days_minimum'] : null;
        $this->container['delete_raw_data_after_days_maximum'] = isset($data['delete_raw_data_after_days_maximum']) ? $data['delete_raw_data_after_days_maximum'] : null;
        $this->container['filter_type'] = isset($data['filter_type']) ? $data['filter_type'] : null;
        $this->container['data_updated_at_column_name'] = isset($data['data_updated_at_column_name']) ? $data['data_updated_at_column_name'] : null;
        $this->container['default_active'] = isset($data['default_active']) ? $data['default_active'] : null;
        $this->container['interval'] = isset($data['interval']) ? $data['interval'] : null;
        $this->container['should_processed'] = isset($data['should_processed']) ? $data['should_processed'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets data_name
     *
     * @return string
     */
    public function getDataName()
    {
        return $this->container['data_name'];
    }

    /**
     * Sets data_name
     *
     * @param string $data_name Exclusive identifier for this raw data.
     *
     * @return $this
     */
    public function setDataName($data_name)
    {
        $this->container['data_name'] = $data_name;

        return $this;
    }

    /**
     * Gets file_format
     *
     * @return string
     */
    public function getFileFormat()
    {
        return $this->container['file_format'];
    }

    /**
     * Sets file_format
     *
     * @param string $file_format File format
     *
     * @return $this
     */
    public function setFileFormat($file_format)
    {
        $this->container['file_format'] = $file_format;

        return $this;
    }

    /**
     * Gets limit_page
     *
     * @return int
     */
    public function getLimitPage()
    {
        return $this->container['limit_page'];
    }

    /**
     * Sets limit_page
     *
     * @param int $limit_page Number of data rows to be queried maximum per request.
     *
     * @return $this
     */
    public function setLimitPage($limit_page)
    {
        $this->container['limit_page'] = $limit_page;

        return $this;
    }

    /**
     * Gets limit_day
     *
     * @return int
     */
    public function getLimitDay()
    {
        return $this->container['limit_day'];
    }

    /**
     * Sets limit_day
     *
     * @param int $limit_day Number of data rows to be queried maximum per day.
     *
     * @return $this
     */
    public function setLimitDay($limit_day)
    {
        $this->container['limit_day'] = $limit_day;

        return $this;
    }

    /**
     * Gets earliest_possible_data_date
     *
     * @return string
     */
    public function getEarliestPossibleDataDate()
    {
        return $this->container['earliest_possible_data_date'];
    }

    /**
     * Sets earliest_possible_data_date
     *
     * @param string $earliest_possible_data_date Earliest possible date from which data should be requested.
     *
     * @return $this
     */
    public function setEarliestPossibleDataDate($earliest_possible_data_date)
    {
        $this->container['earliest_possible_data_date'] = $earliest_possible_data_date;

        return $this;
    }

    /**
     * Gets delete_raw_data_after_days_minimum
     *
     * @return int
     */
    public function getDeleteRawDataAfterDaysMinimum()
    {
        return $this->container['delete_raw_data_after_days_minimum'];
    }

    /**
     * Sets delete_raw_data_after_days_minimum
     *
     * @param int $delete_raw_data_after_days_minimum Minimum number of days after the generated raw data is deleted
     *
     * @return $this
     */
    public function setDeleteRawDataAfterDaysMinimum($delete_raw_data_after_days_minimum)
    {
        $this->container['delete_raw_data_after_days_minimum'] = $delete_raw_data_after_days_minimum;

        return $this;
    }

    /**
     * Gets delete_raw_data_after_days_maximum
     *
     * @return int
     */
    public function getDeleteRawDataAfterDaysMaximum()
    {
        return $this->container['delete_raw_data_after_days_maximum'];
    }

    /**
     * Sets delete_raw_data_after_days_maximum
     *
     * @param int $delete_raw_data_after_days_maximum Maximum number of days after the generated raw data is deleted
     *
     * @return $this
     */
    public function setDeleteRawDataAfterDaysMaximum($delete_raw_data_after_days_maximum)
    {
        $this->container['delete_raw_data_after_days_maximum'] = $delete_raw_data_after_days_maximum;

        return $this;
    }

    /**
     * Gets filter_type
     *
     * @return string
     */
    public function getFilterType()
    {
        return $this->container['filter_type'];
    }

    /**
     * Sets filter_type
     *
     * @param string $filter_type Defines how this raw data is filtered.
     *
     * @return $this
     */
    public function setFilterType($filter_type)
    {
        $this->container['filter_type'] = $filter_type;

        return $this;
    }

    /**
     * Gets data_updated_at_column_name
     *
     * @return string
     */
    public function getDataUpdatedAtColumnName()
    {
        return $this->container['data_updated_at_column_name'];
    }

    /**
     * Sets data_updated_at_column_name
     *
     * @param string $data_updated_at_column_name Name of the column that contains the date of the last change to a data row.
     *
     * @return $this
     */
    public function setDataUpdatedAtColumnName($data_updated_at_column_name)
    {
        $this->container['data_updated_at_column_name'] = $data_updated_at_column_name;

        return $this;
    }

    /**
     * Gets default_active
     *
     * @return bool
     */
    public function getDefaultActive()
    {
        return $this->container['default_active'];
    }

    /**
     * Sets default_active
     *
     * @param bool $default_active If true, then these raw data are collected independently of the user configuration.
     *
     * @return $this
     */
    public function setDefaultActive($default_active)
    {
        $this->container['default_active'] = $default_active;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return string
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param string $interval Interval in which this creator runs through
     *
     * @return $this
     */
    public function setInterval($interval)
    {
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets should_processed
     *
     * @return bool
     */
    public function getShouldProcessed()
    {
        return $this->container['should_processed'];
    }

    /**
     * Sets should_processed
     *
     * @param bool $should_processed Internal param
     *
     * @return $this
     */
    public function setShouldProcessed($should_processed)
    {
        $this->container['should_processed'] = $should_processed;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

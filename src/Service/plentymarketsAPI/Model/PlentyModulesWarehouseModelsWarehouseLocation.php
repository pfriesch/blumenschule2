<?php
/**
 * PlentyModulesWarehouseModelsWarehouseLocation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PlentyModulesWarehouseModelsWarehouseLocation Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlentyModulesWarehouseModelsWarehouseLocation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Plenty\Modules\Warehouse\Models\WarehouseLocation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'level_id' => 'int',
'label' => 'string',
'purpose_key' => 'string',
'status_key' => 'string',
'position' => 'int',
'full_label' => 'string',
'type' => 'string',
'notes' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'level_id' => null,
'label' => null,
'purpose_key' => null,
'status_key' => null,
'position' => null,
'full_label' => null,
'type' => null,
'notes' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'level_id' => 'levelId',
'label' => 'label',
'purpose_key' => 'purposeKey',
'status_key' => 'statusKey',
'position' => 'position',
'full_label' => 'fullLabel',
'type' => 'type',
'notes' => 'notes'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'level_id' => 'setLevelId',
'label' => 'setLabel',
'purpose_key' => 'setPurposeKey',
'status_key' => 'setStatusKey',
'position' => 'setPosition',
'full_label' => 'setFullLabel',
'type' => 'setType',
'notes' => 'setNotes'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'level_id' => 'getLevelId',
'label' => 'getLabel',
'purpose_key' => 'getPurposeKey',
'status_key' => 'getStatusKey',
'position' => 'getPosition',
'full_label' => 'getFullLabel',
'type' => 'getType',
'notes' => 'getNotes'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['level_id'] = isset($data['level_id']) ? $data['level_id'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['purpose_key'] = isset($data['purpose_key']) ? $data['purpose_key'] : null;
        $this->container['status_key'] = isset($data['status_key']) ? $data['status_key'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['full_label'] = isset($data['full_label']) ? $data['full_label'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the warehouse location
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets level_id
     *
     * @return int
     */
    public function getLevelId()
    {
        return $this->container['level_id'];
    }

    /**
     * Sets level_id
     *
     * @param int $level_id The level ID of the warehouse location
     *
     * @return $this
     */
    public function setLevelId($level_id)
    {
        $this->container['level_id'] = $level_id;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label The label of the warehouse location
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets purpose_key
     *
     * @return string
     */
    public function getPurposeKey()
    {
        return $this->container['purpose_key'];
    }

    /**
     * Sets purpose_key
     *
     * @param string $purpose_key The purpose key of the warehouse location
     *
     * @return $this
     */
    public function setPurposeKey($purpose_key)
    {
        $this->container['purpose_key'] = $purpose_key;

        return $this;
    }

    /**
     * Gets status_key
     *
     * @return string
     */
    public function getStatusKey()
    {
        return $this->container['status_key'];
    }

    /**
     * Sets status_key
     *
     * @param string $status_key The status key of the warehouse location
     *
     * @return $this
     */
    public function setStatusKey($status_key)
    {
        $this->container['status_key'] = $status_key;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int $position The position of the warehouse location
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets full_label
     *
     * @return string
     */
    public function getFullLabel()
    {
        return $this->container['full_label'];
    }

    /**
     * Sets full_label
     *
     * @param string $full_label The label with level path name
     *
     * @return $this
     */
    public function setFullLabel($full_label)
    {
        $this->container['full_label'] = $full_label;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of the warehouse location (array values: 'small','medium','large','europallet')
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes The notes of the warehouse location
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

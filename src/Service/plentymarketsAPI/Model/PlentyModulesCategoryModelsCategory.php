<?php
/**
 * PlentyModulesCategoryModelsCategory
 *
 * PHP version 5
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BSApp\Service\plentymarketsAPI\Model;

use \ArrayAccess;
use \BSApp\Service\plentymarketsAPI\ObjectSerializer;

/**
 * PlentyModulesCategoryModelsCategory Class Doc Comment
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlentyModulesCategoryModelsCategory implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Plenty\Modules\Category\Models\Category';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'parent_category_id' => 'int',
'level' => 'int',
'type' => 'string',
'linklist' => 'string',
'right' => 'string',
'sitemap' => 'string',
'updated_at' => 'string',
'clients' => '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesCategoryModelsCategoryClient[]',
'details' => '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesCategoryModelsCategoryDetails[]',
'elmar_categories' => '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesCategoryModelsCategoryProperty[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'parent_category_id' => null,
'level' => null,
'type' => null,
'linklist' => null,
'right' => null,
'sitemap' => null,
'updated_at' => null,
'clients' => null,
'details' => null,
'elmar_categories' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'parent_category_id' => 'parentCategoryId',
'level' => 'level',
'type' => 'type',
'linklist' => 'linklist',
'right' => 'right',
'sitemap' => 'sitemap',
'updated_at' => 'updatedAt',
'clients' => 'clients',
'details' => 'details',
'elmar_categories' => 'elmarCategories'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'parent_category_id' => 'setParentCategoryId',
'level' => 'setLevel',
'type' => 'setType',
'linklist' => 'setLinklist',
'right' => 'setRight',
'sitemap' => 'setSitemap',
'updated_at' => 'setUpdatedAt',
'clients' => 'setClients',
'details' => 'setDetails',
'elmar_categories' => 'setElmarCategories'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'parent_category_id' => 'getParentCategoryId',
'level' => 'getLevel',
'type' => 'getType',
'linklist' => 'getLinklist',
'right' => 'getRight',
'sitemap' => 'getSitemap',
'updated_at' => 'getUpdatedAt',
'clients' => 'getClients',
'details' => 'getDetails',
'elmar_categories' => 'getElmarCategories'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['parent_category_id'] = isset($data['parent_category_id']) ? $data['parent_category_id'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['linklist'] = isset($data['linklist']) ? $data['linklist'] : null;
        $this->container['right'] = isset($data['right']) ? $data['right'] : null;
        $this->container['sitemap'] = isset($data['sitemap']) ? $data['sitemap'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['clients'] = isset($data['clients']) ? $data['clients'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['elmar_categories'] = isset($data['elmar_categories']) ? $data['elmar_categories'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique ID of the category
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets parent_category_id
     *
     * @return int
     */
    public function getParentCategoryId()
    {
        return $this->container['parent_category_id'];
    }

    /**
     * Sets parent_category_id
     *
     * @param int $parent_category_id The ID of the category's parent category. Value is <strong>null</strong> if category level is 1.
     *
     * @return $this
     */
    public function setParentCategoryId($parent_category_id)
    {
        $this->container['parent_category_id'] = $parent_category_id;

        return $this;
    }

    /**
     * Gets level
     *
     * @return int
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param int $level The category level of this category. This information is used for the sitemap.
     *
     * @return $this
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The category type of the category
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets linklist
     *
     * @return string
     */
    public function getLinklist()
    {
        return $this->container['linklist'];
    }

    /**
     * Sets linklist
     *
     * @param string $linklist Flag that indicates if the category will be displayed in the online store's navigation.
     *
     * @return $this
     */
    public function setLinklist($linklist)
    {
        $this->container['linklist'] = $linklist;

        return $this;
    }

    /**
     * Gets right
     *
     * @return string
     */
    public function getRight()
    {
        return $this->container['right'];
    }

    /**
     * Sets right
     *
     * @param string $right Flag that indicates who can see this category. <ul><li>all = Category is visible to all visitors of the online store.</li><li>customer = Category and all of its subcategories are visible to visitors of the online store that have logged in only. Visitors that are not logged in are redirected to the login page.</li></ul>
     *
     * @return $this
     */
    public function setRight($right)
    {
        $this->container['right'] = $right;

        return $this;
    }

    /**
     * Gets sitemap
     *
     * @return string
     */
    public function getSitemap()
    {
        return $this->container['sitemap'];
    }

    /**
     * Sets sitemap
     *
     * @param string $sitemap Flag that indicates if the category will be included in the sitemap.
     *
     * @return $this
     */
    public function setSitemap($sitemap)
    {
        $this->container['sitemap'] = $sitemap;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at The updated at timestamp of the category.
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets clients
     *
     * @return \BSApp\Service\plentymarketsAPI\Model\PlentyModulesCategoryModelsCategoryClient[]
     */
    public function getClients()
    {
        return $this->container['clients'];
    }

    /**
     * Sets clients
     *
     * @param \BSApp\Service\plentymarketsAPI\Model\PlentyModulesCategoryModelsCategoryClient[] $clients Collection of the clients (stores) that belong to this category (List)
     *
     * @return $this
     */
    public function setClients($clients)
    {
        $this->container['clients'] = $clients;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \BSApp\Service\plentymarketsAPI\Model\PlentyModulesCategoryModelsCategoryDetails[]
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \BSApp\Service\plentymarketsAPI\Model\PlentyModulesCategoryModelsCategoryDetails[] $details Collection of the category details that belong to this category (List)
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets elmar_categories
     *
     * @return \BSApp\Service\plentymarketsAPI\Model\PlentyModulesCategoryModelsCategoryProperty[]
     */
    public function getElmarCategories()
    {
        return $this->container['elmar_categories'];
    }

    /**
     * Sets elmar_categories
     *
     * @param \BSApp\Service\plentymarketsAPI\Model\PlentyModulesCategoryModelsCategoryProperty[] $elmar_categories The linked elmar (List)
     *
     * @return $this
     */
    public function setElmarCategories($elmar_categories)
    {
        $this->container['elmar_categories'] = $elmar_categories;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

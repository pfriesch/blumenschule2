<?php
/**
 * PlentyModulesOrderShippingParcelServiceModelsParcelServicePreset
 *
 * PHP version 5
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BSApp\Service\plentymarketsAPI\Model;

use \ArrayAccess;
use \BSApp\Service\plentymarketsAPI\ObjectSerializer;

/**
 * PlentyModulesOrderShippingParcelServiceModelsParcelServicePreset Class Doc Comment
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlentyModulesOrderShippingParcelServiceModelsParcelServicePreset implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Plenty\Modules\Order\Shipping\ParcelService\Models\ParcelServicePreset';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'parcel_service_id' => 'int',
'backend_name' => 'string',
'flag' => 'int',
'priority' => 'int',
'category' => 'int',
'use_article_porto' => 'int',
'is_insured' => 'int',
'is_express' => 'int',
'is_postident' => 'int',
'is_default_enabled' => 'int',
'island_fee' => 'BigDecimal',
'is_cod' => 'int',
'supported_multishop' => 'string[]',
'supported_referrer' => 'string[]',
'subreferrer_support' => 'string[]',
'excluded_payment_methods' => 'string[]',
'excluded_customer_groups' => 'string[]',
'shipping_group' => 'string',
'dispatch_identifier' => 'string',
'auction_type' => 'int',
'supported_loyalty_programs' => 'string[]',
'updated_at' => 'string',
'show_data_privacy_agreement_hint' => 'int',
'transmit_privacy_rule' => 'string',
'alternative_email' => 'string',
'alternative_phone' => 'string',
'is_parcel_box' => 'int',
'is_post_office' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'parcel_service_id' => null,
'backend_name' => null,
'flag' => null,
'priority' => null,
'category' => null,
'use_article_porto' => null,
'is_insured' => null,
'is_express' => null,
'is_postident' => null,
'is_default_enabled' => null,
'island_fee' => null,
'is_cod' => null,
'supported_multishop' => null,
'supported_referrer' => null,
'subreferrer_support' => null,
'excluded_payment_methods' => null,
'excluded_customer_groups' => null,
'shipping_group' => null,
'dispatch_identifier' => null,
'auction_type' => null,
'supported_loyalty_programs' => null,
'updated_at' => null,
'show_data_privacy_agreement_hint' => null,
'transmit_privacy_rule' => null,
'alternative_email' => null,
'alternative_phone' => null,
'is_parcel_box' => null,
'is_post_office' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'parcel_service_id' => 'parcelServiceId',
'backend_name' => 'backendName',
'flag' => 'flag',
'priority' => 'priority',
'category' => 'category',
'use_article_porto' => 'useArticlePorto',
'is_insured' => 'isInsured',
'is_express' => 'isExpress',
'is_postident' => 'isPostident',
'is_default_enabled' => 'isDefaultEnabled',
'island_fee' => 'islandFee',
'is_cod' => 'isCod',
'supported_multishop' => 'supportedMultishop',
'supported_referrer' => 'supportedReferrer',
'subreferrer_support' => 'subreferrerSupport',
'excluded_payment_methods' => 'excludedPaymentMethods',
'excluded_customer_groups' => 'excludedCustomerGroups',
'shipping_group' => 'shippingGroup',
'dispatch_identifier' => 'dispatchIdentifier',
'auction_type' => 'auctionType',
'supported_loyalty_programs' => 'supportedLoyaltyPrograms',
'updated_at' => 'updatedAt',
'show_data_privacy_agreement_hint' => 'showDataPrivacyAgreementHint',
'transmit_privacy_rule' => 'transmitPrivacyRule',
'alternative_email' => 'alternativeEmail',
'alternative_phone' => 'alternativePhone',
'is_parcel_box' => 'isParcelBox',
'is_post_office' => 'isPostOffice'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'parcel_service_id' => 'setParcelServiceId',
'backend_name' => 'setBackendName',
'flag' => 'setFlag',
'priority' => 'setPriority',
'category' => 'setCategory',
'use_article_porto' => 'setUseArticlePorto',
'is_insured' => 'setIsInsured',
'is_express' => 'setIsExpress',
'is_postident' => 'setIsPostident',
'is_default_enabled' => 'setIsDefaultEnabled',
'island_fee' => 'setIslandFee',
'is_cod' => 'setIsCod',
'supported_multishop' => 'setSupportedMultishop',
'supported_referrer' => 'setSupportedReferrer',
'subreferrer_support' => 'setSubreferrerSupport',
'excluded_payment_methods' => 'setExcludedPaymentMethods',
'excluded_customer_groups' => 'setExcludedCustomerGroups',
'shipping_group' => 'setShippingGroup',
'dispatch_identifier' => 'setDispatchIdentifier',
'auction_type' => 'setAuctionType',
'supported_loyalty_programs' => 'setSupportedLoyaltyPrograms',
'updated_at' => 'setUpdatedAt',
'show_data_privacy_agreement_hint' => 'setShowDataPrivacyAgreementHint',
'transmit_privacy_rule' => 'setTransmitPrivacyRule',
'alternative_email' => 'setAlternativeEmail',
'alternative_phone' => 'setAlternativePhone',
'is_parcel_box' => 'setIsParcelBox',
'is_post_office' => 'setIsPostOffice'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'parcel_service_id' => 'getParcelServiceId',
'backend_name' => 'getBackendName',
'flag' => 'getFlag',
'priority' => 'getPriority',
'category' => 'getCategory',
'use_article_porto' => 'getUseArticlePorto',
'is_insured' => 'getIsInsured',
'is_express' => 'getIsExpress',
'is_postident' => 'getIsPostident',
'is_default_enabled' => 'getIsDefaultEnabled',
'island_fee' => 'getIslandFee',
'is_cod' => 'getIsCod',
'supported_multishop' => 'getSupportedMultishop',
'supported_referrer' => 'getSupportedReferrer',
'subreferrer_support' => 'getSubreferrerSupport',
'excluded_payment_methods' => 'getExcludedPaymentMethods',
'excluded_customer_groups' => 'getExcludedCustomerGroups',
'shipping_group' => 'getShippingGroup',
'dispatch_identifier' => 'getDispatchIdentifier',
'auction_type' => 'getAuctionType',
'supported_loyalty_programs' => 'getSupportedLoyaltyPrograms',
'updated_at' => 'getUpdatedAt',
'show_data_privacy_agreement_hint' => 'getShowDataPrivacyAgreementHint',
'transmit_privacy_rule' => 'getTransmitPrivacyRule',
'alternative_email' => 'getAlternativeEmail',
'alternative_phone' => 'getAlternativePhone',
'is_parcel_box' => 'getIsParcelBox',
'is_post_office' => 'getIsPostOffice'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['parcel_service_id'] = isset($data['parcel_service_id']) ? $data['parcel_service_id'] : null;
        $this->container['backend_name'] = isset($data['backend_name']) ? $data['backend_name'] : null;
        $this->container['flag'] = isset($data['flag']) ? $data['flag'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['use_article_porto'] = isset($data['use_article_porto']) ? $data['use_article_porto'] : null;
        $this->container['is_insured'] = isset($data['is_insured']) ? $data['is_insured'] : null;
        $this->container['is_express'] = isset($data['is_express']) ? $data['is_express'] : null;
        $this->container['is_postident'] = isset($data['is_postident']) ? $data['is_postident'] : null;
        $this->container['is_default_enabled'] = isset($data['is_default_enabled']) ? $data['is_default_enabled'] : null;
        $this->container['island_fee'] = isset($data['island_fee']) ? $data['island_fee'] : null;
        $this->container['is_cod'] = isset($data['is_cod']) ? $data['is_cod'] : null;
        $this->container['supported_multishop'] = isset($data['supported_multishop']) ? $data['supported_multishop'] : null;
        $this->container['supported_referrer'] = isset($data['supported_referrer']) ? $data['supported_referrer'] : null;
        $this->container['subreferrer_support'] = isset($data['subreferrer_support']) ? $data['subreferrer_support'] : null;
        $this->container['excluded_payment_methods'] = isset($data['excluded_payment_methods']) ? $data['excluded_payment_methods'] : null;
        $this->container['excluded_customer_groups'] = isset($data['excluded_customer_groups']) ? $data['excluded_customer_groups'] : null;
        $this->container['shipping_group'] = isset($data['shipping_group']) ? $data['shipping_group'] : null;
        $this->container['dispatch_identifier'] = isset($data['dispatch_identifier']) ? $data['dispatch_identifier'] : null;
        $this->container['auction_type'] = isset($data['auction_type']) ? $data['auction_type'] : null;
        $this->container['supported_loyalty_programs'] = isset($data['supported_loyalty_programs']) ? $data['supported_loyalty_programs'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['show_data_privacy_agreement_hint'] = isset($data['show_data_privacy_agreement_hint']) ? $data['show_data_privacy_agreement_hint'] : null;
        $this->container['transmit_privacy_rule'] = isset($data['transmit_privacy_rule']) ? $data['transmit_privacy_rule'] : null;
        $this->container['alternative_email'] = isset($data['alternative_email']) ? $data['alternative_email'] : null;
        $this->container['alternative_phone'] = isset($data['alternative_phone']) ? $data['alternative_phone'] : null;
        $this->container['is_parcel_box'] = isset($data['is_parcel_box']) ? $data['is_parcel_box'] : null;
        $this->container['is_post_office'] = isset($data['is_post_office']) ? $data['is_post_office'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the shipping profile (autoincrement value)
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets parcel_service_id
     *
     * @return int
     */
    public function getParcelServiceId()
    {
        return $this->container['parcel_service_id'];
    }

    /**
     * Sets parcel_service_id
     *
     * @param int $parcel_service_id The ID of the shipping service provider
     *
     * @return $this
     */
    public function setParcelServiceId($parcel_service_id)
    {
        $this->container['parcel_service_id'] = $parcel_service_id;

        return $this;
    }

    /**
     * Gets backend_name
     *
     * @return string
     */
    public function getBackendName()
    {
        return $this->container['backend_name'];
    }

    /**
     * Sets backend_name
     *
     * @param string $backend_name The back end name of the shipping profile
     *
     * @return $this
     */
    public function setBackendName($backend_name)
    {
        $this->container['backend_name'] = $backend_name;

        return $this;
    }

    /**
     * Gets flag
     *
     * @return int
     */
    public function getFlag()
    {
        return $this->container['flag'];
    }

    /**
     * Sets flag
     *
     * @param int $flag The icon of the shipping profile
     *
     * @return $this
     */
    public function setFlag($flag)
    {
        $this->container['flag'] = $flag;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority The priority of the shipping profile
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets category
     *
     * @return int
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param int $category The category of the shipping profile
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets use_article_porto
     *
     * @return int
     */
    public function getUseArticlePorto()
    {
        return $this->container['use_article_porto'];
    }

    /**
     * Sets use_article_porto
     *
     * @param int $use_article_porto Flag that indicates if the extra shipping charge saved in the item data record is used
     *
     * @return $this
     */
    public function setUseArticlePorto($use_article_porto)
    {
        $this->container['use_article_porto'] = $use_article_porto;

        return $this;
    }

    /**
     * Gets is_insured
     *
     * @return int
     */
    public function getIsInsured()
    {
        return $this->container['is_insured'];
    }

    /**
     * Sets is_insured
     *
     * @param int $is_insured Flag that indicates if the shipping profile is insured
     *
     * @return $this
     */
    public function setIsInsured($is_insured)
    {
        $this->container['is_insured'] = $is_insured;

        return $this;
    }

    /**
     * Gets is_express
     *
     * @return int
     */
    public function getIsExpress()
    {
        return $this->container['is_express'];
    }

    /**
     * Sets is_express
     *
     * @param int $is_express Flag that indicates if the shipping profile is used for express delivery
     *
     * @return $this
     */
    public function setIsExpress($is_express)
    {
        $this->container['is_express'] = $is_express;

        return $this;
    }

    /**
     * Gets is_postident
     *
     * @return int
     */
    public function getIsPostident()
    {
        return $this->container['is_postident'];
    }

    /**
     * Sets is_postident
     *
     * @param int $is_postident Flag that indicates if the shipping profile includes an authority verification
     *
     * @return $this
     */
    public function setIsPostident($is_postident)
    {
        $this->container['is_postident'] = $is_postident;

        return $this;
    }

    /**
     * Gets is_default_enabled
     *
     * @return int
     */
    public function getIsDefaultEnabled()
    {
        return $this->container['is_default_enabled'];
    }

    /**
     * Sets is_default_enabled
     *
     * @param int $is_default_enabled Flag that indicates if the shipping profile is automatically assigned to new items
     *
     * @return $this
     */
    public function setIsDefaultEnabled($is_default_enabled)
    {
        $this->container['is_default_enabled'] = $is_default_enabled;

        return $this;
    }

    /**
     * Gets island_fee
     *
     * @return BigDecimal
     */
    public function getIslandFee()
    {
        return $this->container['island_fee'];
    }

    /**
     * Sets island_fee
     *
     * @param BigDecimal $island_fee The extra charge for islands saved in the shipping profile
     *
     * @return $this
     */
    public function setIslandFee($island_fee)
    {
        $this->container['island_fee'] = $island_fee;

        return $this;
    }

    /**
     * Gets is_cod
     *
     * @return int
     */
    public function getIsCod()
    {
        return $this->container['is_cod'];
    }

    /**
     * Sets is_cod
     *
     * @param int $is_cod Flag that indicates Cash on Delivery
     *
     * @return $this
     */
    public function setIsCod($is_cod)
    {
        $this->container['is_cod'] = $is_cod;

        return $this;
    }

    /**
     * Gets supported_multishop
     *
     * @return string[]
     */
    public function getSupportedMultishop()
    {
        return $this->container['supported_multishop'];
    }

    /**
     * Sets supported_multishop
     *
     * @param string[] $supported_multishop The clients (stores) that are activated for the shipping profile
     *
     * @return $this
     */
    public function setSupportedMultishop($supported_multishop)
    {
        $this->container['supported_multishop'] = $supported_multishop;

        return $this;
    }

    /**
     * Gets supported_referrer
     *
     * @return string[]
     */
    public function getSupportedReferrer()
    {
        return $this->container['supported_referrer'];
    }

    /**
     * Sets supported_referrer
     *
     * @param string[] $supported_referrer The order referrers that are activated for the shipping profile
     *
     * @return $this
     */
    public function setSupportedReferrer($supported_referrer)
    {
        $this->container['supported_referrer'] = $supported_referrer;

        return $this;
    }

    /**
     * Gets subreferrer_support
     *
     * @return string[]
     */
    public function getSubreferrerSupport()
    {
        return $this->container['subreferrer_support'];
    }

    /**
     * Sets subreferrer_support
     *
     * @param string[] $subreferrer_support This field is currently without any function.
     *
     * @return $this
     */
    public function setSubreferrerSupport($subreferrer_support)
    {
        $this->container['subreferrer_support'] = $subreferrer_support;

        return $this;
    }

    /**
     * Gets excluded_payment_methods
     *
     * @return string[]
     */
    public function getExcludedPaymentMethods()
    {
        return $this->container['excluded_payment_methods'];
    }

    /**
     * Sets excluded_payment_methods
     *
     * @param string[] $excluded_payment_methods The blocked payment methods that are not offered for the shipping profile
     *
     * @return $this
     */
    public function setExcludedPaymentMethods($excluded_payment_methods)
    {
        $this->container['excluded_payment_methods'] = $excluded_payment_methods;

        return $this;
    }

    /**
     * Gets excluded_customer_groups
     *
     * @return string[]
     */
    public function getExcludedCustomerGroups()
    {
        return $this->container['excluded_customer_groups'];
    }

    /**
     * Sets excluded_customer_groups
     *
     * @param string[] $excluded_customer_groups The blocked customer groups for the shipping profile. Blocked customer groups cannot select the shipping profile during checkout.
     *
     * @return $this
     */
    public function setExcludedCustomerGroups($excluded_customer_groups)
    {
        $this->container['excluded_customer_groups'] = $excluded_customer_groups;

        return $this;
    }

    /**
     * Gets shipping_group
     *
     * @return string
     */
    public function getShippingGroup()
    {
        return $this->container['shipping_group'];
    }

    /**
     * Sets shipping_group
     *
     * @param string $shipping_group The group of the shipping profile
     *
     * @return $this
     */
    public function setShippingGroup($shipping_group)
    {
        $this->container['shipping_group'] = $shipping_group;

        return $this;
    }

    /**
     * Gets dispatch_identifier
     *
     * @return string
     */
    public function getDispatchIdentifier()
    {
        return $this->container['dispatch_identifier'];
    }

    /**
     * Sets dispatch_identifier
     *
     * @param string $dispatch_identifier This field is currently without any function.
     *
     * @return $this
     */
    public function setDispatchIdentifier($dispatch_identifier)
    {
        $this->container['dispatch_identifier'] = $dispatch_identifier;

        return $this;
    }

    /**
     * Gets auction_type
     *
     * @return int
     */
    public function getAuctionType()
    {
        return $this->container['auction_type'];
    }

    /**
     * Sets auction_type
     *
     * @param int $auction_type The eBay listing type for the shipping profile
     *
     * @return $this
     */
    public function setAuctionType($auction_type)
    {
        $this->container['auction_type'] = $auction_type;

        return $this;
    }

    /**
     * Gets supported_loyalty_programs
     *
     * @return string[]
     */
    public function getSupportedLoyaltyPrograms()
    {
        return $this->container['supported_loyalty_programs'];
    }

    /**
     * Sets supported_loyalty_programs
     *
     * @param string[] $supported_loyalty_programs The loyalty programs that are supported by the shipping profile
     *
     * @return $this
     */
    public function setSupportedLoyaltyPrograms($supported_loyalty_programs)
    {
        $this->container['supported_loyalty_programs'] = $supported_loyalty_programs;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at The date the shipping profile was last updated
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets show_data_privacy_agreement_hint
     *
     * @return int
     */
    public function getShowDataPrivacyAgreementHint()
    {
        return $this->container['show_data_privacy_agreement_hint'];
    }

    /**
     * Sets show_data_privacy_agreement_hint
     *
     * @param int $show_data_privacy_agreement_hint show_data_privacy_agreement_hint
     *
     * @return $this
     */
    public function setShowDataPrivacyAgreementHint($show_data_privacy_agreement_hint)
    {
        $this->container['show_data_privacy_agreement_hint'] = $show_data_privacy_agreement_hint;

        return $this;
    }

    /**
     * Gets transmit_privacy_rule
     *
     * @return string
     */
    public function getTransmitPrivacyRule()
    {
        return $this->container['transmit_privacy_rule'];
    }

    /**
     * Sets transmit_privacy_rule
     *
     * @param string $transmit_privacy_rule transmit_privacy_rule
     *
     * @return $this
     */
    public function setTransmitPrivacyRule($transmit_privacy_rule)
    {
        $this->container['transmit_privacy_rule'] = $transmit_privacy_rule;

        return $this;
    }

    /**
     * Gets alternative_email
     *
     * @return string
     */
    public function getAlternativeEmail()
    {
        return $this->container['alternative_email'];
    }

    /**
     * Sets alternative_email
     *
     * @param string $alternative_email alternative_email
     *
     * @return $this
     */
    public function setAlternativeEmail($alternative_email)
    {
        $this->container['alternative_email'] = $alternative_email;

        return $this;
    }

    /**
     * Gets alternative_phone
     *
     * @return string
     */
    public function getAlternativePhone()
    {
        return $this->container['alternative_phone'];
    }

    /**
     * Sets alternative_phone
     *
     * @param string $alternative_phone alternative_phone
     *
     * @return $this
     */
    public function setAlternativePhone($alternative_phone)
    {
        $this->container['alternative_phone'] = $alternative_phone;

        return $this;
    }

    /**
     * Gets is_parcel_box
     *
     * @return int
     */
    public function getIsParcelBox()
    {
        return $this->container['is_parcel_box'];
    }

    /**
     * Sets is_parcel_box
     *
     * @param int $is_parcel_box Indicates whether the e.g. paketshop is supported
     *
     * @return $this
     */
    public function setIsParcelBox($is_parcel_box)
    {
        $this->container['is_parcel_box'] = $is_parcel_box;

        return $this;
    }

    /**
     * Gets is_post_office
     *
     * @return int
     */
    public function getIsPostOffice()
    {
        return $this->container['is_post_office'];
    }

    /**
     * Sets is_post_office
     *
     * @param int $is_post_office Indicates whether the e.g. postfiliale is supported
     *
     * @return $this
     */
    public function setIsPostOffice($is_post_office)
    {
        $this->container['is_post_office'] = $is_post_office;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

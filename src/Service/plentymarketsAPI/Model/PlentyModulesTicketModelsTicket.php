<?php
/**
 * PlentyModulesTicketModelsTicket
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PlentyModulesTicketModelsTicket Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlentyModulesTicketModelsTicket implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Plenty\Modules\Ticket\Models\Ticket';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'type_id' => 'int',
'priority_id' => 'int',
'parent_ticket_id' => 'int',
'status_id' => 'int',
'confidential' => 'string[]',
'contact_id' => 'int',
'order_id' => 'int',
'created_at' => 'string',
'updated_at' => 'string',
'contact_last_update_at' => 'string',
'deadline_at' => 'string',
'finished_at' => 'string',
'title' => 'string',
'progress' => 'int',
'plenty_id' => 'int',
'source' => 'string[]',
'documents_count' => 'int',
'has_documents' => 'int',
'children_count' => 'int',
'resubmission_at' => 'string',
'parse_data' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'type_id' => null,
'priority_id' => null,
'parent_ticket_id' => null,
'status_id' => null,
'confidential' => null,
'contact_id' => null,
'order_id' => null,
'created_at' => null,
'updated_at' => null,
'contact_last_update_at' => null,
'deadline_at' => null,
'finished_at' => null,
'title' => null,
'progress' => null,
'plenty_id' => null,
'source' => null,
'documents_count' => null,
'has_documents' => null,
'children_count' => null,
'resubmission_at' => null,
'parse_data' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'type_id' => 'typeId',
'priority_id' => 'priorityId',
'parent_ticket_id' => 'parentTicketId',
'status_id' => 'statusId',
'confidential' => 'confidential',
'contact_id' => 'contactId',
'order_id' => 'orderId',
'created_at' => 'createdAt',
'updated_at' => 'updatedAt',
'contact_last_update_at' => 'contactLastUpdateAt',
'deadline_at' => 'deadlineAt',
'finished_at' => 'finishedAt',
'title' => 'title',
'progress' => 'progress',
'plenty_id' => 'plentyId',
'source' => 'source',
'documents_count' => 'documentsCount',
'has_documents' => 'hasDocuments',
'children_count' => 'childrenCount',
'resubmission_at' => 'resubmissionAt',
'parse_data' => 'parseData'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'type_id' => 'setTypeId',
'priority_id' => 'setPriorityId',
'parent_ticket_id' => 'setParentTicketId',
'status_id' => 'setStatusId',
'confidential' => 'setConfidential',
'contact_id' => 'setContactId',
'order_id' => 'setOrderId',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt',
'contact_last_update_at' => 'setContactLastUpdateAt',
'deadline_at' => 'setDeadlineAt',
'finished_at' => 'setFinishedAt',
'title' => 'setTitle',
'progress' => 'setProgress',
'plenty_id' => 'setPlentyId',
'source' => 'setSource',
'documents_count' => 'setDocumentsCount',
'has_documents' => 'setHasDocuments',
'children_count' => 'setChildrenCount',
'resubmission_at' => 'setResubmissionAt',
'parse_data' => 'setParseData'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'type_id' => 'getTypeId',
'priority_id' => 'getPriorityId',
'parent_ticket_id' => 'getParentTicketId',
'status_id' => 'getStatusId',
'confidential' => 'getConfidential',
'contact_id' => 'getContactId',
'order_id' => 'getOrderId',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt',
'contact_last_update_at' => 'getContactLastUpdateAt',
'deadline_at' => 'getDeadlineAt',
'finished_at' => 'getFinishedAt',
'title' => 'getTitle',
'progress' => 'getProgress',
'plenty_id' => 'getPlentyId',
'source' => 'getSource',
'documents_count' => 'getDocumentsCount',
'has_documents' => 'getHasDocuments',
'children_count' => 'getChildrenCount',
'resubmission_at' => 'getResubmissionAt',
'parse_data' => 'getParseData'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type_id'] = isset($data['type_id']) ? $data['type_id'] : null;
        $this->container['priority_id'] = isset($data['priority_id']) ? $data['priority_id'] : null;
        $this->container['parent_ticket_id'] = isset($data['parent_ticket_id']) ? $data['parent_ticket_id'] : null;
        $this->container['status_id'] = isset($data['status_id']) ? $data['status_id'] : null;
        $this->container['confidential'] = isset($data['confidential']) ? $data['confidential'] : null;
        $this->container['contact_id'] = isset($data['contact_id']) ? $data['contact_id'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['contact_last_update_at'] = isset($data['contact_last_update_at']) ? $data['contact_last_update_at'] : null;
        $this->container['deadline_at'] = isset($data['deadline_at']) ? $data['deadline_at'] : null;
        $this->container['finished_at'] = isset($data['finished_at']) ? $data['finished_at'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['progress'] = isset($data['progress']) ? $data['progress'] : null;
        $this->container['plenty_id'] = isset($data['plenty_id']) ? $data['plenty_id'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['documents_count'] = isset($data['documents_count']) ? $data['documents_count'] : null;
        $this->container['has_documents'] = isset($data['has_documents']) ? $data['has_documents'] : null;
        $this->container['children_count'] = isset($data['children_count']) ? $data['children_count'] : null;
        $this->container['resubmission_at'] = isset($data['resubmission_at']) ? $data['resubmission_at'] : null;
        $this->container['parse_data'] = isset($data['parse_data']) ? $data['parse_data'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the ticket
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type_id
     *
     * @return int
     */
    public function getTypeId()
    {
        return $this->container['type_id'];
    }

    /**
     * Sets type_id
     *
     * @param int $type_id The type ID of the ticket
     *
     * @return $this
     */
    public function setTypeId($type_id)
    {
        $this->container['type_id'] = $type_id;

        return $this;
    }

    /**
     * Gets priority_id
     *
     * @return int
     */
    public function getPriorityId()
    {
        return $this->container['priority_id'];
    }

    /**
     * Sets priority_id
     *
     * @param int $priority_id The priority ID of the ticket
     *
     * @return $this
     */
    public function setPriorityId($priority_id)
    {
        $this->container['priority_id'] = $priority_id;

        return $this;
    }

    /**
     * Gets parent_ticket_id
     *
     * @return int
     */
    public function getParentTicketId()
    {
        return $this->container['parent_ticket_id'];
    }

    /**
     * Sets parent_ticket_id
     *
     * @param int $parent_ticket_id The ID of the parent ticket
     *
     * @return $this
     */
    public function setParentTicketId($parent_ticket_id)
    {
        $this->container['parent_ticket_id'] = $parent_ticket_id;

        return $this;
    }

    /**
     * Gets status_id
     *
     * @return int
     */
    public function getStatusId()
    {
        return $this->container['status_id'];
    }

    /**
     * Sets status_id
     *
     * @param int $status_id The status ID of the ticket
     *
     * @return $this
     */
    public function setStatusId($status_id)
    {
        $this->container['status_id'] = $status_id;

        return $this;
    }

    /**
     * Gets confidential
     *
     * @return string[]
     */
    public function getConfidential()
    {
        return $this->container['confidential'];
    }

    /**
     * Sets confidential
     *
     * @param string[] $confidential The confidential value. Displays 1 if the ticket is confidential. Displays 0 if the ticket is not confidential.
     *
     * @return $this
     */
    public function setConfidential($confidential)
    {
        $this->container['confidential'] = $confidential;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return int
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param int $contact_id The ID of the contact that is linked with the ticket
     *
     * @return $this
     */
    public function setContactId($contact_id)
    {
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int $order_id The ID of the order linked with the ticket
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at The time the ticket was created as unix timestamp or carbon object
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at The time the ticket was last updated as unix timestamp or carbon object
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets contact_last_update_at
     *
     * @return string
     */
    public function getContactLastUpdateAt()
    {
        return $this->container['contact_last_update_at'];
    }

    /**
     * Sets contact_last_update_at
     *
     * @param string $contact_last_update_at The time the contact was last updated
     *
     * @return $this
     */
    public function setContactLastUpdateAt($contact_last_update_at)
    {
        $this->container['contact_last_update_at'] = $contact_last_update_at;

        return $this;
    }

    /**
     * Gets deadline_at
     *
     * @return string
     */
    public function getDeadlineAt()
    {
        return $this->container['deadline_at'];
    }

    /**
     * Sets deadline_at
     *
     * @param string $deadline_at The date of the ticket deadline
     *
     * @return $this
     */
    public function setDeadlineAt($deadline_at)
    {
        $this->container['deadline_at'] = $deadline_at;

        return $this;
    }

    /**
     * Gets finished_at
     *
     * @return string
     */
    public function getFinishedAt()
    {
        return $this->container['finished_at'];
    }

    /**
     * Sets finished_at
     *
     * @param string $finished_at The date the ticket is solved and displays 100 percent in the progress bar
     *
     * @return $this
     */
    public function setFinishedAt($finished_at)
    {
        $this->container['finished_at'] = $finished_at;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The title of the ticket
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets progress
     *
     * @return int
     */
    public function getProgress()
    {
        return $this->container['progress'];
    }

    /**
     * Sets progress
     *
     * @param int $progress The progress of the ticket in percent
     *
     * @return $this
     */
    public function setProgress($progress)
    {
        $this->container['progress'] = $progress;

        return $this;
    }

    /**
     * Gets plenty_id
     *
     * @return int
     */
    public function getPlentyId()
    {
        return $this->container['plenty_id'];
    }

    /**
     * Sets plenty_id
     *
     * @param int $plenty_id The ID of the client (store)
     *
     * @return $this
     */
    public function setPlentyId($plenty_id)
    {
        $this->container['plenty_id'] = $plenty_id;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string[]
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string[] $source The source of the ticket. Possible values are 'frontend', 'backend', 'ebay' and 'email'.
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets documents_count
     *
     * @return int
     */
    public function getDocumentsCount()
    {
        return $this->container['documents_count'];
    }

    /**
     * Sets documents_count
     *
     * @param int $documents_count The number of documents that are attached to the ticket
     *
     * @return $this
     */
    public function setDocumentsCount($documents_count)
    {
        $this->container['documents_count'] = $documents_count;

        return $this;
    }

    /**
     * Gets has_documents
     *
     * @return int
     */
    public function getHasDocuments()
    {
        return $this->container['has_documents'];
    }

    /**
     * Sets has_documents
     *
     * @param int $has_documents Displays 1 if the ticket has one or more documents. Displays 0 if the ticket has no document.
     *
     * @return $this
     */
    public function setHasDocuments($has_documents)
    {
        $this->container['has_documents'] = $has_documents;

        return $this;
    }

    /**
     * Gets children_count
     *
     * @return int
     */
    public function getChildrenCount()
    {
        return $this->container['children_count'];
    }

    /**
     * Sets children_count
     *
     * @param int $children_count The number of child tickets
     *
     * @return $this
     */
    public function setChildrenCount($children_count)
    {
        $this->container['children_count'] = $children_count;

        return $this;
    }

    /**
     * Gets resubmission_at
     *
     * @return string
     */
    public function getResubmissionAt()
    {
        return $this->container['resubmission_at'];
    }

    /**
     * Sets resubmission_at
     *
     * @param string $resubmission_at The date the ticket should be resubmitted
     *
     * @return $this
     */
    public function setResubmissionAt($resubmission_at)
    {
        $this->container['resubmission_at'] = $resubmission_at;

        return $this;
    }

    /**
     * Gets parse_data
     *
     * @return string
     */
    public function getParseData()
    {
        return $this->container['parse_data'];
    }

    /**
     * Sets parse_data
     *
     * @param string $parse_data The ParseData from the ticket
     *
     * @return $this
     */
    public function setParseData($parse_data)
    {
        $this->container['parse_data'] = $parse_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

<?php
/**
 * PlentyModulesAccountModelsAccount
 *
 * PHP version 5
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BSApp\Service\plentymarketsAPI\Model;

use \ArrayAccess;
use \BSApp\Service\plentymarketsAPI\ObjectSerializer;

/**
 * PlentyModulesAccountModelsAccount Class Doc Comment
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlentyModulesAccountModelsAccount implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Plenty\Modules\Account\Models\Account';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'number' => 'string',
'company_name' => 'string',
'tax_id_number' => 'string',
'valuta' => 'int',
'discount_days' => 'int',
'discount_percent' => 'BigDecimal',
'time_for_payment_allowed_days' => 'int',
'sales_representative_contact_id' => 'int',
'user_id' => 'int',
'delivery_time' => 'int',
'dealer_min_order_value' => 'BigDecimal',
'created_at' => 'string',
'updated_at' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'number' => null,
'company_name' => null,
'tax_id_number' => null,
'valuta' => null,
'discount_days' => null,
'discount_percent' => null,
'time_for_payment_allowed_days' => null,
'sales_representative_contact_id' => null,
'user_id' => null,
'delivery_time' => null,
'dealer_min_order_value' => null,
'created_at' => null,
'updated_at' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'number' => 'number',
'company_name' => 'companyName',
'tax_id_number' => 'taxIdNumber',
'valuta' => 'valuta',
'discount_days' => 'discountDays',
'discount_percent' => 'discountPercent',
'time_for_payment_allowed_days' => 'timeForPaymentAllowedDays',
'sales_representative_contact_id' => 'salesRepresentativeContactId',
'user_id' => 'userId',
'delivery_time' => 'deliveryTime',
'dealer_min_order_value' => 'dealerMinOrderValue',
'created_at' => 'createdAt',
'updated_at' => 'updatedAt'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'number' => 'setNumber',
'company_name' => 'setCompanyName',
'tax_id_number' => 'setTaxIdNumber',
'valuta' => 'setValuta',
'discount_days' => 'setDiscountDays',
'discount_percent' => 'setDiscountPercent',
'time_for_payment_allowed_days' => 'setTimeForPaymentAllowedDays',
'sales_representative_contact_id' => 'setSalesRepresentativeContactId',
'user_id' => 'setUserId',
'delivery_time' => 'setDeliveryTime',
'dealer_min_order_value' => 'setDealerMinOrderValue',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'number' => 'getNumber',
'company_name' => 'getCompanyName',
'tax_id_number' => 'getTaxIdNumber',
'valuta' => 'getValuta',
'discount_days' => 'getDiscountDays',
'discount_percent' => 'getDiscountPercent',
'time_for_payment_allowed_days' => 'getTimeForPaymentAllowedDays',
'sales_representative_contact_id' => 'getSalesRepresentativeContactId',
'user_id' => 'getUserId',
'delivery_time' => 'getDeliveryTime',
'dealer_min_order_value' => 'getDealerMinOrderValue',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['tax_id_number'] = isset($data['tax_id_number']) ? $data['tax_id_number'] : null;
        $this->container['valuta'] = isset($data['valuta']) ? $data['valuta'] : null;
        $this->container['discount_days'] = isset($data['discount_days']) ? $data['discount_days'] : null;
        $this->container['discount_percent'] = isset($data['discount_percent']) ? $data['discount_percent'] : null;
        $this->container['time_for_payment_allowed_days'] = isset($data['time_for_payment_allowed_days']) ? $data['time_for_payment_allowed_days'] : null;
        $this->container['sales_representative_contact_id'] = isset($data['sales_representative_contact_id']) ? $data['sales_representative_contact_id'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['delivery_time'] = isset($data['delivery_time']) ? $data['delivery_time'] : null;
        $this->container['dealer_min_order_value'] = isset($data['dealer_min_order_value']) ? $data['dealer_min_order_value'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the account
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number The number of the account
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name The company name
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets tax_id_number
     *
     * @return string
     */
    public function getTaxIdNumber()
    {
        return $this->container['tax_id_number'];
    }

    /**
     * Sets tax_id_number
     *
     * @param string $tax_id_number The ID of the tax number
     *
     * @return $this
     */
    public function setTaxIdNumber($tax_id_number)
    {
        $this->container['tax_id_number'] = $tax_id_number;

        return $this;
    }

    /**
     * Gets valuta
     *
     * @return int
     */
    public function getValuta()
    {
        return $this->container['valuta'];
    }

    /**
     * Sets valuta
     *
     * @param int $valuta The valuta date in days specified for the account
     *
     * @return $this
     */
    public function setValuta($valuta)
    {
        $this->container['valuta'] = $valuta;

        return $this;
    }

    /**
     * Gets discount_days
     *
     * @return int
     */
    public function getDiscountDays()
    {
        return $this->container['discount_days'];
    }

    /**
     * Sets discount_days
     *
     * @param int $discount_days The early payment discount period in days specified for the account
     *
     * @return $this
     */
    public function setDiscountDays($discount_days)
    {
        $this->container['discount_days'] = $discount_days;

        return $this;
    }

    /**
     * Gets discount_percent
     *
     * @return BigDecimal
     */
    public function getDiscountPercent()
    {
        return $this->container['discount_percent'];
    }

    /**
     * Sets discount_percent
     *
     * @param BigDecimal $discount_percent The early payment discount in percent specified for the account
     *
     * @return $this
     */
    public function setDiscountPercent($discount_percent)
    {
        $this->container['discount_percent'] = $discount_percent;

        return $this;
    }

    /**
     * Gets time_for_payment_allowed_days
     *
     * @return int
     */
    public function getTimeForPaymentAllowedDays()
    {
        return $this->container['time_for_payment_allowed_days'];
    }

    /**
     * Sets time_for_payment_allowed_days
     *
     * @param int $time_for_payment_allowed_days The payment due date in days specified for the account
     *
     * @return $this
     */
    public function setTimeForPaymentAllowedDays($time_for_payment_allowed_days)
    {
        $this->container['time_for_payment_allowed_days'] = $time_for_payment_allowed_days;

        return $this;
    }

    /**
     * Gets sales_representative_contact_id
     *
     * @return int
     */
    public function getSalesRepresentativeContactId()
    {
        return $this->container['sales_representative_contact_id'];
    }

    /**
     * Sets sales_representative_contact_id
     *
     * @param int $sales_representative_contact_id The contact ID of the sales representative
     *
     * @return $this
     */
    public function setSalesRepresentativeContactId($sales_representative_contact_id)
    {
        $this->container['sales_representative_contact_id'] = $sales_representative_contact_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id The ID of the account owner
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets delivery_time
     *
     * @return int
     */
    public function getDeliveryTime()
    {
        return $this->container['delivery_time'];
    }

    /**
     * Sets delivery_time
     *
     * @param int $delivery_time The delivery time for the supplier
     *
     * @return $this
     */
    public function setDeliveryTime($delivery_time)
    {
        $this->container['delivery_time'] = $delivery_time;

        return $this;
    }

    /**
     * Gets dealer_min_order_value
     *
     * @return BigDecimal
     */
    public function getDealerMinOrderValue()
    {
        return $this->container['dealer_min_order_value'];
    }

    /**
     * Sets dealer_min_order_value
     *
     * @param BigDecimal $dealer_min_order_value The minimum order value for the supplier
     *
     * @return $this
     */
    public function setDealerMinOrderValue($dealer_min_order_value)
    {
        $this->container['dealer_min_order_value'] = $dealer_min_order_value;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at The time the account was created as unix timestamp
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at The time the account was last updated as unix timestamp
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

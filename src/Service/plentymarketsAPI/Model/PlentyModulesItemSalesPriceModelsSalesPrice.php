<?php
/**
 * PlentyModulesItemSalesPriceModelsSalesPrice
 *
 * PHP version 5
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BSApp\Service\plentymarketsAPI\Model;

use \ArrayAccess;
use \BSApp\Service\plentymarketsAPI\ObjectSerializer;

/**
 * PlentyModulesItemSalesPriceModelsSalesPrice Class Doc Comment
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlentyModulesItemSalesPriceModelsSalesPrice implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'Plenty\Modules\Item\SalesPrice\Models\SalesPrice';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'id' => 'int',
        'position' => 'int',
        'minimum_order_quantity' => 'float',
        'type' => 'string',
        'is_customer_price' => 'bool',
        'is_displayed_by_default' => 'bool',
        'is_live_conversion' => 'bool',
        'interval' => 'string',
        'names' => '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesItemSalesPriceModelsSalesPriceName[]',
        'accounts' => '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesItemSalesPriceModelsSalesPriceAccount[]',
        'countries' => '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesItemSalesPriceModelsSalesPriceCountry[]',
        'currencies' => '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesItemSalesPriceModelsSalesPriceCurrency[]',
        'customer_classes' => '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesItemSalesPriceModelsSalesPriceCustomerClass[]',
        'referrers' => '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesItemSalesPriceModelsSalesPriceReferrer[]',
        'clients' => '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesItemSalesPriceModelsSalesPriceOnlineStore[]'];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'id' => null,
        'position' => null,
        'minimum_order_quantity' => null,
        'type' => null,
        'is_customer_price' => null,
        'is_displayed_by_default' => null,
        'is_live_conversion' => null,
        'interval' => null,
        'names' => null,
        'accounts' => null,
        'countries' => null,
        'currencies' => null,
        'customer_classes' => null,
        'referrers' => null,
        'clients' => null];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'position' => 'position',
        'minimum_order_quantity' => 'minimumOrderQuantity',
        'type' => 'type',
        'is_customer_price' => 'isCustomerPrice',
        'is_displayed_by_default' => 'isDisplayedByDefault',
        'is_live_conversion' => 'isLiveConversion',
        'interval' => 'interval',
        'names' => 'names',
        'accounts' => 'accounts',
        'countries' => 'countries',
        'currencies' => 'currencies',
        'customer_classes' => 'customerClasses',
        'referrers' => 'referrers',
        'clients' => 'clients'];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'position' => 'setPosition',
        'minimum_order_quantity' => 'setMinimumOrderQuantity',
        'type' => 'setType',
        'is_customer_price' => 'setIsCustomerPrice',
        'is_displayed_by_default' => 'setIsDisplayedByDefault',
        'is_live_conversion' => 'setIsLiveConversion',
        'interval' => 'setInterval',
        'names' => 'setNames',
        'accounts' => 'setAccounts',
        'countries' => 'setCountries',
        'currencies' => 'setCurrencies',
        'customer_classes' => 'setCustomerClasses',
        'referrers' => 'setReferrers',
        'clients' => 'setClients'];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'position' => 'getPosition',
        'minimum_order_quantity' => 'getMinimumOrderQuantity',
        'type' => 'getType',
        'is_customer_price' => 'getIsCustomerPrice',
        'is_displayed_by_default' => 'getIsDisplayedByDefault',
        'is_live_conversion' => 'getIsLiveConversion',
        'interval' => 'getInterval',
        'names' => 'getNames',
        'accounts' => 'getAccounts',
        'countries' => 'getCountries',
        'currencies' => 'getCurrencies',
        'customer_classes' => 'getCustomerClasses',
        'referrers' => 'getReferrers',
        'clients' => 'getClients'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['minimum_order_quantity'] = isset($data['minimum_order_quantity']) ? $data['minimum_order_quantity'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['is_customer_price'] = isset($data['is_customer_price']) ? $data['is_customer_price'] : null;
        $this->container['is_displayed_by_default'] = isset($data['is_displayed_by_default']) ? $data['is_displayed_by_default'] : null;
        $this->container['is_live_conversion'] = isset($data['is_live_conversion']) ? $data['is_live_conversion'] : null;
        $this->container['interval'] = isset($data['interval']) ? $data['interval'] : null;
        $this->container['names'] = isset($data['names']) ? $data['names'] : null;
        $this->container['accounts'] = isset($data['accounts']) ? $data['accounts'] : null;
        $this->container['countries'] = isset($data['countries']) ? $data['countries'] : null;
        $this->container['currencies'] = isset($data['currencies']) ? $data['currencies'] : null;
        $this->container['customer_classes'] = isset($data['customer_classes']) ? $data['customer_classes'] : null;
        $this->container['referrers'] = isset($data['referrers']) ? $data['referrers'] : null;
        $this->container['clients'] = isset($data['clients']) ? $data['clients'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique ID of the sales price
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int $position The position of the sales price
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets minimum_order_quantity
     *
     * @return float
     */
    public function getMinimumOrderQuantity()
    {
        return $this->container['minimum_order_quantity'];
    }

    /**
     * Sets minimum_order_quantity
     *
     * @param float $minimum_order_quantity The minimum order quantity of the sales price. Sales prices with different minimum quantities can be used to create a quantity based graduation of prices in plentymarkets.
     *
     * @return $this
     */
    public function setMinimumOrderQuantity($minimum_order_quantity)
    {
        $this->container['minimum_order_quantity'] = $minimum_order_quantity;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The price type of the sales price.<ul><li>RRP = Sales price is the recommended retail price (RRP). If the RRP and another sales price are linked with a variation, the RRP will be displayed in the online store as red strike-through text next to the sales price.</li><li>Special offer = Sales price as a special offer. Special offers are used for markets, e.g. Amazon and Hitmeister.</li></ul>
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets is_customer_price
     *
     * @return bool
     */
    public function getIsCustomerPrice()
    {
        return $this->container['is_customer_price'];
    }

    /**
     * Sets is_customer_price
     *
     * @param bool $is_customer_price Flag that indicates if the sales price is a customer price. Currently, this setting is not in use.
     *
     * @return $this
     */
    public function setIsCustomerPrice($is_customer_price)
    {
        $this->container['is_customer_price'] = $is_customer_price;

        return $this;
    }

    /**
     * Gets is_displayed_by_default
     *
     * @return bool
     */
    public function getIsDisplayedByDefault()
    {
        return $this->container['is_displayed_by_default'];
    }

    /**
     * Sets is_displayed_by_default
     *
     * @param bool $is_displayed_by_default Flag that indicates if the sales price is displayed automatically in the Sales Prices area of the plentymarkets backend when a new item is created. When false, the sales price can still be added manually when a new item is created.
     *
     * @return $this
     */
    public function setIsDisplayedByDefault($is_displayed_by_default)
    {
        $this->container['is_displayed_by_default'] = $is_displayed_by_default;

        return $this;
    }

    /**
     * Gets is_live_conversion
     *
     * @return bool
     */
    public function getIsLiveConversion()
    {
        return $this->container['is_live_conversion'];
    }

    /**
     * Sets is_live_conversion
     *
     * @param bool $is_live_conversion Flag that indicates if the sales price is converted live in the online store. When true, the default currency price will be converted into the active currencies based on the conversion rates saved in plentymarkets.
     *
     * @return $this
     */
    public function setIsLiveConversion($is_live_conversion)
    {
        $this->container['is_live_conversion'] = $is_live_conversion;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return string
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param string $interval The interval of the price. Possible values are: daily, weekly, monthly, quarterly, half-yearly and yearly.
     *
     * @return $this
     */
    public function setInterval($interval)
    {
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets names
     *
     * @return PlentyModulesItemSalesPriceModelsSalesPriceName[]
     */
    public function getNames()
    {
        return $this->container['names'];
    }

    /**
     * Sets names
     *
     * @param PlentyModulesItemSalesPriceModelsSalesPriceName[] $names names (List)
     *
     * @return $this
     */
    public function setNames($names)
    {
        $this->container['names'] = $names;

        return $this;
    }

    /**
     * Gets accounts
     *
     * @return PlentyModulesItemSalesPriceModelsSalesPriceAccount[]
     */
    public function getAccounts()
    {
        return $this->container['accounts'];
    }

    /**
     * Sets accounts
     *
     * @param PlentyModulesItemSalesPriceModelsSalesPriceAccount[] $accounts accounts (List)
     *
     * @return $this
     */
    public function setAccounts($accounts)
    {
        $this->container['accounts'] = $accounts;

        return $this;
    }

    /**
     * Gets countries
     *
     * @return PlentyModulesItemSalesPriceModelsSalesPriceCountry[]
     */
    public function getCountries()
    {
        return $this->container['countries'];
    }

    /**
     * Sets countries
     *
     * @param PlentyModulesItemSalesPriceModelsSalesPriceCountry[] $countries countries (List)
     *
     * @return $this
     */
    public function setCountries($countries)
    {
        $this->container['countries'] = $countries;

        return $this;
    }

    /**
     * Gets currencies
     *
     * @return PlentyModulesItemSalesPriceModelsSalesPriceCurrency[]
     */
    public function getCurrencies()
    {
        return $this->container['currencies'];
    }

    /**
     * Sets currencies
     *
     * @param PlentyModulesItemSalesPriceModelsSalesPriceCurrency[] $currencies currencies (List)
     *
     * @return $this
     */
    public function setCurrencies($currencies)
    {
        $this->container['currencies'] = $currencies;

        return $this;
    }

    /**
     * Gets customer_classes
     *
     * @return PlentyModulesItemSalesPriceModelsSalesPriceCustomerClass[]
     */
    public function getCustomerClasses()
    {
        return $this->container['customer_classes'];
    }

    /**
     * Sets customer_classes
     *
     * @param PlentyModulesItemSalesPriceModelsSalesPriceCustomerClass[] $customer_classes customerClasses (List)
     *
     * @return $this
     */
    public function setCustomerClasses($customer_classes)
    {
        $this->container['customer_classes'] = $customer_classes;

        return $this;
    }

    /**
     * Gets referrers
     *
     * @return PlentyModulesItemSalesPriceModelsSalesPriceReferrer[]
     */
    public function getReferrers()
    {
        return $this->container['referrers'];
    }

    /**
     * Sets referrers
     *
     * @param PlentyModulesItemSalesPriceModelsSalesPriceReferrer[] $referrers referrer (List)
     *
     * @return $this
     */
    public function setReferrers($referrers)
    {
        $this->container['referrers'] = $referrers;

        return $this;
    }

    /**
     * Gets clients
     *
     * @return PlentyModulesItemSalesPriceModelsSalesPriceOnlineStore[]
     */
    public function getClients()
    {
        return $this->container['clients'];
    }

    /**
     * Sets clients
     *
     * @param PlentyModulesItemSalesPriceModelsSalesPriceOnlineStore[] $clients clients (List)
     *
     * @return $this
     */
    public function setClients($clients)
    {
        $this->container['clients'] = $clients;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

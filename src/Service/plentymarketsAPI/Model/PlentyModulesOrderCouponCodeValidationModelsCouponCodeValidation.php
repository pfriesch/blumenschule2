<?php
/**
 * PlentyModulesOrderCouponCodeValidationModelsCouponCodeValidation
 *
 * PHP version 5
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BSApp\Service\plentymarketsAPI\Model;

use \ArrayAccess;
use \BSApp\Service\plentymarketsAPI\ObjectSerializer;

/**
 * PlentyModulesOrderCouponCodeValidationModelsCouponCodeValidation Class Doc Comment
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlentyModulesOrderCouponCodeValidationModelsCouponCodeValidation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'Plenty\Modules\Order\Coupon\Code\Validation\Models\CouponCodeValidation';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'campaign_id' => 'int',
        'validation_type' => 'string',
        'contact_id' => 'int',
        'coupon_code' => 'string',
        'currency' => 'string',
        'referrer' => 'float',
        'sales_discount' => 'float',
        'sales_discount_net' => 'float',
        'item_discount' => 'float',
        'item_discount_net' => 'float',
        'shipping_discount' => 'float',
        'shipping_discount_net' => 'float',
        'used_vat_fields' => 'object[]',
        'rest_coupon_amount' => 'float',
        'checked_items' => 'object[]',
        'validate_params' => 'object[]',
        'coupon_campaign_type' => 'string'];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'campaign_id' => null,
        'validation_type' => null,
        'contact_id' => null,
        'coupon_code' => null,
        'currency' => null,
        'referrer' => null,
        'sales_discount' => null,
        'sales_discount_net' => null,
        'item_discount' => null,
        'item_discount_net' => null,
        'shipping_discount' => null,
        'shipping_discount_net' => null,
        'used_vat_fields' => null,
        'rest_coupon_amount' => null,
        'checked_items' => null,
        'validate_params' => null,
        'coupon_campaign_type' => null];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'campaign_id' => 'campaignId',
        'validation_type' => 'validationType',
        'contact_id' => 'contactId',
        'coupon_code' => 'couponCode',
        'currency' => 'currency',
        'referrer' => 'referrer',
        'sales_discount' => 'salesDiscount',
        'sales_discount_net' => 'salesDiscountNet',
        'item_discount' => 'itemDiscount',
        'item_discount_net' => 'itemDiscountNet',
        'shipping_discount' => 'shippingDiscount',
        'shipping_discount_net' => 'shippingDiscountNet',
        'used_vat_fields' => 'usedVatFields',
        'rest_coupon_amount' => 'restCouponAmount',
        'checked_items' => 'checkedItems',
        'validate_params' => 'validateParams',
        'coupon_campaign_type' => 'couponCampaignType'];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'campaign_id' => 'setCampaignId',
        'validation_type' => 'setValidationType',
        'contact_id' => 'setContactId',
        'coupon_code' => 'setCouponCode',
        'currency' => 'setCurrency',
        'referrer' => 'setReferrer',
        'sales_discount' => 'setSalesDiscount',
        'sales_discount_net' => 'setSalesDiscountNet',
        'item_discount' => 'setItemDiscount',
        'item_discount_net' => 'setItemDiscountNet',
        'shipping_discount' => 'setShippingDiscount',
        'shipping_discount_net' => 'setShippingDiscountNet',
        'used_vat_fields' => 'setUsedVatFields',
        'rest_coupon_amount' => 'setRestCouponAmount',
        'checked_items' => 'setCheckedItems',
        'validate_params' => 'setValidateParams',
        'coupon_campaign_type' => 'setCouponCampaignType'];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'campaign_id' => 'getCampaignId',
        'validation_type' => 'getValidationType',
        'contact_id' => 'getContactId',
        'coupon_code' => 'getCouponCode',
        'currency' => 'getCurrency',
        'referrer' => 'getReferrer',
        'sales_discount' => 'getSalesDiscount',
        'sales_discount_net' => 'getSalesDiscountNet',
        'item_discount' => 'getItemDiscount',
        'item_discount_net' => 'getItemDiscountNet',
        'shipping_discount' => 'getShippingDiscount',
        'shipping_discount_net' => 'getShippingDiscountNet',
        'used_vat_fields' => 'getUsedVatFields',
        'rest_coupon_amount' => 'getRestCouponAmount',
        'checked_items' => 'getCheckedItems',
        'validate_params' => 'getValidateParams',
        'coupon_campaign_type' => 'getCouponCampaignType'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['campaign_id'] = isset($data['campaign_id']) ? $data['campaign_id'] : null;
        $this->container['validation_type'] = isset($data['validation_type']) ? $data['validation_type'] : null;
        $this->container['contact_id'] = isset($data['contact_id']) ? $data['contact_id'] : null;
        $this->container['coupon_code'] = isset($data['coupon_code']) ? $data['coupon_code'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['referrer'] = isset($data['referrer']) ? $data['referrer'] : null;
        $this->container['sales_discount'] = isset($data['sales_discount']) ? $data['sales_discount'] : null;
        $this->container['sales_discount_net'] = isset($data['sales_discount_net']) ? $data['sales_discount_net'] : null;
        $this->container['item_discount'] = isset($data['item_discount']) ? $data['item_discount'] : null;
        $this->container['item_discount_net'] = isset($data['item_discount_net']) ? $data['item_discount_net'] : null;
        $this->container['shipping_discount'] = isset($data['shipping_discount']) ? $data['shipping_discount'] : null;
        $this->container['shipping_discount_net'] = isset($data['shipping_discount_net']) ? $data['shipping_discount_net'] : null;
        $this->container['used_vat_fields'] = isset($data['used_vat_fields']) ? $data['used_vat_fields'] : null;
        $this->container['rest_coupon_amount'] = isset($data['rest_coupon_amount']) ? $data['rest_coupon_amount'] : null;
        $this->container['checked_items'] = isset($data['checked_items']) ? $data['checked_items'] : null;
        $this->container['validate_params'] = isset($data['validate_params']) ? $data['validate_params'] : null;
        $this->container['coupon_campaign_type'] = isset($data['coupon_campaign_type']) ? $data['coupon_campaign_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets campaign_id
     *
     * @return int
     */
    public function getCampaignId()
    {
        return $this->container['campaign_id'];
    }

    /**
     * Sets campaign_id
     *
     * @param int $campaign_id The ID of the campaign
     *
     * @return $this
     */
    public function setCampaignId($campaign_id)
    {
        $this->container['campaign_id'] = $campaign_id;

        return $this;
    }

    /**
     * Gets validation_type
     *
     * @return string
     */
    public function getValidationType()
    {
        return $this->container['validation_type'];
    }

    /**
     * Sets validation_type
     *
     * @param string $validation_type The type of the campaign. Currently the only type available is plentymarkets.
     *
     * @return $this
     */
    public function setValidationType($validation_type)
    {
        $this->container['validation_type'] = $validation_type;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return int
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param int $contact_id The ID of the contact that wants to redeem the coupon
     *
     * @return $this
     */
    public function setContactId($contact_id)
    {
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets coupon_code
     *
     * @return string
     */
    public function getCouponCode()
    {
        return $this->container['coupon_code'];
    }

    /**
     * Sets coupon_code
     *
     * @param string $coupon_code The coupon code
     *
     * @return $this
     */
    public function setCouponCode($coupon_code)
    {
        $this->container['coupon_code'] = $coupon_code;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency The currency of the purchase
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets referrer
     *
     * @return float
     */
    public function getReferrer()
    {
        return $this->container['referrer'];
    }

    /**
     * Sets referrer
     *
     * @param float $referrer The order referrer
     *
     * @return $this
     */
    public function setReferrer($referrer)
    {
        $this->container['referrer'] = $referrer;

        return $this;
    }

    /**
     * Gets sales_discount
     *
     * @return float
     */
    public function getSalesDiscount()
    {
        return $this->container['sales_discount'];
    }

    /**
     * Sets sales_discount
     *
     * @param float $sales_discount The total discount from a coupon applied to an order. The discount is given as gross amount.
     *
     * @return $this
     */
    public function setSalesDiscount($sales_discount)
    {
        $this->container['sales_discount'] = $sales_discount;

        return $this;
    }

    /**
     * Gets sales_discount_net
     *
     * @return float
     */
    public function getSalesDiscountNet()
    {
        return $this->container['sales_discount_net'];
    }

    /**
     * Sets sales_discount_net
     *
     * @param float $sales_discount_net The net discount from a coupon applied to an order. The net discount is the total discount minus the vat amount.
     *
     * @return $this
     */
    public function setSalesDiscountNet($sales_discount_net)
    {
        $this->container['sales_discount_net'] = $sales_discount_net;

        return $this;
    }

    /**
     * Gets item_discount
     *
     * @return float
     */
    public function getItemDiscount()
    {
        return $this->container['item_discount'];
    }

    /**
     * Sets item_discount
     *
     * @param float $item_discount The discount amount applied to items.
     *
     * @return $this
     */
    public function setItemDiscount($item_discount)
    {
        $this->container['item_discount'] = $item_discount;

        return $this;
    }

    /**
     * Gets item_discount_net
     *
     * @return float
     */
    public function getItemDiscountNet()
    {
        return $this->container['item_discount_net'];
    }

    /**
     * Sets item_discount_net
     *
     * @param float $item_discount_net The net discount applied to items.
     *
     * @return $this
     */
    public function setItemDiscountNet($item_discount_net)
    {
        $this->container['item_discount_net'] = $item_discount_net;

        return $this;
    }

    /**
     * Gets shipping_discount
     *
     * @return float
     */
    public function getShippingDiscount()
    {
        return $this->container['shipping_discount'];
    }

    /**
     * Sets shipping_discount
     *
     * @param float $shipping_discount The discount applied to shipping costs.
     *
     * @return $this
     */
    public function setShippingDiscount($shipping_discount)
    {
        $this->container['shipping_discount'] = $shipping_discount;

        return $this;
    }

    /**
     * Gets shipping_discount_net
     *
     * @return float
     */
    public function getShippingDiscountNet()
    {
        return $this->container['shipping_discount_net'];
    }

    /**
     * Sets shipping_discount_net
     *
     * @param float $shipping_discount_net The net discount applied to shipping costs.
     *
     * @return $this
     */
    public function setShippingDiscountNet($shipping_discount_net)
    {
        $this->container['shipping_discount_net'] = $shipping_discount_net;

        return $this;
    }

    /**
     * Gets used_vat_fields
     *
     * @return object[]
     */
    public function getUsedVatFields()
    {
        return $this->container['used_vat_fields'];
    }

    /**
     * Sets used_vat_fields
     *
     * @param object[] $used_vat_fields The vat fields used for the validation
     *
     * @return $this
     */
    public function setUsedVatFields($used_vat_fields)
    {
        $this->container['used_vat_fields'] = $used_vat_fields;

        return $this;
    }

    /**
     * Gets rest_coupon_amount
     *
     * @return float
     */
    public function getRestCouponAmount()
    {
        return $this->container['rest_coupon_amount'];
    }

    /**
     * Sets rest_coupon_amount
     *
     * @param float $rest_coupon_amount The remaining coupon amount
     *
     * @return $this
     */
    public function setRestCouponAmount($rest_coupon_amount)
    {
        $this->container['rest_coupon_amount'] = $rest_coupon_amount;

        return $this;
    }

    /**
     * Gets checked_items
     *
     * @return object[]
     */
    public function getCheckedItems()
    {
        return $this->container['checked_items'];
    }

    /**
     * Sets checked_items
     *
     * @param object[] $checked_items The list of variations that passed the validation
     *
     * @return $this
     */
    public function setCheckedItems($checked_items)
    {
        $this->container['checked_items'] = $checked_items;

        return $this;
    }

    /**
     * Gets validate_params
     *
     * @return object[]
     */
    public function getValidateParams()
    {
        return $this->container['validate_params'];
    }

    /**
     * Sets validate_params
     *
     * @param object[] $validate_params Validation parameters
     *
     * @return $this
     */
    public function setValidateParams($validate_params)
    {
        $this->container['validate_params'] = $validate_params;

        return $this;
    }

    /**
     * Gets coupon_campaign_type
     *
     * @return string
     */
    public function getCouponCampaignType()
    {
        return $this->container['coupon_campaign_type'];
    }

    /**
     * Sets coupon_campaign_type
     *
     * @param string $coupon_campaign_type The campaign type
     *
     * @return $this
     */
    public function setCouponCampaignType($coupon_campaign_type)
    {
        $this->container['coupon_campaign_type'] = $coupon_campaign_type;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

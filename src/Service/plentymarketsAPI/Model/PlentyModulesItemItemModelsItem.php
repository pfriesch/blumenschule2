<?php
/**
 * PlentyModulesItemItemModelsItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BSApp\Service\plentymarketsAPI\Model;

use \ArrayAccess;
use \BSApp\Service\plentymarketsAPI\ObjectSerializer;

/**
 * PlentyModulesItemItemModelsItem Class Doc Comment
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlentyModulesItemItemModelsItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Plenty\Modules\Item\Item\Models\Item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'position' => 'int',
'item_type' => 'string',
'stock_type' => 'int',
'store_special' => 'int',
'owner_id' => 'int',
'manufacturer_id' => 'int',
'producing_country_id' => 'int',
'main_variation_id' => 'int',
'customs_tariff_number' => 'string',
'revenue_account' => 'int',
'coupon_restriction' => 'int',
'condition' => 'int',
'condition_api' => 'int',
'created_at' => 'string',
'updated_at' => 'string',
'is_subscribable' => 'bool',
'is_serial_number' => 'bool',
'is_shipping_package' => 'bool',
'amazon_fba_platform' => 'int',
'is_shippable_by_amazon' => 'bool',
'amazon_product_type' => 'int',
'amazon_fedas' => 'string',
'ebay_preset_id' => 'int',
'ebay_category' => 'int',
'ebay_category2' => 'int',
'ebay_store_category' => 'int',
'ebay_store_category2' => 'int',
'rakuten_category_id' => 'int',
'flag_one' => 'int',
'flag_two' => 'int',
'age_restriction' => 'int',
'feedback' => 'int',
'free1' => 'string',
'free2' => 'string',
'free3' => 'string',
'free4' => 'string',
'free5' => 'string',
'free6' => 'string',
'free7' => 'string',
'free8' => 'string',
'free9' => 'string',
'free10' => 'string',
'free11' => 'string',
'free12' => 'string',
'free13' => 'string',
'free14' => 'string',
'free15' => 'string',
'free16' => 'string',
'free17' => 'string',
'free18' => 'string',
'free19' => 'string',
'free20' => 'string',
'maximum_order_quantity' => 'BigDecimal'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'position' => null,
'item_type' => null,
'stock_type' => null,
'store_special' => null,
'owner_id' => null,
'manufacturer_id' => null,
'producing_country_id' => null,
'main_variation_id' => null,
'customs_tariff_number' => null,
'revenue_account' => null,
'coupon_restriction' => null,
'condition' => null,
'condition_api' => null,
'created_at' => null,
'updated_at' => null,
'is_subscribable' => null,
'is_serial_number' => null,
'is_shipping_package' => null,
'amazon_fba_platform' => null,
'is_shippable_by_amazon' => null,
'amazon_product_type' => null,
'amazon_fedas' => null,
'ebay_preset_id' => null,
'ebay_category' => null,
'ebay_category2' => null,
'ebay_store_category' => null,
'ebay_store_category2' => null,
'rakuten_category_id' => null,
'flag_one' => null,
'flag_two' => null,
'age_restriction' => null,
'feedback' => null,
'free1' => null,
'free2' => null,
'free3' => null,
'free4' => null,
'free5' => null,
'free6' => null,
'free7' => null,
'free8' => null,
'free9' => null,
'free10' => null,
'free11' => null,
'free12' => null,
'free13' => null,
'free14' => null,
'free15' => null,
'free16' => null,
'free17' => null,
'free18' => null,
'free19' => null,
'free20' => null,
'maximum_order_quantity' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'position' => 'position',
'item_type' => 'itemType',
'stock_type' => 'stockType',
'store_special' => 'storeSpecial',
'owner_id' => 'ownerId',
'manufacturer_id' => 'manufacturerId',
'producing_country_id' => 'producingCountryId',
'main_variation_id' => 'mainVariationId',
'customs_tariff_number' => 'customsTariffNumber',
'revenue_account' => 'revenueAccount',
'coupon_restriction' => 'couponRestriction',
'condition' => 'condition',
'condition_api' => 'conditionApi',
'created_at' => 'createdAt',
'updated_at' => 'updatedAt',
'is_subscribable' => 'isSubscribable',
'is_serial_number' => 'isSerialNumber',
'is_shipping_package' => 'isShippingPackage',
'amazon_fba_platform' => 'amazonFbaPlatform',
'is_shippable_by_amazon' => 'isShippableByAmazon',
'amazon_product_type' => 'amazonProductType',
'amazon_fedas' => 'amazonFedas',
'ebay_preset_id' => 'ebayPresetId',
'ebay_category' => 'ebayCategory',
'ebay_category2' => 'ebayCategory2',
'ebay_store_category' => 'ebayStoreCategory',
'ebay_store_category2' => 'ebayStoreCategory2',
'rakuten_category_id' => 'rakutenCategoryId',
'flag_one' => 'flagOne',
'flag_two' => 'flagTwo',
'age_restriction' => 'ageRestriction',
'feedback' => 'feedback',
'free1' => 'free1',
'free2' => 'free2',
'free3' => 'free3',
'free4' => 'free4',
'free5' => 'free5',
'free6' => 'free6',
'free7' => 'free7',
'free8' => 'free8',
'free9' => 'free9',
'free10' => 'free10',
'free11' => 'free11',
'free12' => 'free12',
'free13' => 'free13',
'free14' => 'free14',
'free15' => 'free15',
'free16' => 'free16',
'free17' => 'free17',
'free18' => 'free18',
'free19' => 'free19',
'free20' => 'free20',
'maximum_order_quantity' => 'maximumOrderQuantity'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'position' => 'setPosition',
'item_type' => 'setItemType',
'stock_type' => 'setStockType',
'store_special' => 'setStoreSpecial',
'owner_id' => 'setOwnerId',
'manufacturer_id' => 'setManufacturerId',
'producing_country_id' => 'setProducingCountryId',
'main_variation_id' => 'setMainVariationId',
'customs_tariff_number' => 'setCustomsTariffNumber',
'revenue_account' => 'setRevenueAccount',
'coupon_restriction' => 'setCouponRestriction',
'condition' => 'setCondition',
'condition_api' => 'setConditionApi',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt',
'is_subscribable' => 'setIsSubscribable',
'is_serial_number' => 'setIsSerialNumber',
'is_shipping_package' => 'setIsShippingPackage',
'amazon_fba_platform' => 'setAmazonFbaPlatform',
'is_shippable_by_amazon' => 'setIsShippableByAmazon',
'amazon_product_type' => 'setAmazonProductType',
'amazon_fedas' => 'setAmazonFedas',
'ebay_preset_id' => 'setEbayPresetId',
'ebay_category' => 'setEbayCategory',
'ebay_category2' => 'setEbayCategory2',
'ebay_store_category' => 'setEbayStoreCategory',
'ebay_store_category2' => 'setEbayStoreCategory2',
'rakuten_category_id' => 'setRakutenCategoryId',
'flag_one' => 'setFlagOne',
'flag_two' => 'setFlagTwo',
'age_restriction' => 'setAgeRestriction',
'feedback' => 'setFeedback',
'free1' => 'setFree1',
'free2' => 'setFree2',
'free3' => 'setFree3',
'free4' => 'setFree4',
'free5' => 'setFree5',
'free6' => 'setFree6',
'free7' => 'setFree7',
'free8' => 'setFree8',
'free9' => 'setFree9',
'free10' => 'setFree10',
'free11' => 'setFree11',
'free12' => 'setFree12',
'free13' => 'setFree13',
'free14' => 'setFree14',
'free15' => 'setFree15',
'free16' => 'setFree16',
'free17' => 'setFree17',
'free18' => 'setFree18',
'free19' => 'setFree19',
'free20' => 'setFree20',
'maximum_order_quantity' => 'setMaximumOrderQuantity'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'position' => 'getPosition',
'item_type' => 'getItemType',
'stock_type' => 'getStockType',
'store_special' => 'getStoreSpecial',
'owner_id' => 'getOwnerId',
'manufacturer_id' => 'getManufacturerId',
'producing_country_id' => 'getProducingCountryId',
'main_variation_id' => 'getMainVariationId',
'customs_tariff_number' => 'getCustomsTariffNumber',
'revenue_account' => 'getRevenueAccount',
'coupon_restriction' => 'getCouponRestriction',
'condition' => 'getCondition',
'condition_api' => 'getConditionApi',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt',
'is_subscribable' => 'getIsSubscribable',
'is_serial_number' => 'getIsSerialNumber',
'is_shipping_package' => 'getIsShippingPackage',
'amazon_fba_platform' => 'getAmazonFbaPlatform',
'is_shippable_by_amazon' => 'getIsShippableByAmazon',
'amazon_product_type' => 'getAmazonProductType',
'amazon_fedas' => 'getAmazonFedas',
'ebay_preset_id' => 'getEbayPresetId',
'ebay_category' => 'getEbayCategory',
'ebay_category2' => 'getEbayCategory2',
'ebay_store_category' => 'getEbayStoreCategory',
'ebay_store_category2' => 'getEbayStoreCategory2',
'rakuten_category_id' => 'getRakutenCategoryId',
'flag_one' => 'getFlagOne',
'flag_two' => 'getFlagTwo',
'age_restriction' => 'getAgeRestriction',
'feedback' => 'getFeedback',
'free1' => 'getFree1',
'free2' => 'getFree2',
'free3' => 'getFree3',
'free4' => 'getFree4',
'free5' => 'getFree5',
'free6' => 'getFree6',
'free7' => 'getFree7',
'free8' => 'getFree8',
'free9' => 'getFree9',
'free10' => 'getFree10',
'free11' => 'getFree11',
'free12' => 'getFree12',
'free13' => 'getFree13',
'free14' => 'getFree14',
'free15' => 'getFree15',
'free16' => 'getFree16',
'free17' => 'getFree17',
'free18' => 'getFree18',
'free19' => 'getFree19',
'free20' => 'getFree20',
'maximum_order_quantity' => 'getMaximumOrderQuantity'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['item_type'] = isset($data['item_type']) ? $data['item_type'] : null;
        $this->container['stock_type'] = isset($data['stock_type']) ? $data['stock_type'] : null;
        $this->container['store_special'] = isset($data['store_special']) ? $data['store_special'] : null;
        $this->container['owner_id'] = isset($data['owner_id']) ? $data['owner_id'] : null;
        $this->container['manufacturer_id'] = isset($data['manufacturer_id']) ? $data['manufacturer_id'] : null;
        $this->container['producing_country_id'] = isset($data['producing_country_id']) ? $data['producing_country_id'] : null;
        $this->container['main_variation_id'] = isset($data['main_variation_id']) ? $data['main_variation_id'] : null;
        $this->container['customs_tariff_number'] = isset($data['customs_tariff_number']) ? $data['customs_tariff_number'] : null;
        $this->container['revenue_account'] = isset($data['revenue_account']) ? $data['revenue_account'] : null;
        $this->container['coupon_restriction'] = isset($data['coupon_restriction']) ? $data['coupon_restriction'] : null;
        $this->container['condition'] = isset($data['condition']) ? $data['condition'] : null;
        $this->container['condition_api'] = isset($data['condition_api']) ? $data['condition_api'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['is_subscribable'] = isset($data['is_subscribable']) ? $data['is_subscribable'] : null;
        $this->container['is_serial_number'] = isset($data['is_serial_number']) ? $data['is_serial_number'] : null;
        $this->container['is_shipping_package'] = isset($data['is_shipping_package']) ? $data['is_shipping_package'] : null;
        $this->container['amazon_fba_platform'] = isset($data['amazon_fba_platform']) ? $data['amazon_fba_platform'] : null;
        $this->container['is_shippable_by_amazon'] = isset($data['is_shippable_by_amazon']) ? $data['is_shippable_by_amazon'] : null;
        $this->container['amazon_product_type'] = isset($data['amazon_product_type']) ? $data['amazon_product_type'] : null;
        $this->container['amazon_fedas'] = isset($data['amazon_fedas']) ? $data['amazon_fedas'] : null;
        $this->container['ebay_preset_id'] = isset($data['ebay_preset_id']) ? $data['ebay_preset_id'] : null;
        $this->container['ebay_category'] = isset($data['ebay_category']) ? $data['ebay_category'] : null;
        $this->container['ebay_category2'] = isset($data['ebay_category2']) ? $data['ebay_category2'] : null;
        $this->container['ebay_store_category'] = isset($data['ebay_store_category']) ? $data['ebay_store_category'] : null;
        $this->container['ebay_store_category2'] = isset($data['ebay_store_category2']) ? $data['ebay_store_category2'] : null;
        $this->container['rakuten_category_id'] = isset($data['rakuten_category_id']) ? $data['rakuten_category_id'] : null;
        $this->container['flag_one'] = isset($data['flag_one']) ? $data['flag_one'] : null;
        $this->container['flag_two'] = isset($data['flag_two']) ? $data['flag_two'] : null;
        $this->container['age_restriction'] = isset($data['age_restriction']) ? $data['age_restriction'] : null;
        $this->container['feedback'] = isset($data['feedback']) ? $data['feedback'] : null;
        $this->container['free1'] = isset($data['free1']) ? $data['free1'] : null;
        $this->container['free2'] = isset($data['free2']) ? $data['free2'] : null;
        $this->container['free3'] = isset($data['free3']) ? $data['free3'] : null;
        $this->container['free4'] = isset($data['free4']) ? $data['free4'] : null;
        $this->container['free5'] = isset($data['free5']) ? $data['free5'] : null;
        $this->container['free6'] = isset($data['free6']) ? $data['free6'] : null;
        $this->container['free7'] = isset($data['free7']) ? $data['free7'] : null;
        $this->container['free8'] = isset($data['free8']) ? $data['free8'] : null;
        $this->container['free9'] = isset($data['free9']) ? $data['free9'] : null;
        $this->container['free10'] = isset($data['free10']) ? $data['free10'] : null;
        $this->container['free11'] = isset($data['free11']) ? $data['free11'] : null;
        $this->container['free12'] = isset($data['free12']) ? $data['free12'] : null;
        $this->container['free13'] = isset($data['free13']) ? $data['free13'] : null;
        $this->container['free14'] = isset($data['free14']) ? $data['free14'] : null;
        $this->container['free15'] = isset($data['free15']) ? $data['free15'] : null;
        $this->container['free16'] = isset($data['free16']) ? $data['free16'] : null;
        $this->container['free17'] = isset($data['free17']) ? $data['free17'] : null;
        $this->container['free18'] = isset($data['free18']) ? $data['free18'] : null;
        $this->container['free19'] = isset($data['free19']) ? $data['free19'] : null;
        $this->container['free20'] = isset($data['free20']) ? $data['free20'] : null;
        $this->container['maximum_order_quantity'] = isset($data['maximum_order_quantity']) ? $data['maximum_order_quantity'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the item. The ID must be unique.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int $position The position of the item
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets item_type
     *
     * @return string
     */
    public function getItemType()
    {
        return $this->container['item_type'];
    }

    /**
     * Sets item_type
     *
     * @param string $item_type The type of the item. Because Set items are managed using a separate route, this value is always Default.
     *
     * @return $this
     */
    public function setItemType($item_type)
    {
        $this->container['item_type'] = $item_type;

        return $this;
    }

    /**
     * Gets stock_type
     *
     * @return int
     */
    public function getStockType()
    {
        return $this->container['stock_type'];
    }

    /**
     * Sets stock_type
     *
     * @param int $stock_type The stock type of the item. Possible values:<ul><li>0 = Stocked item (default)</li><li>1 = Production item</li><li>2 = Colli</li><li>3 = Special order item</li></ul>
     *
     * @return $this
     */
    public function setStockType($stock_type)
    {
        $this->container['stock_type'] = $stock_type;

        return $this;
    }

    /**
     * Gets store_special
     *
     * @return int
     */
    public function getStoreSpecial()
    {
        return $this->container['store_special'];
    }

    /**
     * Sets store_special
     *
     * @param int $store_special Option to present items more prominently in the online store.<ul><li>1 = Special offer</li><li>2 = New items</li><li>3 = Top items</li></ul>
     *
     * @return $this
     */
    public function setStoreSpecial($store_special)
    {
        $this->container['store_special'] = $store_special;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return int
     */
    public function getOwnerId()
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param int $owner_id The plentymarkets user that is assigned as owner of this item.
     *
     * @return $this
     */
    public function setOwnerId($owner_id)
    {
        $this->container['owner_id'] = $owner_id;

        return $this;
    }

    /**
     * Gets manufacturer_id
     *
     * @return int
     */
    public function getManufacturerId()
    {
        return $this->container['manufacturer_id'];
    }

    /**
     * Sets manufacturer_id
     *
     * @param int $manufacturer_id The ID of the manufacturer of the item
     *
     * @return $this
     */
    public function setManufacturerId($manufacturer_id)
    {
        $this->container['manufacturer_id'] = $manufacturer_id;

        return $this;
    }

    /**
     * Gets producing_country_id
     *
     * @return int
     */
    public function getProducingCountryId()
    {
        return $this->container['producing_country_id'];
    }

    /**
     * Sets producing_country_id
     *
     * @param int $producing_country_id The ID of the country in which the item was manufactured.
     *
     * @return $this
     */
    public function setProducingCountryId($producing_country_id)
    {
        $this->container['producing_country_id'] = $producing_country_id;

        return $this;
    }

    /**
     * Gets main_variation_id
     *
     * @return int
     */
    public function getMainVariationId()
    {
        return $this->container['main_variation_id'];
    }

    /**
     * Sets main_variation_id
     *
     * @param int $main_variation_id The ID of the main variation of the item. The ID must be unique.
     *
     * @return $this
     */
    public function setMainVariationId($main_variation_id)
    {
        $this->container['main_variation_id'] = $main_variation_id;

        return $this;
    }

    /**
     * Gets customs_tariff_number
     *
     * @return string
     */
    public function getCustomsTariffNumber()
    {
        return $this->container['customs_tariff_number'];
    }

    /**
     * Sets customs_tariff_number
     *
     * @param string $customs_tariff_number The customs tariff number of the item; usually a 11 digit code number based on the Harmonised System
     *
     * @return $this
     */
    public function setCustomsTariffNumber($customs_tariff_number)
    {
        $this->container['customs_tariff_number'] = $customs_tariff_number;

        return $this;
    }

    /**
     * Gets revenue_account
     *
     * @return int
     */
    public function getRevenueAccount()
    {
        return $this->container['revenue_account'];
    }

    /**
     * Sets revenue_account
     *
     * @param int $revenue_account The revenue account the item is linked to. An individual revenue account can be saved for each item in plentymarkets. If this is not done, plentymarkets automatically determines a revenue account based on the VAT rate.
     *
     * @return $this
     */
    public function setRevenueAccount($revenue_account)
    {
        $this->container['revenue_account'] = $revenue_account;

        return $this;
    }

    /**
     * Gets coupon_restriction
     *
     * @return int
     */
    public function getCouponRestriction()
    {
        return $this->container['coupon_restriction'];
    }

    /**
     * Sets coupon_restriction
     *
     * @param int $coupon_restriction Indicates if the item can be purchased using a promotional coupon.<ul><li>0 = Permitted</li><li>1 = Not permitted</li><li>2 = Purchasable with coupon only</li></ul>
     *
     * @return $this
     */
    public function setCouponRestriction($coupon_restriction)
    {
        $this->container['coupon_restriction'] = $coupon_restriction;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return int
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param int $condition The condition of the item. Possible values:<ul><li>0 = New</li><li>1 = Used</li><li>2 = Boxed as new</li><li>3 = New with label</li><li>4 = Factory seconds</li></ul>
     *
     * @return $this
     */
    public function setCondition($condition)
    {
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets condition_api
     *
     * @return int
     */
    public function getConditionApi()
    {
        return $this->container['condition_api'];
    }

    /**
     * Sets condition_api
     *
     * @param int $condition_api The condition of the item that is transferred to markets via API.<ul><li>0 = New</li><li>1 = Used but as new</li><li>2 = Used but very good</li><li>3 = Used but good</li><li>4 = Used but acceptable</li><li>5 = Factory seconds</li></ul>
     *
     * @return $this
     */
    public function setConditionApi($condition_api)
    {
        $this->container['condition_api'] = $condition_api;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at Timestamp of the date and time the item was created.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at Timestamp of the last date and time the item was updated.
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets is_subscribable
     *
     * @return bool
     */
    public function getIsSubscribable()
    {
        return $this->container['is_subscribable'];
    }

    /**
     * Sets is_subscribable
     *
     * @param bool $is_subscribable Flag that indicates if the item can be ordered as a subscription item. If yes, the item can be ordered for delivery at regular intervals.
     *
     * @return $this
     */
    public function setIsSubscribable($is_subscribable)
    {
        $this->container['is_subscribable'] = $is_subscribable;

        return $this;
    }

    /**
     * Gets is_serial_number
     *
     * @return bool
     */
    public function getIsSerialNumber()
    {
        return $this->container['is_serial_number'];
    }

    /**
     * Sets is_serial_number
     *
     * @param bool $is_serial_number Flag that indicates if serial numbers are to be assigned to variations of this item to uniquely identify every item sold. Serial numbers ensure traceability of an item in case of errors or problems.
     *
     * @return $this
     */
    public function setIsSerialNumber($is_serial_number)
    {
        $this->container['is_serial_number'] = $is_serial_number;

        return $this;
    }

    /**
     * Gets is_shipping_package
     *
     * @return bool
     */
    public function getIsShippingPackage()
    {
        return $this->container['is_shipping_package'];
    }

    /**
     * Sets is_shipping_package
     *
     * @param bool $is_shipping_package Flag that indicates if a shipping package is to be used for this item. If yes and the variation's dimensions are entered in the <b>Settings</b> tab of a variation, the correct shipping package is assigned automatically.
     *
     * @return $this
     */
    public function setIsShippingPackage($is_shipping_package)
    {
        $this->container['is_shipping_package'] = $is_shipping_package;

        return $this;
    }

    /**
     * Gets amazon_fba_platform
     *
     * @return int
     */
    public function getAmazonFbaPlatform()
    {
        return $this->container['amazon_fba_platform'];
    }

    /**
     * Sets amazon_fba_platform
     *
     * @param int $amazon_fba_platform Indicates the platform used for Fulfilment by Amazon (FBA). <ul><li>0 = Do not use</li><li>1 = AMAZON EU (Europe)</li><li>2 = AMAZON FE (Far East)</li><li>3 = AMAZON NA (North America)</li></ul>
     *
     * @return $this
     */
    public function setAmazonFbaPlatform($amazon_fba_platform)
    {
        $this->container['amazon_fba_platform'] = $amazon_fba_platform;

        return $this;
    }

    /**
     * Gets is_shippable_by_amazon
     *
     * @return bool
     */
    public function getIsShippableByAmazon()
    {
        return $this->container['is_shippable_by_amazon'];
    }

    /**
     * Sets is_shippable_by_amazon
     *
     * @param bool $is_shippable_by_amazon Flag that indicates if the item can be shipped with Amazon Multi-Channel. Amazon Multi-Channel Fulfillment is a service for fulfilling orders from sales channels other than Amazon platforms using inventory stored in the Amazon fulfillment center.
     *
     * @return $this
     */
    public function setIsShippableByAmazon($is_shippable_by_amazon)
    {
        $this->container['is_shippable_by_amazon'] = $is_shippable_by_amazon;

        return $this;
    }

    /**
     * Gets amazon_product_type
     *
     * @return int
     */
    public function getAmazonProductType()
    {
        return $this->container['amazon_product_type'];
    }

    /**
     * Sets amazon_product_type
     *
     * @param int $amazon_product_type The Amazon product type of the item. List of IDs: https://www.plentymarkets.co.uk/manual/data-exchange/data-formats/item/
     *
     * @return $this
     */
    public function setAmazonProductType($amazon_product_type)
    {
        $this->container['amazon_product_type'] = $amazon_product_type;

        return $this;
    }

    /**
     * Gets amazon_fedas
     *
     * @return string
     */
    public function getAmazonFedas()
    {
        return $this->container['amazon_fedas'];
    }

    /**
     * Sets amazon_fedas
     *
     * @param string $amazon_fedas The FEDAS product classification key of the item.
     *
     * @return $this
     */
    public function setAmazonFedas($amazon_fedas)
    {
        $this->container['amazon_fedas'] = $amazon_fedas;

        return $this;
    }

    /**
     * Gets ebay_preset_id
     *
     * @return int
     */
    public function getEbayPresetId()
    {
        return $this->container['ebay_preset_id'];
    }

    /**
     * Sets ebay_preset_id
     *
     * @param int $ebay_preset_id The eBay preset ID. This plentymarkets ID must be specified to save values for $ebayCategory, $ebayCategory2, $ebayStoreCategory and $ebayStoreCategory2.
     *
     * @return $this
     */
    public function setEbayPresetId($ebay_preset_id)
    {
        $this->container['ebay_preset_id'] = $ebay_preset_id;

        return $this;
    }

    /**
     * Gets ebay_category
     *
     * @return int
     */
    public function getEbayCategory()
    {
        return $this->container['ebay_category'];
    }

    /**
     * Sets ebay_category
     *
     * @param int $ebay_category The eBay category 1 of the item. This category is used when a new listing is created.
     *
     * @return $this
     */
    public function setEbayCategory($ebay_category)
    {
        $this->container['ebay_category'] = $ebay_category;

        return $this;
    }

    /**
     * Gets ebay_category2
     *
     * @return int
     */
    public function getEbayCategory2()
    {
        return $this->container['ebay_category2'];
    }

    /**
     * Sets ebay_category2
     *
     * @param int $ebay_category2 The eBay category 2 of the item. This category is used when a new listing is created.
     *
     * @return $this
     */
    public function setEbayCategory2($ebay_category2)
    {
        $this->container['ebay_category2'] = $ebay_category2;

        return $this;
    }

    /**
     * Gets ebay_store_category
     *
     * @return int
     */
    public function getEbayStoreCategory()
    {
        return $this->container['ebay_store_category'];
    }

    /**
     * Sets ebay_store_category
     *
     * @param int $ebay_store_category The ID of the eBay store category 1 of the item. This value is used for new listings.
     *
     * @return $this
     */
    public function setEbayStoreCategory($ebay_store_category)
    {
        $this->container['ebay_store_category'] = $ebay_store_category;

        return $this;
    }

    /**
     * Gets ebay_store_category2
     *
     * @return int
     */
    public function getEbayStoreCategory2()
    {
        return $this->container['ebay_store_category2'];
    }

    /**
     * Sets ebay_store_category2
     *
     * @param int $ebay_store_category2 The ID of the eBay store category 2 of the item. This value is used for new listings.
     *
     * @return $this
     */
    public function setEbayStoreCategory2($ebay_store_category2)
    {
        $this->container['ebay_store_category2'] = $ebay_store_category2;

        return $this;
    }

    /**
     * Gets rakuten_category_id
     *
     * @return int
     */
    public function getRakutenCategoryId()
    {
        return $this->container['rakuten_category_id'];
    }

    /**
     * Sets rakuten_category_id
     *
     * @param int $rakuten_category_id The ID of the Rakuten category of this item.
     *
     * @return $this
     */
    public function setRakutenCategoryId($rakuten_category_id)
    {
        $this->container['rakuten_category_id'] = $rakuten_category_id;

        return $this;
    }

    /**
     * Gets flag_one
     *
     * @return int
     */
    public function getFlagOne()
    {
        return $this->container['flag_one'];
    }

    /**
     * Sets flag_one
     *
     * @param int $flag_one Flag 1 of the item. Flags can be used to organise and filter items. Each item can be assigned up to two flags. Possible values: 1 to 31, 0 = no flag
     *
     * @return $this
     */
    public function setFlagOne($flag_one)
    {
        $this->container['flag_one'] = $flag_one;

        return $this;
    }

    /**
     * Gets flag_two
     *
     * @return int
     */
    public function getFlagTwo()
    {
        return $this->container['flag_two'];
    }

    /**
     * Sets flag_two
     *
     * @param int $flag_two Flag 2 of the item. Flags can be used to organise and filter items. Each item can be assigned up to two flags. Possible values: 1 to 11, 0 = no flag
     *
     * @return $this
     */
    public function setFlagTwo($flag_two)
    {
        $this->container['flag_two'] = $flag_two;

        return $this;
    }

    /**
     * Gets age_restriction
     *
     * @return int
     */
    public function getAgeRestriction()
    {
        return $this->container['age_restriction'];
    }

    /**
     * Sets age_restriction
     *
     * @param int $age_restriction The age customers must be to purchase the item. Items with an age rating of 18+ must be linked to a shipping profile for which the PostIdent option is activated.<ul><li>0 = None available</li><li>3 = Released for ages 3 and up</li><li>6 = Ages 6 and up</li><li>9 = Ages 9 and up</li><li>12 = Ages 12 and up</li><li>14 = Ages 14 and up</li><li>16 = Ages 16 and up</li><li>18 = Ages 18 and up</li><li>50 = Not marked</li><li>88 = Not required</li><li>99 = Unknown</li></ul>
     *
     * @return $this
     */
    public function setAgeRestriction($age_restriction)
    {
        $this->container['age_restriction'] = $age_restriction;

        return $this;
    }

    /**
     * Gets feedback
     *
     * @return int
     */
    public function getFeedback()
    {
        return $this->container['feedback'];
    }

    /**
     * Sets feedback
     *
     * @param int $feedback The feedback, i.e. rating, that this item received. Possible values are 1 to 5 or 1 to 10 depending on the maximum rating setting. An initial feedback can be saved for items. The saved value will then be displayed as the initial feedback. Every time new feedback is submitted, the average value will be recalculated automatically.
     *
     * @return $this
     */
    public function setFeedback($feedback)
    {
        $this->container['feedback'] = $feedback;

        return $this;
    }

    /**
     * Gets free1
     *
     * @return string
     */
    public function getFree1()
    {
        return $this->container['free1'];
    }

    /**
     * Sets free1
     *
     * @param string $free1 The content of the free text field 1. This can be displayed in the online store or on eBay.
     *
     * @return $this
     */
    public function setFree1($free1)
    {
        $this->container['free1'] = $free1;

        return $this;
    }

    /**
     * Gets free2
     *
     * @return string
     */
    public function getFree2()
    {
        return $this->container['free2'];
    }

    /**
     * Sets free2
     *
     * @param string $free2 The content of the free text field 2. This can be displayed in the online store or on eBay.
     *
     * @return $this
     */
    public function setFree2($free2)
    {
        $this->container['free2'] = $free2;

        return $this;
    }

    /**
     * Gets free3
     *
     * @return string
     */
    public function getFree3()
    {
        return $this->container['free3'];
    }

    /**
     * Sets free3
     *
     * @param string $free3 The content of the free text field 3. This can be displayed in the online store or on eBay.
     *
     * @return $this
     */
    public function setFree3($free3)
    {
        $this->container['free3'] = $free3;

        return $this;
    }

    /**
     * Gets free4
     *
     * @return string
     */
    public function getFree4()
    {
        return $this->container['free4'];
    }

    /**
     * Sets free4
     *
     * @param string $free4 The content of the free text field 4. This can be displayed in the online store or on eBay.
     *
     * @return $this
     */
    public function setFree4($free4)
    {
        $this->container['free4'] = $free4;

        return $this;
    }

    /**
     * Gets free5
     *
     * @return string
     */
    public function getFree5()
    {
        return $this->container['free5'];
    }

    /**
     * Sets free5
     *
     * @param string $free5 The content of the free text field 5. This can be displayed in the online store or on eBay.
     *
     * @return $this
     */
    public function setFree5($free5)
    {
        $this->container['free5'] = $free5;

        return $this;
    }

    /**
     * Gets free6
     *
     * @return string
     */
    public function getFree6()
    {
        return $this->container['free6'];
    }

    /**
     * Sets free6
     *
     * @param string $free6 The content of the free text field 6. This can be displayed in the online store or on eBay.
     *
     * @return $this
     */
    public function setFree6($free6)
    {
        $this->container['free6'] = $free6;

        return $this;
    }

    /**
     * Gets free7
     *
     * @return string
     */
    public function getFree7()
    {
        return $this->container['free7'];
    }

    /**
     * Sets free7
     *
     * @param string $free7 The content of the free text field 7. This can be displayed in the online store or on eBay.
     *
     * @return $this
     */
    public function setFree7($free7)
    {
        $this->container['free7'] = $free7;

        return $this;
    }

    /**
     * Gets free8
     *
     * @return string
     */
    public function getFree8()
    {
        return $this->container['free8'];
    }

    /**
     * Sets free8
     *
     * @param string $free8 The content of the free text field 8. This can be displayed in the online store or on eBay.
     *
     * @return $this
     */
    public function setFree8($free8)
    {
        $this->container['free8'] = $free8;

        return $this;
    }

    /**
     * Gets free9
     *
     * @return string
     */
    public function getFree9()
    {
        return $this->container['free9'];
    }

    /**
     * Sets free9
     *
     * @param string $free9 The content of the free text field 9. This can be displayed in the online store or on eBay.
     *
     * @return $this
     */
    public function setFree9($free9)
    {
        $this->container['free9'] = $free9;

        return $this;
    }

    /**
     * Gets free10
     *
     * @return string
     */
    public function getFree10()
    {
        return $this->container['free10'];
    }

    /**
     * Sets free10
     *
     * @param string $free10 The content of the free text field 10. This can be displayed in the online store or on eBay.
     *
     * @return $this
     */
    public function setFree10($free10)
    {
        $this->container['free10'] = $free10;

        return $this;
    }

    /**
     * Gets free11
     *
     * @return string
     */
    public function getFree11()
    {
        return $this->container['free11'];
    }

    /**
     * Sets free11
     *
     * @param string $free11 The content of the free text field 11. This can be displayed in the online store or on eBay.
     *
     * @return $this
     */
    public function setFree11($free11)
    {
        $this->container['free11'] = $free11;

        return $this;
    }

    /**
     * Gets free12
     *
     * @return string
     */
    public function getFree12()
    {
        return $this->container['free12'];
    }

    /**
     * Sets free12
     *
     * @param string $free12 The content of the free text field 12. This can be displayed in the online store or on eBay.
     *
     * @return $this
     */
    public function setFree12($free12)
    {
        $this->container['free12'] = $free12;

        return $this;
    }

    /**
     * Gets free13
     *
     * @return string
     */
    public function getFree13()
    {
        return $this->container['free13'];
    }

    /**
     * Sets free13
     *
     * @param string $free13 The content of the free text field 13. This can be displayed in the online store or on eBay.
     *
     * @return $this
     */
    public function setFree13($free13)
    {
        $this->container['free13'] = $free13;

        return $this;
    }

    /**
     * Gets free14
     *
     * @return string
     */
    public function getFree14()
    {
        return $this->container['free14'];
    }

    /**
     * Sets free14
     *
     * @param string $free14 The content of the free text field 14. This can be displayed in the online store or on eBay.
     *
     * @return $this
     */
    public function setFree14($free14)
    {
        $this->container['free14'] = $free14;

        return $this;
    }

    /**
     * Gets free15
     *
     * @return string
     */
    public function getFree15()
    {
        return $this->container['free15'];
    }

    /**
     * Sets free15
     *
     * @param string $free15 The content of the free text field 15. This can be displayed in the online store or on eBay.
     *
     * @return $this
     */
    public function setFree15($free15)
    {
        $this->container['free15'] = $free15;

        return $this;
    }

    /**
     * Gets free16
     *
     * @return string
     */
    public function getFree16()
    {
        return $this->container['free16'];
    }

    /**
     * Sets free16
     *
     * @param string $free16 The content of the free text field 16. This can be displayed in the online store or on eBay.
     *
     * @return $this
     */
    public function setFree16($free16)
    {
        $this->container['free16'] = $free16;

        return $this;
    }

    /**
     * Gets free17
     *
     * @return string
     */
    public function getFree17()
    {
        return $this->container['free17'];
    }

    /**
     * Sets free17
     *
     * @param string $free17 The content of the free text field 17. This can be displayed in the online store or on eBay.
     *
     * @return $this
     */
    public function setFree17($free17)
    {
        $this->container['free17'] = $free17;

        return $this;
    }

    /**
     * Gets free18
     *
     * @return string
     */
    public function getFree18()
    {
        return $this->container['free18'];
    }

    /**
     * Sets free18
     *
     * @param string $free18 The content of the free text field 18. This can be displayed in the online store or on eBay.
     *
     * @return $this
     */
    public function setFree18($free18)
    {
        $this->container['free18'] = $free18;

        return $this;
    }

    /**
     * Gets free19
     *
     * @return string
     */
    public function getFree19()
    {
        return $this->container['free19'];
    }

    /**
     * Sets free19
     *
     * @param string $free19 The content of the free text field 19. This can be displayed in the online store or on eBay.
     *
     * @return $this
     */
    public function setFree19($free19)
    {
        $this->container['free19'] = $free19;

        return $this;
    }

    /**
     * Gets free20
     *
     * @return string
     */
    public function getFree20()
    {
        return $this->container['free20'];
    }

    /**
     * Sets free20
     *
     * @param string $free20 The content of the free text field 20. This can be displayed in the online store or on eBay.
     *
     * @return $this
     */
    public function setFree20($free20)
    {
        $this->container['free20'] = $free20;

        return $this;
    }

    /**
     * Gets maximum_order_quantity
     *
     * @return BigDecimal
     */
    public function getMaximumOrderQuantity()
    {
        return $this->container['maximum_order_quantity'];
    }

    /**
     * Sets maximum_order_quantity
     *
     * @param BigDecimal $maximum_order_quantity The maximum order quantity of an item permitted per order. If a maximum order quantity is specified, no more than this quantity of any combination of the variations of the item can be ordered. Decimal values are possible to allow orders by weight or length. Default value is 0. If value is 0, the maximum order quantity is unlimited.
     *
     * @return $this
     */
    public function setMaximumOrderQuantity($maximum_order_quantity)
    {
        $this->container['maximum_order_quantity'] = $maximum_order_quantity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

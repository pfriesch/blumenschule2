<?php
/**
 * PlentyModulesItemSetModelsItemSetConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BSApp\Service\plentymarketsAPI\Model;

use \ArrayAccess;
use \BSApp\Service\plentymarketsAPI\ObjectSerializer;

/**
 * PlentyModulesItemSetModelsItemSetConfig Class Doc Comment
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlentyModulesItemSetModelsItemSetConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'Plenty\Modules\ItemSet\Models\ItemSetConfig';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'set_id' => 'int',
        'rebate' => 'float',
        'min_price' => 'float',
        'max_price' => 'float',
        'is_purchasable' => 'int'];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'set_id' => null,
        'rebate' => null,
        'min_price' => null,
        'max_price' => null,
        'is_purchasable' => null];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'set_id' => 'setId',
        'rebate' => 'rebate',
        'min_price' => 'minPrice',
        'max_price' => 'maxPrice',
        'is_purchasable' => 'isPurchasable'];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'set_id' => 'setSetId',
        'rebate' => 'setRebate',
        'min_price' => 'setMinPrice',
        'max_price' => 'setMaxPrice',
        'is_purchasable' => 'setIsPurchasable'];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'set_id' => 'getSetId',
        'rebate' => 'getRebate',
        'min_price' => 'getMinPrice',
        'max_price' => 'getMaxPrice',
        'is_purchasable' => 'getIsPurchasable'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['set_id'] = isset($data['set_id']) ? $data['set_id'] : null;
        $this->container['rebate'] = isset($data['rebate']) ? $data['rebate'] : null;
        $this->container['min_price'] = isset($data['min_price']) ? $data['min_price'] : null;
        $this->container['max_price'] = isset($data['max_price']) ? $data['max_price'] : null;
        $this->container['is_purchasable'] = isset($data['is_purchasable']) ? $data['is_purchasable'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets set_id
     *
     * @return int
     */
    public function getSetId()
    {
        return $this->container['set_id'];
    }

    /**
     * Sets set_id
     *
     * @param int $set_id set id The item ID of the item set. The ID must be unique.
     *
     * @return $this
     */
    public function setSetId($set_id)
    {
        $this->container['set_id'] = $set_id;

        return $this;
    }

    /**
     * Gets rebate
     *
     * @return float
     */
    public function getRebate()
    {
        return $this->container['rebate'];
    }

    /**
     * Sets rebate
     *
     * @param float $rebate The discount in percent to be subtracted from the sum of the prices of the selected set components.
     *
     * @return $this
     */
    public function setRebate($rebate)
    {
        $this->container['rebate'] = $rebate;

        return $this;
    }

    /**
     * Gets min_price
     *
     * @return float
     */
    public function getMinPrice()
    {
        return $this->container['min_price'];
    }

    /**
     * Sets min_price
     *
     * @param float $min_price The minimum price of the sum of all components; read only
     *
     * @return $this
     */
    public function setMinPrice($min_price)
    {
        $this->container['min_price'] = $min_price;

        return $this;
    }

    /**
     * Gets max_price
     *
     * @return float
     */
    public function getMaxPrice()
    {
        return $this->container['max_price'];
    }

    /**
     * Sets max_price
     *
     * @param float $max_price the maximum price of the sum of all components; read only
     *
     * @return $this
     */
    public function setMaxPrice($max_price)
    {
        $this->container['max_price'] = $max_price;

        return $this;
    }

    /**
     * Gets is_purchasable
     *
     * @return int
     */
    public function getIsPurchasable()
    {
        return $this->container['is_purchasable'];
    }

    /**
     * Sets is_purchasable
     *
     * @param int $is_purchasable Flag that indicates if all components of the set have sufficient stock. Purchasability of a set depends on the component with the lowest stock.
     *
     * @return $this
     */
    public function setIsPurchasable($is_purchasable)
    {
        $this->container['is_purchasable'] = $is_purchasable;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

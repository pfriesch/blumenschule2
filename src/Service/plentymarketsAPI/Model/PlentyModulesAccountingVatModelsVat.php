<?php
/**
 * PlentyModulesAccountingVatModelsVat
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PlentyModulesAccountingVatModelsVat Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlentyModulesAccountingVatModelsVat implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Plenty\Modules\Accounting\Vat\Models\Vat';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'country_id' => 'int',
'tax_id_number' => 'string',
'started_at' => 'string',
'invalid_from' => 'string',
'location_id' => 'int',
'margin_scheme' => 'string',
'is_restricted_to_digital_items' => 'bool',
'is_standard' => 'bool',
'created_at' => 'string',
'updated_at' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'country_id' => null,
'tax_id_number' => null,
'started_at' => null,
'invalid_from' => null,
'location_id' => null,
'margin_scheme' => null,
'is_restricted_to_digital_items' => null,
'is_standard' => null,
'created_at' => null,
'updated_at' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'country_id' => 'countryId',
'tax_id_number' => 'taxIdNumber',
'started_at' => 'startedAt',
'invalid_from' => 'invalidFrom',
'location_id' => 'locationId',
'margin_scheme' => 'marginScheme',
'is_restricted_to_digital_items' => 'isRestrictedToDigitalItems',
'is_standard' => 'isStandard',
'created_at' => 'createdAt',
'updated_at' => 'updatedAt'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'country_id' => 'setCountryId',
'tax_id_number' => 'setTaxIdNumber',
'started_at' => 'setStartedAt',
'invalid_from' => 'setInvalidFrom',
'location_id' => 'setLocationId',
'margin_scheme' => 'setMarginScheme',
'is_restricted_to_digital_items' => 'setIsRestrictedToDigitalItems',
'is_standard' => 'setIsStandard',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'country_id' => 'getCountryId',
'tax_id_number' => 'getTaxIdNumber',
'started_at' => 'getStartedAt',
'invalid_from' => 'getInvalidFrom',
'location_id' => 'getLocationId',
'margin_scheme' => 'getMarginScheme',
'is_restricted_to_digital_items' => 'getIsRestrictedToDigitalItems',
'is_standard' => 'getIsStandard',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['country_id'] = isset($data['country_id']) ? $data['country_id'] : null;
        $this->container['tax_id_number'] = isset($data['tax_id_number']) ? $data['tax_id_number'] : null;
        $this->container['started_at'] = isset($data['started_at']) ? $data['started_at'] : null;
        $this->container['invalid_from'] = isset($data['invalid_from']) ? $data['invalid_from'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['margin_scheme'] = isset($data['margin_scheme']) ? $data['margin_scheme'] : null;
        $this->container['is_restricted_to_digital_items'] = isset($data['is_restricted_to_digital_items']) ? $data['is_restricted_to_digital_items'] : null;
        $this->container['is_standard'] = isset($data['is_standard']) ? $data['is_standard'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the VAT configuration. A VAT configuration includes 4 VAT rates
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return int
     */
    public function getCountryId()
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param int $country_id The ID of the country that the VAT configuration belongs to
     *
     * @return $this
     */
    public function setCountryId($country_id)
    {
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets tax_id_number
     *
     * @return string
     */
    public function getTaxIdNumber()
    {
        return $this->container['tax_id_number'];
    }

    /**
     * Sets tax_id_number
     *
     * @param string $tax_id_number The tax id number of VAT configuration.
     *
     * @return $this
     */
    public function setTaxIdNumber($tax_id_number)
    {
        $this->container['tax_id_number'] = $tax_id_number;

        return $this;
    }

    /**
     * Gets started_at
     *
     * @return string
     */
    public function getStartedAt()
    {
        return $this->container['started_at'];
    }

    /**
     * Sets started_at
     *
     * @param string $started_at The date when the VAT configuration went into effect
     *
     * @return $this
     */
    public function setStartedAt($started_at)
    {
        $this->container['started_at'] = $started_at;

        return $this;
    }

    /**
     * Gets invalid_from
     *
     * @return string
     */
    public function getInvalidFrom()
    {
        return $this->container['invalid_from'];
    }

    /**
     * Sets invalid_from
     *
     * @param string $invalid_from The date when the VAT configuration should not be used any more
     *
     * @return $this
     */
    public function setInvalidFrom($invalid_from)
    {
        $this->container['invalid_from'] = $invalid_from;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int $location_id The ID of the location
     *
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets margin_scheme
     *
     * @return string
     */
    public function getMarginScheme()
    {
        return $this->container['margin_scheme'];
    }

    /**
     * Sets margin_scheme
     *
     * @param string $margin_scheme Specifies the tax rate that is used, when the margin scheme is applied. Available values: 'none', 'vat1', 'vat2', 'vat3', 'vat4'.
     *
     * @return $this
     */
    public function setMarginScheme($margin_scheme)
    {
        $this->container['margin_scheme'] = $margin_scheme;

        return $this;
    }

    /**
     * Gets is_restricted_to_digital_items
     *
     * @return bool
     */
    public function getIsRestrictedToDigitalItems()
    {
        return $this->container['is_restricted_to_digital_items'];
    }

    /**
     * Sets is_restricted_to_digital_items
     *
     * @param bool $is_restricted_to_digital_items Flag that indicates if the VAT configuration is used only applied to digital goods or not. True= The VAT set is only applied to digital goods. False = The VAT set is applied to all types of goods.
     *
     * @return $this
     */
    public function setIsRestrictedToDigitalItems($is_restricted_to_digital_items)
    {
        $this->container['is_restricted_to_digital_items'] = $is_restricted_to_digital_items;

        return $this;
    }

    /**
     * Gets is_standard
     *
     * @return bool
     */
    public function getIsStandard()
    {
        return $this->container['is_standard'];
    }

    /**
     * Sets is_standard
     *
     * @param bool $is_standard Flag that indicates if the VAT configuration is the standard VAT configuration for the location
     *
     * @return $this
     */
    public function setIsStandard($is_standard)
    {
        $this->container['is_standard'] = $is_standard;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at The date at which the VAT configuration was created.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at The date that the VAT configuration was last updated.
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

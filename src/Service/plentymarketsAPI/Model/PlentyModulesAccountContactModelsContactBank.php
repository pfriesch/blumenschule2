<?php
/**
 * PlentyModulesAccountContactModelsContactBank
 *
 * PHP version 5
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BSApp\Service\plentymarketsAPI\Model;

use \ArrayAccess;
use \BSApp\Service\plentymarketsAPI\ObjectSerializer;

/**
 * PlentyModulesAccountContactModelsContactBank Class Doc Comment
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlentyModulesAccountContactModelsContactBank implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'Plenty\Modules\Account\Contact\Models\ContactBank';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'id' => 'int',
        'contact_id' => 'int',
        'order_id' => 'int',
        'account_owner' => 'string',
        'bank_name' => 'string',
        'bank_address' => 'string',
        'bank_postal_code_town' => 'string',
        'bank_country' => 'string',
        'iban' => 'string',
        'bic' => 'string',
        'account_number' => 'string',
        'sort_code' => 'string',
        'last_update_by' => 'string',
        'direct_debit_mandate_available' => 'int',
        'direct_debit_mandate_at' => 'string',
        'direct_debit_method' => 'string',
        'direct_debit_type' => 'string',
        'payment_method' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string'];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'id' => null,
        'contact_id' => null,
        'order_id' => null,
        'account_owner' => null,
        'bank_name' => null,
        'bank_address' => null,
        'bank_postal_code_town' => null,
        'bank_country' => null,
        'iban' => null,
        'bic' => null,
        'account_number' => null,
        'sort_code' => null,
        'last_update_by' => null,
        'direct_debit_mandate_available' => null,
        'direct_debit_mandate_at' => null,
        'direct_debit_method' => null,
        'direct_debit_type' => null,
        'payment_method' => null,
        'created_at' => null,
        'updated_at' => null];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'contact_id' => 'contactId',
        'order_id' => 'orderId',
        'account_owner' => 'accountOwner',
        'bank_name' => 'bankName',
        'bank_address' => 'bankAddress',
        'bank_postal_code_town' => 'bankPostalCodeTown',
        'bank_country' => 'bankCountry',
        'iban' => 'iban',
        'bic' => 'bic',
        'account_number' => 'accountNumber',
        'sort_code' => 'sortCode',
        'last_update_by' => 'lastUpdateBy',
        'direct_debit_mandate_available' => 'directDebitMandateAvailable',
        'direct_debit_mandate_at' => 'directDebitMandateAt',
        'direct_debit_method' => 'directDebitMethod',
        'direct_debit_type' => 'directDebitType',
        'payment_method' => 'paymentMethod',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt'];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'contact_id' => 'setContactId',
        'order_id' => 'setOrderId',
        'account_owner' => 'setAccountOwner',
        'bank_name' => 'setBankName',
        'bank_address' => 'setBankAddress',
        'bank_postal_code_town' => 'setBankPostalCodeTown',
        'bank_country' => 'setBankCountry',
        'iban' => 'setIban',
        'bic' => 'setBic',
        'account_number' => 'setAccountNumber',
        'sort_code' => 'setSortCode',
        'last_update_by' => 'setLastUpdateBy',
        'direct_debit_mandate_available' => 'setDirectDebitMandateAvailable',
        'direct_debit_mandate_at' => 'setDirectDebitMandateAt',
        'direct_debit_method' => 'setDirectDebitMethod',
        'direct_debit_type' => 'setDirectDebitType',
        'payment_method' => 'setPaymentMethod',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'contact_id' => 'getContactId',
        'order_id' => 'getOrderId',
        'account_owner' => 'getAccountOwner',
        'bank_name' => 'getBankName',
        'bank_address' => 'getBankAddress',
        'bank_postal_code_town' => 'getBankPostalCodeTown',
        'bank_country' => 'getBankCountry',
        'iban' => 'getIban',
        'bic' => 'getBic',
        'account_number' => 'getAccountNumber',
        'sort_code' => 'getSortCode',
        'last_update_by' => 'getLastUpdateBy',
        'direct_debit_mandate_available' => 'getDirectDebitMandateAvailable',
        'direct_debit_mandate_at' => 'getDirectDebitMandateAt',
        'direct_debit_method' => 'getDirectDebitMethod',
        'direct_debit_type' => 'getDirectDebitType',
        'payment_method' => 'getPaymentMethod',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['contact_id'] = isset($data['contact_id']) ? $data['contact_id'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['account_owner'] = isset($data['account_owner']) ? $data['account_owner'] : null;
        $this->container['bank_name'] = isset($data['bank_name']) ? $data['bank_name'] : null;
        $this->container['bank_address'] = isset($data['bank_address']) ? $data['bank_address'] : null;
        $this->container['bank_postal_code_town'] = isset($data['bank_postal_code_town']) ? $data['bank_postal_code_town'] : null;
        $this->container['bank_country'] = isset($data['bank_country']) ? $data['bank_country'] : null;
        $this->container['iban'] = isset($data['iban']) ? $data['iban'] : null;
        $this->container['bic'] = isset($data['bic']) ? $data['bic'] : null;
        $this->container['account_number'] = isset($data['account_number']) ? $data['account_number'] : null;
        $this->container['sort_code'] = isset($data['sort_code']) ? $data['sort_code'] : null;
        $this->container['last_update_by'] = isset($data['last_update_by']) ? $data['last_update_by'] : null;
        $this->container['direct_debit_mandate_available'] = isset($data['direct_debit_mandate_available']) ? $data['direct_debit_mandate_available'] : null;
        $this->container['direct_debit_mandate_at'] = isset($data['direct_debit_mandate_at']) ? $data['direct_debit_mandate_at'] : null;
        $this->container['direct_debit_method'] = isset($data['direct_debit_method']) ? $data['direct_debit_method'] : null;
        $this->container['direct_debit_type'] = isset($data['direct_debit_type']) ? $data['direct_debit_type'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the bank account
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return int
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param int $contact_id The ID of the contact the bank account belongs to
     *
     * @return $this
     */
    public function setContactId($contact_id)
    {
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int $order_id The ID of the order the bank account belongs to
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets account_owner
     *
     * @return string
     */
    public function getAccountOwner()
    {
        return $this->container['account_owner'];
    }

    /**
     * Sets account_owner
     *
     * @param string $account_owner The owner of the bank account
     *
     * @return $this
     */
    public function setAccountOwner($account_owner)
    {
        $this->container['account_owner'] = $account_owner;

        return $this;
    }

    /**
     * Gets bank_name
     *
     * @return string
     */
    public function getBankName()
    {
        return $this->container['bank_name'];
    }

    /**
     * Sets bank_name
     *
     * @param string $bank_name The name of the bank
     *
     * @return $this
     */
    public function setBankName($bank_name)
    {
        $this->container['bank_name'] = $bank_name;

        return $this;
    }

    /**
     * Gets bank_address
     *
     * @return string
     */
    public function getBankAddress()
    {
        return $this->container['bank_address'];
    }

    /**
     * Sets bank_address
     *
     * @param string $bank_address The address of the bank
     *
     * @return $this
     */
    public function setBankAddress($bank_address)
    {
        $this->container['bank_address'] = $bank_address;

        return $this;
    }

    /**
     * Gets bank_postal_code_town
     *
     * @return string
     */
    public function getBankPostalCodeTown()
    {
        return $this->container['bank_postal_code_town'];
    }

    /**
     * Sets bank_postal_code_town
     *
     * @param string $bank_postal_code_town The postcode and town of the bank
     *
     * @return $this
     */
    public function setBankPostalCodeTown($bank_postal_code_town)
    {
        $this->container['bank_postal_code_town'] = $bank_postal_code_town;

        return $this;
    }

    /**
     * Gets bank_country
     *
     * @return string
     */
    public function getBankCountry()
    {
        return $this->container['bank_country'];
    }

    /**
     * Sets bank_country
     *
     * @param string $bank_country The country of the bank
     *
     * @return $this
     */
    public function setBankCountry($bank_country)
    {
        $this->container['bank_country'] = $bank_country;

        return $this;
    }

    /**
     * Gets iban
     *
     * @return string
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string $iban The IBAN of the bank account
     *
     * @return $this
     */
    public function setIban($iban)
    {
        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets bic
     *
     * @return string
     */
    public function getBic()
    {
        return $this->container['bic'];
    }

    /**
     * Sets bic
     *
     * @param string $bic The BIC of the bank account
     *
     * @return $this
     */
    public function setBic($bic)
    {
        $this->container['bic'] = $bic;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string $account_number The account number of the bank account
     *
     * @return $this
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets sort_code
     *
     * @return string
     */
    public function getSortCode()
    {
        return $this->container['sort_code'];
    }

    /**
     * Sets sort_code
     *
     * @param string $sort_code The sort code of the bank account
     *
     * @return $this
     */
    public function setSortCode($sort_code)
    {
        $this->container['sort_code'] = $sort_code;

        return $this;
    }

    /**
     * Gets last_update_by
     *
     * @return string
     */
    public function getLastUpdateBy()
    {
        return $this->container['last_update_by'];
    }

    /**
     * Sets last_update_by
     *
     * @param string $last_update_by The source of the last change (possible values: `customer`, `backend`, `import`)
     *
     * @return $this
     */
    public function setLastUpdateBy($last_update_by)
    {
        $this->container['last_update_by'] = $last_update_by;

        return $this;
    }

    /**
     * Gets direct_debit_mandate_available
     *
     * @return int
     */
    public function getDirectDebitMandateAvailable()
    {
        return $this->container['direct_debit_mandate_available'];
    }

    /**
     * Sets direct_debit_mandate_available
     *
     * @param int $direct_debit_mandate_available Flag that indicates if a direct debit mandate is available
     *
     * @return $this
     */
    public function setDirectDebitMandateAvailable($direct_debit_mandate_available)
    {
        $this->container['direct_debit_mandate_available'] = $direct_debit_mandate_available;

        return $this;
    }

    /**
     * Gets direct_debit_mandate_at
     *
     * @return string
     */
    public function getDirectDebitMandateAt()
    {
        return $this->container['direct_debit_mandate_at'];
    }

    /**
     * Sets direct_debit_mandate_at
     *
     * @param string $direct_debit_mandate_at The time the direct debit mandate was created as unix timestamp
     *
     * @return $this
     */
    public function setDirectDebitMandateAt($direct_debit_mandate_at)
    {
        $this->container['direct_debit_mandate_at'] = $direct_debit_mandate_at;

        return $this;
    }

    /**
     * Gets direct_debit_method
     *
     * @return string
     */
    public function getDirectDebitMethod()
    {
        return $this->container['direct_debit_method'];
    }

    /**
     * Sets direct_debit_method
     *
     * @param string $direct_debit_method The direct debit method (possible values: `sepaDirectDebit`, `sepaB2bDirectDebit`)
     *
     * @return $this
     */
    public function setDirectDebitMethod($direct_debit_method)
    {
        $this->container['direct_debit_method'] = $direct_debit_method;

        return $this;
    }

    /**
     * Gets direct_debit_type
     *
     * @return string
     */
    public function getDirectDebitType()
    {
        return $this->container['direct_debit_type'];
    }

    /**
     * Sets direct_debit_type
     *
     * @param string $direct_debit_type The direct debit type (possible values: `first`, `next`)
     *
     * @return $this
     */
    public function setDirectDebitType($direct_debit_type)
    {
        $this->container['direct_debit_type'] = $direct_debit_type;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string $payment_method The payment method (possible values: `recurrent`, `onOff`)
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at The time the bank account was created as  unix timestamp
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at The time the bank account was last updated as  unix timestamp
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

<?php
/**
 * PlentyModulesItemVariationSupplierModelsVariationSupplier
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PlentyModulesItemVariationSupplierModelsVariationSupplier Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlentyModulesItemVariationSupplierModelsVariationSupplier implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Plenty\Modules\Item\VariationSupplier\Models\VariationSupplier';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'variation_id' => 'int',
'supplier_id' => 'int',
'purchase_price' => 'BigDecimal',
'minimum_purchase' => 'int',
'item_number' => 'string',
'last_price_query' => 'string',
'delivery_time_in_days' => 'int',
'discount' => 'BigDecimal',
'is_discountable' => 'string',
'packaging_unit' => 'BigDecimal',
'last_update_timestamp' => 'string',
'created_at' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'variation_id' => null,
'supplier_id' => null,
'purchase_price' => null,
'minimum_purchase' => null,
'item_number' => null,
'last_price_query' => null,
'delivery_time_in_days' => null,
'discount' => null,
'is_discountable' => null,
'packaging_unit' => null,
'last_update_timestamp' => null,
'created_at' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'variation_id' => 'variationId',
'supplier_id' => 'supplierId',
'purchase_price' => 'purchasePrice',
'minimum_purchase' => 'minimumPurchase',
'item_number' => 'itemNumber',
'last_price_query' => 'lastPriceQuery',
'delivery_time_in_days' => 'deliveryTimeInDays',
'discount' => 'discount',
'is_discountable' => 'isDiscountable',
'packaging_unit' => 'packagingUnit',
'last_update_timestamp' => 'lastUpdateTimestamp',
'created_at' => 'createdAt'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'variation_id' => 'setVariationId',
'supplier_id' => 'setSupplierId',
'purchase_price' => 'setPurchasePrice',
'minimum_purchase' => 'setMinimumPurchase',
'item_number' => 'setItemNumber',
'last_price_query' => 'setLastPriceQuery',
'delivery_time_in_days' => 'setDeliveryTimeInDays',
'discount' => 'setDiscount',
'is_discountable' => 'setIsDiscountable',
'packaging_unit' => 'setPackagingUnit',
'last_update_timestamp' => 'setLastUpdateTimestamp',
'created_at' => 'setCreatedAt'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'variation_id' => 'getVariationId',
'supplier_id' => 'getSupplierId',
'purchase_price' => 'getPurchasePrice',
'minimum_purchase' => 'getMinimumPurchase',
'item_number' => 'getItemNumber',
'last_price_query' => 'getLastPriceQuery',
'delivery_time_in_days' => 'getDeliveryTimeInDays',
'discount' => 'getDiscount',
'is_discountable' => 'getIsDiscountable',
'packaging_unit' => 'getPackagingUnit',
'last_update_timestamp' => 'getLastUpdateTimestamp',
'created_at' => 'getCreatedAt'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['variation_id'] = isset($data['variation_id']) ? $data['variation_id'] : null;
        $this->container['supplier_id'] = isset($data['supplier_id']) ? $data['supplier_id'] : null;
        $this->container['purchase_price'] = isset($data['purchase_price']) ? $data['purchase_price'] : null;
        $this->container['minimum_purchase'] = isset($data['minimum_purchase']) ? $data['minimum_purchase'] : null;
        $this->container['item_number'] = isset($data['item_number']) ? $data['item_number'] : null;
        $this->container['last_price_query'] = isset($data['last_price_query']) ? $data['last_price_query'] : null;
        $this->container['delivery_time_in_days'] = isset($data['delivery_time_in_days']) ? $data['delivery_time_in_days'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['is_discountable'] = isset($data['is_discountable']) ? $data['is_discountable'] : null;
        $this->container['packaging_unit'] = isset($data['packaging_unit']) ? $data['packaging_unit'] : null;
        $this->container['last_update_timestamp'] = isset($data['last_update_timestamp']) ? $data['last_update_timestamp'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique ID of the link between variation and supplier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets variation_id
     *
     * @return int
     */
    public function getVariationId()
    {
        return $this->container['variation_id'];
    }

    /**
     * Sets variation_id
     *
     * @param int $variation_id The unique ID of the variation
     *
     * @return $this
     */
    public function setVariationId($variation_id)
    {
        $this->container['variation_id'] = $variation_id;

        return $this;
    }

    /**
     * Gets supplier_id
     *
     * @return int
     */
    public function getSupplierId()
    {
        return $this->container['supplier_id'];
    }

    /**
     * Sets supplier_id
     *
     * @param int $supplier_id The unique ID of the supplier
     *
     * @return $this
     */
    public function setSupplierId($supplier_id)
    {
        $this->container['supplier_id'] = $supplier_id;

        return $this;
    }

    /**
     * Gets purchase_price
     *
     * @return BigDecimal
     */
    public function getPurchasePrice()
    {
        return $this->container['purchase_price'];
    }

    /**
     * Sets purchase_price
     *
     * @param BigDecimal $purchase_price The price at which the variation was purchased from this supplier.
     *
     * @return $this
     */
    public function setPurchasePrice($purchase_price)
    {
        $this->container['purchase_price'] = $purchase_price;

        return $this;
    }

    /**
     * Gets minimum_purchase
     *
     * @return int
     */
    public function getMinimumPurchase()
    {
        return $this->container['minimum_purchase'];
    }

    /**
     * Sets minimum_purchase
     *
     * @param int $minimum_purchase The minimum quantity of the variation that has to be ordered from the supplier. This value is also used as a quantity suggestion when creating reorders.
     *
     * @return $this
     */
    public function setMinimumPurchase($minimum_purchase)
    {
        $this->container['minimum_purchase'] = $minimum_purchase;

        return $this;
    }

    /**
     * Gets item_number
     *
     * @return string
     */
    public function getItemNumber()
    {
        return $this->container['item_number'];
    }

    /**
     * Sets item_number
     *
     * @param string $item_number The external item number assigned to the variation by this supplier
     *
     * @return $this
     */
    public function setItemNumber($item_number)
    {
        $this->container['item_number'] = $item_number;

        return $this;
    }

    /**
     * Gets last_price_query
     *
     * @return string
     */
    public function getLastPriceQuery()
    {
        return $this->container['last_price_query'];
    }

    /**
     * Sets last_price_query
     *
     * @param string $last_price_query The date of the last price query to this supplier. This helps to plan price negotiations.
     *
     * @return $this
     */
    public function setLastPriceQuery($last_price_query)
    {
        $this->container['last_price_query'] = $last_price_query;

        return $this;
    }

    /**
     * Gets delivery_time_in_days
     *
     * @return int
     */
    public function getDeliveryTimeInDays()
    {
        return $this->container['delivery_time_in_days'];
    }

    /**
     * Sets delivery_time_in_days
     *
     * @param int $delivery_time_in_days The delivery time in days for the variation saved for this supplier
     *
     * @return $this
     */
    public function setDeliveryTimeInDays($delivery_time_in_days)
    {
        $this->container['delivery_time_in_days'] = $delivery_time_in_days;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return BigDecimal
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param BigDecimal $discount The discount in percent the supplier grants for the variation.
     *
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets is_discountable
     *
     * @return string
     */
    public function getIsDiscountable()
    {
        return $this->container['is_discountable'];
    }

    /**
     * Sets is_discountable
     *
     * @param string $is_discountable Flag that indicates if the supplier's discount for this variation is active.
     *
     * @return $this
     */
    public function setIsDiscountable($is_discountable)
    {
        $this->container['is_discountable'] = $is_discountable;

        return $this;
    }

    /**
     * Gets packaging_unit
     *
     * @return BigDecimal
     */
    public function getPackagingUnit()
    {
        return $this->container['packaging_unit'];
    }

    /**
     * Sets packaging_unit
     *
     * @param BigDecimal $packaging_unit The packaging unit of the supplier if it differs from the packaging unit settings in plentymarkets.
     *
     * @return $this
     */
    public function setPackagingUnit($packaging_unit)
    {
        $this->container['packaging_unit'] = $packaging_unit;

        return $this;
    }

    /**
     * Gets last_update_timestamp
     *
     * @return string
     */
    public function getLastUpdateTimestamp()
    {
        return $this->container['last_update_timestamp'];
    }

    /**
     * Sets last_update_timestamp
     *
     * @param string $last_update_timestamp The time the supplier data was last updated
     *
     * @return $this
     */
    public function setLastUpdateTimestamp($last_update_timestamp)
    {
        $this->container['last_update_timestamp'] = $last_update_timestamp;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at The time the supplier data was created
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

<?php
/**
 * PlentyModulesFulfillmentPicklistModelsPickingOrderItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BSApp\Service\plentymarketsAPI\Model;

use \ArrayAccess;
use \BSApp\Service\plentymarketsAPI\ObjectSerializer;

/**
 * PlentyModulesFulfillmentPicklistModelsPickingOrderItem Class Doc Comment
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlentyModulesFulfillmentPicklistModelsPickingOrderItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'Plenty\Modules\Fulfillment\Picklist\Models\PickingOrderItem';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'id' => 'int',
        'picking_order_id' => 'int',
        'order_item_id' => 'int',
        'process_state' => 'string',
        'process_date' => 'string',
        'process_user_id' => 'int',
        'comment' => 'string',
        'quantity' => 'BigDecimal',
        'item_id' => 'int',
        'holding_area' => 'int',
        'warehouse_id' => 'int',
        'order_id_list' => 'string'];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'id' => null,
        'picking_order_id' => null,
        'order_item_id' => null,
        'process_state' => null,
        'process_date' => null,
        'process_user_id' => null,
        'comment' => null,
        'quantity' => null,
        'item_id' => null,
        'holding_area' => null,
        'warehouse_id' => null,
        'order_id_list' => null];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'picking_order_id' => 'pickingOrderId',
        'order_item_id' => 'orderItemId',
        'process_state' => 'processState',
        'process_date' => 'processDate',
        'process_user_id' => 'processUserId',
        'comment' => 'comment',
        'quantity' => 'quantity',
        'item_id' => 'itemId',
        'holding_area' => 'holdingArea',
        'warehouse_id' => 'warehouseId',
        'order_id_list' => 'orderIdList'];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'picking_order_id' => 'setPickingOrderId',
        'order_item_id' => 'setOrderItemId',
        'process_state' => 'setProcessState',
        'process_date' => 'setProcessDate',
        'process_user_id' => 'setProcessUserId',
        'comment' => 'setComment',
        'quantity' => 'setQuantity',
        'item_id' => 'setItemId',
        'holding_area' => 'setHoldingArea',
        'warehouse_id' => 'setWarehouseId',
        'order_id_list' => 'setOrderIdList'];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'picking_order_id' => 'getPickingOrderId',
        'order_item_id' => 'getOrderItemId',
        'process_state' => 'getProcessState',
        'process_date' => 'getProcessDate',
        'process_user_id' => 'getProcessUserId',
        'comment' => 'getComment',
        'quantity' => 'getQuantity',
        'item_id' => 'getItemId',
        'holding_area' => 'getHoldingArea',
        'warehouse_id' => 'getWarehouseId',
        'order_id_list' => 'getOrderIdList'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['picking_order_id'] = isset($data['picking_order_id']) ? $data['picking_order_id'] : null;
        $this->container['order_item_id'] = isset($data['order_item_id']) ? $data['order_item_id'] : null;
        $this->container['process_state'] = isset($data['process_state']) ? $data['process_state'] : null;
        $this->container['process_date'] = isset($data['process_date']) ? $data['process_date'] : null;
        $this->container['process_user_id'] = isset($data['process_user_id']) ? $data['process_user_id'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['item_id'] = isset($data['item_id']) ? $data['item_id'] : null;
        $this->container['holding_area'] = isset($data['holding_area']) ? $data['holding_area'] : null;
        $this->container['warehouse_id'] = isset($data['warehouse_id']) ? $data['warehouse_id'] : null;
        $this->container['order_id_list'] = isset($data['order_id_list']) ? $data['order_id_list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets picking_order_id
     *
     * @return int
     */
    public function getPickingOrderId()
    {
        return $this->container['picking_order_id'];
    }

    /**
     * Sets picking_order_id
     *
     * @param int $picking_order_id picking_order_id
     *
     * @return $this
     */
    public function setPickingOrderId($picking_order_id)
    {
        $this->container['picking_order_id'] = $picking_order_id;

        return $this;
    }

    /**
     * Gets order_item_id
     *
     * @return int
     */
    public function getOrderItemId()
    {
        return $this->container['order_item_id'];
    }

    /**
     * Sets order_item_id
     *
     * @param int $order_item_id order_item_id
     *
     * @return $this
     */
    public function setOrderItemId($order_item_id)
    {
        $this->container['order_item_id'] = $order_item_id;

        return $this;
    }

    /**
     * Gets process_state
     *
     * @return string
     */
    public function getProcessState()
    {
        return $this->container['process_state'];
    }

    /**
     * Sets process_state
     *
     * @param string $process_state process_state
     *
     * @return $this
     */
    public function setProcessState($process_state)
    {
        $this->container['process_state'] = $process_state;

        return $this;
    }

    /**
     * Gets process_date
     *
     * @return string
     */
    public function getProcessDate()
    {
        return $this->container['process_date'];
    }

    /**
     * Sets process_date
     *
     * @param string $process_date process_date
     *
     * @return $this
     */
    public function setProcessDate($process_date)
    {
        $this->container['process_date'] = $process_date;

        return $this;
    }

    /**
     * Gets process_user_id
     *
     * @return int
     */
    public function getProcessUserId()
    {
        return $this->container['process_user_id'];
    }

    /**
     * Sets process_user_id
     *
     * @param int $process_user_id process_user_id
     *
     * @return $this
     */
    public function setProcessUserId($process_user_id)
    {
        $this->container['process_user_id'] = $process_user_id;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return BigDecimal
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param BigDecimal $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets item_id
     *
     * @return int
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param int $item_id item_id
     *
     * @return $this
     */
    public function setItemId($item_id)
    {
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets holding_area
     *
     * @return int
     */
    public function getHoldingArea()
    {
        return $this->container['holding_area'];
    }

    /**
     * Sets holding_area
     *
     * @param int $holding_area holding_area
     *
     * @return $this
     */
    public function setHoldingArea($holding_area)
    {
        $this->container['holding_area'] = $holding_area;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return int
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param int $warehouse_id warehouse_id
     *
     * @return $this
     */
    public function setWarehouseId($warehouse_id)
    {
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets order_id_list
     *
     * @return string
     */
    public function getOrderIdList()
    {
        return $this->container['order_id_list'];
    }

    /**
     * Sets order_id_list
     *
     * @param string $order_id_list order_id_list
     *
     * @return $this
     */
    public function setOrderIdList($order_id_list)
    {
        $this->container['order_id_list'] = $order_id_list;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

<?php
/**
 * PlentyModulesOrderReferrerModelsOrderReferrer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PlentyModulesOrderReferrerModelsOrderReferrer Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlentyModulesOrderReferrerModelsOrderReferrer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Plenty\Modules\Order\Referrer\Models\OrderReferrer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'BigDecimal',
'is_editable' => 'bool',
'backend_name' => 'string',
'name' => 'string',
'order_owner_id' => 'int',
'is_filterable' => 'bool',
'origin' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'is_editable' => null,
'backend_name' => null,
'name' => null,
'order_owner_id' => null,
'is_filterable' => null,
'origin' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'is_editable' => 'isEditable',
'backend_name' => 'backendName',
'name' => 'name',
'order_owner_id' => 'orderOwnerId',
'is_filterable' => 'isFilterable',
'origin' => 'origin'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'is_editable' => 'setIsEditable',
'backend_name' => 'setBackendName',
'name' => 'setName',
'order_owner_id' => 'setOrderOwnerId',
'is_filterable' => 'setIsFilterable',
'origin' => 'setOrigin'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'is_editable' => 'getIsEditable',
'backend_name' => 'getBackendName',
'name' => 'getName',
'order_owner_id' => 'getOrderOwnerId',
'is_filterable' => 'getIsFilterable',
'origin' => 'getOrigin'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_editable'] = isset($data['is_editable']) ? $data['is_editable'] : null;
        $this->container['backend_name'] = isset($data['backend_name']) ? $data['backend_name'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['order_owner_id'] = isset($data['order_owner_id']) ? $data['order_owner_id'] : null;
        $this->container['is_filterable'] = isset($data['is_filterable']) ? $data['is_filterable'] : null;
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return BigDecimal
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param BigDecimal $id The ID of the order referrer
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_editable
     *
     * @return bool
     */
    public function getIsEditable()
    {
        return $this->container['is_editable'];
    }

    /**
     * Sets is_editable
     *
     * @param bool $is_editable Flag that indicates if this referrer can be updated as well as deleted or not <ul><li>True = the referrer can be edited and deleted</li> <li>False = the referrer can neither be edited nor deleted</li></ul>
     *
     * @return $this
     */
    public function setIsEditable($is_editable)
    {
        $this->container['is_editable'] = $is_editable;

        return $this;
    }

    /**
     * Gets backend_name
     *
     * @return string
     */
    public function getBackendName()
    {
        return $this->container['backend_name'];
    }

    /**
     * Sets backend_name
     *
     * @param string $backend_name The backend name of the referrer
     *
     * @return $this
     */
    public function setBackendName($backend_name)
    {
        $this->container['backend_name'] = $backend_name;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The public name of the referrer as it is displayed e.g. on documents
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets order_owner_id
     *
     * @return int
     */
    public function getOrderOwnerId()
    {
        return $this->container['order_owner_id'];
    }

    /**
     * Sets order_owner_id
     *
     * @param int $order_owner_id The user ID of whoever owns new orders from this referrer
     *
     * @return $this
     */
    public function setOrderOwnerId($order_owner_id)
    {
        $this->container['order_owner_id'] = $order_owner_id;

        return $this;
    }

    /**
     * Gets is_filterable
     *
     * @return bool
     */
    public function getIsFilterable()
    {
        return $this->container['is_filterable'];
    }

    /**
     * Sets is_filterable
     *
     * @param bool $is_filterable Flag that indicates if this referrer can be used as a filter or not <ul><li>True = Can be used as a filter</li> <li>False = Cannot be used as a filter</li></ul>
     *
     * @return $this
     */
    public function setIsFilterable($is_filterable)
    {
        $this->container['is_filterable'] = $is_filterable;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string $origin The origin of this referrer
     *
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

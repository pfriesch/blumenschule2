<?php
/**
 * PlentyModulesOrderShippingPackageModelsOrderShippingPackage
 *
 * PHP version 5
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BSApp\Service\plentymarketsAPI\Model;

use \ArrayAccess;
use \BSApp\Service\plentymarketsAPI\ObjectSerializer;

/**
 * PlentyModulesOrderShippingPackageModelsOrderShippingPackage Class Doc Comment
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlentyModulesOrderShippingPackageModelsOrderShippingPackage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Plenty\Modules\Order\Shipping\Package\Models\OrderShippingPackage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'order_id' => 'int',
'package_id' => 'int',
'weight' => 'int',
'package_number' => 'string',
'label_path' => 'string',
'label_base64' => 'string',
'export_label_base64' => 'string',
'package_type' => 'int',
'volume' => 'BigDecimal',
'pallet_id' => 'int',
'is_closed' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'order_id' => null,
'package_id' => null,
'weight' => null,
'package_number' => null,
'label_path' => null,
'label_base64' => null,
'export_label_base64' => null,
'package_type' => null,
'volume' => null,
'pallet_id' => null,
'is_closed' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'order_id' => 'orderId',
'package_id' => 'packageId',
'weight' => 'weight',
'package_number' => 'packageNumber',
'label_path' => 'labelPath',
'label_base64' => 'labelBase64',
'export_label_base64' => 'exportLabelBase64',
'package_type' => 'packageType',
'volume' => 'volume',
'pallet_id' => 'palletId',
'is_closed' => 'isClosed'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'order_id' => 'setOrderId',
'package_id' => 'setPackageId',
'weight' => 'setWeight',
'package_number' => 'setPackageNumber',
'label_path' => 'setLabelPath',
'label_base64' => 'setLabelBase64',
'export_label_base64' => 'setExportLabelBase64',
'package_type' => 'setPackageType',
'volume' => 'setVolume',
'pallet_id' => 'setPalletId',
'is_closed' => 'setIsClosed'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'order_id' => 'getOrderId',
'package_id' => 'getPackageId',
'weight' => 'getWeight',
'package_number' => 'getPackageNumber',
'label_path' => 'getLabelPath',
'label_base64' => 'getLabelBase64',
'export_label_base64' => 'getExportLabelBase64',
'package_type' => 'getPackageType',
'volume' => 'getVolume',
'pallet_id' => 'getPalletId',
'is_closed' => 'getIsClosed'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['package_id'] = isset($data['package_id']) ? $data['package_id'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['package_number'] = isset($data['package_number']) ? $data['package_number'] : null;
        $this->container['label_path'] = isset($data['label_path']) ? $data['label_path'] : null;
        $this->container['label_base64'] = isset($data['label_base64']) ? $data['label_base64'] : null;
        $this->container['export_label_base64'] = isset($data['export_label_base64']) ? $data['export_label_base64'] : null;
        $this->container['package_type'] = isset($data['package_type']) ? $data['package_type'] : null;
        $this->container['volume'] = isset($data['volume']) ? $data['volume'] : null;
        $this->container['pallet_id'] = isset($data['pallet_id']) ? $data['pallet_id'] : null;
        $this->container['is_closed'] = isset($data['is_closed']) ? $data['is_closed'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the order shipping package
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int $order_id The ID of the order
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets package_id
     *
     * @return int
     */
    public function getPackageId()
    {
        return $this->container['package_id'];
    }

    /**
     * Sets package_id
     *
     * @param int $package_id The ID of the package
     *
     * @return $this
     */
    public function setPackageId($package_id)
    {
        $this->container['package_id'] = $package_id;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return int
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param int $weight The weight of the package in grams
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets package_number
     *
     * @return string
     */
    public function getPackageNumber()
    {
        return $this->container['package_number'];
    }

    /**
     * Sets package_number
     *
     * @param string $package_number The package number
     *
     * @return $this
     */
    public function setPackageNumber($package_number)
    {
        $this->container['package_number'] = $package_number;

        return $this;
    }

    /**
     * Gets label_path
     *
     * @return string
     */
    public function getLabelPath()
    {
        return $this->container['label_path'];
    }

    /**
     * Sets label_path
     *
     * @param string $label_path The path to the label
     *
     * @return $this
     */
    public function setLabelPath($label_path)
    {
        $this->container['label_path'] = $label_path;

        return $this;
    }

    /**
     * Gets label_base64
     *
     * @return string
     */
    public function getLabelBase64()
    {
        return $this->container['label_base64'];
    }

    /**
     * Sets label_base64
     *
     * @param string $label_base64 The base64 encoded label
     *
     * @return $this
     */
    public function setLabelBase64($label_base64)
    {
        $this->container['label_base64'] = $label_base64;

        return $this;
    }

    /**
     * Gets export_label_base64
     *
     * @return string
     */
    public function getExportLabelBase64()
    {
        return $this->container['export_label_base64'];
    }

    /**
     * Sets export_label_base64
     *
     * @param string $export_label_base64 The base64 encoded export label
     *
     * @return $this
     */
    public function setExportLabelBase64($export_label_base64)
    {
        $this->container['export_label_base64'] = $export_label_base64;

        return $this;
    }

    /**
     * Gets package_type
     *
     * @return int
     */
    public function getPackageType()
    {
        return $this->container['package_type'];
    }

    /**
     * Sets package_type
     *
     * @param int $package_type The type of the package. The following types are valid: <ul> <li>0: unpacked</li> <li>1: Bale</li> <li>2: Dispenser</li> <li>3: Coil</li> <li>4: Roll pallet</li> <li>5: Colli</li> <li>6: Container</li> <li>7: Bucket</li> <li>8: Cask</li> <li>9: Bottles</li> <li>10: European flat pallet</li> <li>11: Structural frame</li> <li>12: Gas cylinder</li> <li>13: Pallet cage</li> <li>14: Hobbock</li> <li>15: Half pallet</li> <li>16: Pallet of food items</li> <li>17: Wooden coaster</li> <li>18: IBC container</li> <li>19: Pitcher</li> <li>20: Wicker bottle</li> <li>21: Case</li> <li>22: Canister</li> <li>23: Customer pallet</li> <li>24: Cardboard box</li> <li>25: Composite packaging</li> <li>26: Package</li> <li>27: Ring</li> <li>28: Role</li> <li>29: Sack</li> <li>30: units</li> <li>31: Tank</li> <li>32: Drum</li> <li>34: Crate</li> <li>35: Quarter pallet</li> <li>36: Other pallets</li> <li>37: Bin</li> <li>38: One-way pallet</li> <li>39: Foil bag</li> </ul>
     *
     * @return $this
     */
    public function setPackageType($package_type)
    {
        $this->container['package_type'] = $package_type;

        return $this;
    }

    /**
     * Gets volume
     *
     * @return BigDecimal
     */
    public function getVolume()
    {
        return $this->container['volume'];
    }

    /**
     * Sets volume
     *
     * @param BigDecimal $volume The volume of the package
     *
     * @return $this
     */
    public function setVolume($volume)
    {
        $this->container['volume'] = $volume;

        return $this;
    }

    /**
     * Gets pallet_id
     *
     * @return int
     */
    public function getPalletId()
    {
        return $this->container['pallet_id'];
    }

    /**
     * Sets pallet_id
     *
     * @param int $pallet_id The id of the pallet of which the package belong to
     *
     * @return $this
     */
    public function setPalletId($pallet_id)
    {
        $this->container['pallet_id'] = $pallet_id;

        return $this;
    }

    /**
     * Gets is_closed
     *
     * @return bool
     */
    public function getIsClosed()
    {
        return $this->container['is_closed'];
    }

    /**
     * Sets is_closed
     *
     * @param bool $is_closed Flag to say if the package is editable or not
     *
     * @return $this
     */
    public function setIsClosed($is_closed)
    {
        $this->container['is_closed'] = $is_closed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

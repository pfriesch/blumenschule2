<?php
/**
 * PlentyModulesCloudStorageModelsStorageObjectList
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PlentyModulesCloudStorageModelsStorageObjectList Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlentyModulesCloudStorageModelsStorageObjectList implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Plenty\Modules\Cloud\Storage\Models\StorageObjectList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_truncated' => 'bool',
'next_continuation_token' => 'string',
'objects' => '\Swagger\Client\Model\PlentyModulesCloudStorageModelsStorageObject[]',
'common_prefixes' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'is_truncated' => null,
'next_continuation_token' => null,
'objects' => null,
'common_prefixes' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_truncated' => 'isTruncated',
'next_continuation_token' => 'nextContinuationToken',
'objects' => 'objects',
'common_prefixes' => 'commonPrefixes'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_truncated' => 'setIsTruncated',
'next_continuation_token' => 'setNextContinuationToken',
'objects' => 'setObjects',
'common_prefixes' => 'setCommonPrefixes'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_truncated' => 'getIsTruncated',
'next_continuation_token' => 'getNextContinuationToken',
'objects' => 'getObjects',
'common_prefixes' => 'getCommonPrefixes'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_truncated'] = isset($data['is_truncated']) ? $data['is_truncated'] : null;
        $this->container['next_continuation_token'] = isset($data['next_continuation_token']) ? $data['next_continuation_token'] : null;
        $this->container['objects'] = isset($data['objects']) ? $data['objects'] : null;
        $this->container['common_prefixes'] = isset($data['common_prefixes']) ? $data['common_prefixes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_truncated
     *
     * @return bool
     */
    public function getIsTruncated()
    {
        return $this->container['is_truncated'];
    }

    /**
     * Sets is_truncated
     *
     * @param bool $is_truncated is_truncated
     *
     * @return $this
     */
    public function setIsTruncated($is_truncated)
    {
        $this->container['is_truncated'] = $is_truncated;

        return $this;
    }

    /**
     * Gets next_continuation_token
     *
     * @return string
     */
    public function getNextContinuationToken()
    {
        return $this->container['next_continuation_token'];
    }

    /**
     * Sets next_continuation_token
     *
     * @param string $next_continuation_token next_continuation_token
     *
     * @return $this
     */
    public function setNextContinuationToken($next_continuation_token)
    {
        $this->container['next_continuation_token'] = $next_continuation_token;

        return $this;
    }

    /**
     * Gets objects
     *
     * @return \Swagger\Client\Model\PlentyModulesCloudStorageModelsStorageObject[]
     */
    public function getObjects()
    {
        return $this->container['objects'];
    }

    /**
     * Sets objects
     *
     * @param \Swagger\Client\Model\PlentyModulesCloudStorageModelsStorageObject[] $objects (List)
     *
     * @return $this
     */
    public function setObjects($objects)
    {
        $this->container['objects'] = $objects;

        return $this;
    }

    /**
     * Gets common_prefixes
     *
     * @return string[]
     */
    public function getCommonPrefixes()
    {
        return $this->container['common_prefixes'];
    }

    /**
     * Sets common_prefixes
     *
     * @param string[] $common_prefixes common_prefixes
     *
     * @return $this
     */
    public function setCommonPrefixes($common_prefixes)
    {
        $this->container['common_prefixes'] = $common_prefixes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

<?php
/**
 * PlentyModulesAccountNewsletterModelsRecipient
 *
 * PHP version 5
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BSApp\Service\plentymarketsAPI\Model;

use \ArrayAccess;
use \BSApp\Service\plentymarketsAPI\ObjectSerializer;

/**
 * PlentyModulesAccountNewsletterModelsRecipient Class Doc Comment
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlentyModulesAccountNewsletterModelsRecipient implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Plenty\Modules\Account\Newsletter\Models\Recipient';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'folder_id' => 'int',
'contact_id' => 'int',
'first_name' => 'string',
'last_name' => 'string',
'email' => 'string',
'gender' => 'string',
'birthday' => 'string',
'timestamp' => 'int',
'template_lang' => 'string',
'confirmed_timestamp' => 'int',
'confirm_auth_string' => 'string',
'confirmation_url' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'folder_id' => null,
'contact_id' => null,
'first_name' => null,
'last_name' => null,
'email' => null,
'gender' => null,
'birthday' => null,
'timestamp' => null,
'template_lang' => null,
'confirmed_timestamp' => null,
'confirm_auth_string' => null,
'confirmation_url' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'folder_id' => 'folderId',
'contact_id' => 'contactId',
'first_name' => 'firstName',
'last_name' => 'lastName',
'email' => 'email',
'gender' => 'gender',
'birthday' => 'birthday',
'timestamp' => 'timestamp',
'template_lang' => 'templateLang',
'confirmed_timestamp' => 'confirmedTimestamp',
'confirm_auth_string' => 'confirmAuthString',
'confirmation_url' => 'confirmationURL'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'folder_id' => 'setFolderId',
'contact_id' => 'setContactId',
'first_name' => 'setFirstName',
'last_name' => 'setLastName',
'email' => 'setEmail',
'gender' => 'setGender',
'birthday' => 'setBirthday',
'timestamp' => 'setTimestamp',
'template_lang' => 'setTemplateLang',
'confirmed_timestamp' => 'setConfirmedTimestamp',
'confirm_auth_string' => 'setConfirmAuthString',
'confirmation_url' => 'setConfirmationUrl'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'folder_id' => 'getFolderId',
'contact_id' => 'getContactId',
'first_name' => 'getFirstName',
'last_name' => 'getLastName',
'email' => 'getEmail',
'gender' => 'getGender',
'birthday' => 'getBirthday',
'timestamp' => 'getTimestamp',
'template_lang' => 'getTemplateLang',
'confirmed_timestamp' => 'getConfirmedTimestamp',
'confirm_auth_string' => 'getConfirmAuthString',
'confirmation_url' => 'getConfirmationUrl'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['folder_id'] = isset($data['folder_id']) ? $data['folder_id'] : null;
        $this->container['contact_id'] = isset($data['contact_id']) ? $data['contact_id'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['birthday'] = isset($data['birthday']) ? $data['birthday'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['template_lang'] = isset($data['template_lang']) ? $data['template_lang'] : null;
        $this->container['confirmed_timestamp'] = isset($data['confirmed_timestamp']) ? $data['confirmed_timestamp'] : null;
        $this->container['confirm_auth_string'] = isset($data['confirm_auth_string']) ? $data['confirm_auth_string'] : null;
        $this->container['confirmation_url'] = isset($data['confirmation_url']) ? $data['confirmation_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the newsletter recipient
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets folder_id
     *
     * @return int
     */
    public function getFolderId()
    {
        return $this->container['folder_id'];
    }

    /**
     * Sets folder_id
     *
     * @param int $folder_id The ID of the newsletter folder
     *
     * @return $this
     */
    public function setFolderId($folder_id)
    {
        $this->container['folder_id'] = $folder_id;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return int
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param int $contact_id The ID of the contact
     *
     * @return $this
     */
    public function setContactId($contact_id)
    {
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name The first name of the recipient
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name The last name of the recipient
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The email address of the recipient
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender The gender of the recipient
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets birthday
     *
     * @return string
     */
    public function getBirthday()
    {
        return $this->container['birthday'];
    }

    /**
     * Sets birthday
     *
     * @param string $birthday The birthday of the recipient
     *
     * @return $this
     */
    public function setBirthday($birthday)
    {
        $this->container['birthday'] = $birthday;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return int
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param int $timestamp The timestamp when the newsletter email was sent to the recipient
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets template_lang
     *
     * @return string
     */
    public function getTemplateLang()
    {
        return $this->container['template_lang'];
    }

    /**
     * Sets template_lang
     *
     * @param string $template_lang The language of the newsletter email template
     *
     * @return $this
     */
    public function setTemplateLang($template_lang)
    {
        $this->container['template_lang'] = $template_lang;

        return $this;
    }

    /**
     * Gets confirmed_timestamp
     *
     * @return int
     */
    public function getConfirmedTimestamp()
    {
        return $this->container['confirmed_timestamp'];
    }

    /**
     * Sets confirmed_timestamp
     *
     * @param int $confirmed_timestamp The timestamp when the recipient confirmed the newsletter subscription
     *
     * @return $this
     */
    public function setConfirmedTimestamp($confirmed_timestamp)
    {
        $this->container['confirmed_timestamp'] = $confirmed_timestamp;

        return $this;
    }

    /**
     * Gets confirm_auth_string
     *
     * @return string
     */
    public function getConfirmAuthString()
    {
        return $this->container['confirm_auth_string'];
    }

    /**
     * Sets confirm_auth_string
     *
     * @param string $confirm_auth_string The key that is automatically generated by the system. This key recognises the user regardless whether the user is logged in to the system and will then set the confirmation timestamp.
     *
     * @return $this
     */
    public function setConfirmAuthString($confirm_auth_string)
    {
        $this->container['confirm_auth_string'] = $confirm_auth_string;

        return $this;
    }

    /**
     * Gets confirmation_url
     *
     * @return string
     */
    public function getConfirmationUrl()
    {
        return $this->container['confirmation_url'];
    }

    /**
     * Sets confirmation_url
     *
     * @param string $confirmation_url The url with which the customer has confirmed the newsletter
     *
     * @return $this
     */
    public function setConfirmationUrl($confirmation_url)
    {
        $this->container['confirmation_url'] = $confirmation_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

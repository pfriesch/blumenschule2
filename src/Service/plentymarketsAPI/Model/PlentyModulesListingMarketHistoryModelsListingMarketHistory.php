<?php
/**
 * PlentyModulesListingMarketHistoryModelsListingMarketHistory
 *
 * PHP version 5
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BSApp\Service\plentymarketsAPI\Model;

use \ArrayAccess;
use \BSApp\Service\plentymarketsAPI\ObjectSerializer;

/**
 * PlentyModulesListingMarketHistoryModelsListingMarketHistory Class Doc Comment
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlentyModulesListingMarketHistoryModelsListingMarketHistory implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'Plenty\Modules\Listing\Market\History\Models\ListingMarketHistory';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'id' => 'int',
        'listing_market_id' => 'int',
        'referrer_id' => 'int',
        'external_id' => 'string',
        'status_id' => 'int',
        'quantity' => 'int',
        'quantity_sold' => 'int',
        'quantity_sold_delta' => 'int',
        'quantity_remain' => 'int',
        'price' => 'BigDecimal',
        'currency' => 'string',
        'sku' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string'];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'id' => null,
        'listing_market_id' => null,
        'referrer_id' => null,
        'external_id' => null,
        'status_id' => null,
        'quantity' => null,
        'quantity_sold' => null,
        'quantity_sold_delta' => null,
        'quantity_remain' => null,
        'price' => null,
        'currency' => null,
        'sku' => null,
        'created_at' => null,
        'updated_at' => null];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'listing_market_id' => 'listingMarketId',
        'referrer_id' => 'referrerId',
        'external_id' => 'externalId',
        'status_id' => 'statusId',
        'quantity' => 'quantity',
        'quantity_sold' => 'quantitySold',
        'quantity_sold_delta' => 'quantitySoldDelta',
        'quantity_remain' => 'quantityRemain',
        'price' => 'price',
        'currency' => 'currency',
        'sku' => 'sku',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt'];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'listing_market_id' => 'setListingMarketId',
        'referrer_id' => 'setReferrerId',
        'external_id' => 'setExternalId',
        'status_id' => 'setStatusId',
        'quantity' => 'setQuantity',
        'quantity_sold' => 'setQuantitySold',
        'quantity_sold_delta' => 'setQuantitySoldDelta',
        'quantity_remain' => 'setQuantityRemain',
        'price' => 'setPrice',
        'currency' => 'setCurrency',
        'sku' => 'setSku',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'listing_market_id' => 'getListingMarketId',
        'referrer_id' => 'getReferrerId',
        'external_id' => 'getExternalId',
        'status_id' => 'getStatusId',
        'quantity' => 'getQuantity',
        'quantity_sold' => 'getQuantitySold',
        'quantity_sold_delta' => 'getQuantitySoldDelta',
        'quantity_remain' => 'getQuantityRemain',
        'price' => 'getPrice',
        'currency' => 'getCurrency',
        'sku' => 'getSku',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['listing_market_id'] = isset($data['listing_market_id']) ? $data['listing_market_id'] : null;
        $this->container['referrer_id'] = isset($data['referrer_id']) ? $data['referrer_id'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['status_id'] = isset($data['status_id']) ? $data['status_id'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['quantity_sold'] = isset($data['quantity_sold']) ? $data['quantity_sold'] : null;
        $this->container['quantity_sold_delta'] = isset($data['quantity_sold_delta']) ? $data['quantity_sold_delta'] : null;
        $this->container['quantity_remain'] = isset($data['quantity_remain']) ? $data['quantity_remain'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The listing market history ID.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets listing_market_id
     *
     * @return int
     */
    public function getListingMarketId()
    {
        return $this->container['listing_market_id'];
    }

    /**
     * Sets listing_market_id
     *
     * @param int $listing_market_id The listing market ID of the current listing market history.
     *
     * @return $this
     */
    public function setListingMarketId($listing_market_id)
    {
        $this->container['listing_market_id'] = $listing_market_id;

        return $this;
    }

    /**
     * Gets referrer_id
     *
     * @return int
     */
    public function getReferrerId()
    {
        return $this->container['referrer_id'];
    }

    /**
     * Sets referrer_id
     *
     * @param int $referrer_id The referrer ID.
     *
     * @return $this
     */
    public function setReferrerId($referrer_id)
    {
        $this->container['referrer_id'] = $referrer_id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id The external ID of the listing market history.
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets status_id
     *
     * @return int
     */
    public function getStatusId()
    {
        return $this->container['status_id'];
    }

    /**
     * Sets status_id
     *
     * @param int $status_id The status ID of the current listing market history. The following properties are available: <ul> <li>1 = Active</li> <li>2 = Ended</li> <li>3 = Relisted</li> <li>4 = Hidden</li> </ul>
     *
     * @return $this
     */
    public function setStatusId($status_id)
    {
        $this->container['status_id'] = $status_id;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity The quantity available for sale on the marketplace.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets quantity_sold
     *
     * @return int
     */
    public function getQuantitySold()
    {
        return $this->container['quantity_sold'];
    }

    /**
     * Sets quantity_sold
     *
     * @param int $quantity_sold The quantity sold currently on the marketplace.
     *
     * @return $this
     */
    public function setQuantitySold($quantity_sold)
    {
        $this->container['quantity_sold'] = $quantity_sold;

        return $this;
    }

    /**
     * Gets quantity_sold_delta
     *
     * @return int
     */
    public function getQuantitySoldDelta()
    {
        return $this->container['quantity_sold_delta'];
    }

    /**
     * Sets quantity_sold_delta
     *
     * @param int $quantity_sold_delta The difference between the sold quantity and orders imported for this listing market history.
     *
     * @return $this
     */
    public function setQuantitySoldDelta($quantity_sold_delta)
    {
        $this->container['quantity_sold_delta'] = $quantity_sold_delta;

        return $this;
    }

    /**
     * Gets quantity_remain
     *
     * @return int
     */
    public function getQuantityRemain()
    {
        return $this->container['quantity_remain'];
    }

    /**
     * Sets quantity_remain
     *
     * @param int $quantity_remain The quantity remaining on the marketplace.
     *
     * @return $this
     */
    public function setQuantityRemain($quantity_remain)
    {
        $this->container['quantity_remain'] = $quantity_remain;

        return $this;
    }

    /**
     * Gets price
     *
     * @return BigDecimal
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param BigDecimal $price The price offered for this listing market. @see ListingMarketHistoryVariation if the listing market history contains variations.
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency The currency for the price of this listing market.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku The stock keeping unit of this listing market history.
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at The date that the entry was created.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at The date that the entry was updated last.
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

<?php
/**
 * PlentyModulesItemPropertyModelsPropertyGroup
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PlentyModulesItemPropertyModelsPropertyGroup Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlentyModulesItemPropertyModelsPropertyGroup implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Plenty\Modules\Item\Property\Models\PropertyGroup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'backend_name' => 'string',
'order_property_grouping_type' => 'string',
'is_surcharge_percental' => 'bool',
'otto_component_id' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'backend_name' => null,
'order_property_grouping_type' => null,
'is_surcharge_percental' => null,
'otto_component_id' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'backend_name' => 'backendName',
'order_property_grouping_type' => 'orderPropertyGroupingType',
'is_surcharge_percental' => 'isSurchargePercental',
'otto_component_id' => 'ottoComponentId'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'backend_name' => 'setBackendName',
'order_property_grouping_type' => 'setOrderPropertyGroupingType',
'is_surcharge_percental' => 'setIsSurchargePercental',
'otto_component_id' => 'setOttoComponentId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'backend_name' => 'getBackendName',
'order_property_grouping_type' => 'getOrderPropertyGroupingType',
'is_surcharge_percental' => 'getIsSurchargePercental',
'otto_component_id' => 'getOttoComponentId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['backend_name'] = isset($data['backend_name']) ? $data['backend_name'] : null;
        $this->container['order_property_grouping_type'] = isset($data['order_property_grouping_type']) ? $data['order_property_grouping_type'] : null;
        $this->container['is_surcharge_percental'] = isset($data['is_surcharge_percental']) ? $data['is_surcharge_percental'] : null;
        $this->container['otto_component_id'] = isset($data['otto_component_id']) ? $data['otto_component_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique ID of the property group
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets backend_name
     *
     * @return string
     */
    public function getBackendName()
    {
        return $this->container['backend_name'];
    }

    /**
     * Sets backend_name
     *
     * @param string $backend_name The back end name of the property group. This name is not visible to customers.
     *
     * @return $this
     */
    public function setBackendName($backend_name)
    {
        $this->container['backend_name'] = $backend_name;

        return $this;
    }

    /**
     * Gets order_property_grouping_type
     *
     * @return string
     */
    public function getOrderPropertyGroupingType()
    {
        return $this->container['order_property_grouping_type'];
    }

    /**
     * Sets order_property_grouping_type
     *
     * @param string $order_property_grouping_type Indicates how order properties are grouped for selection in the order process. This parameter is applicable to order properties of the type None only.<ul><li>none = Order properties are not grouped.</li><li>single = One of the grouped order properties can be selected from the drop-down list.</li><li>multi = Multiple order properties can be selected.</li></ul>
     *
     * @return $this
     */
    public function setOrderPropertyGroupingType($order_property_grouping_type)
    {
        $this->container['order_property_grouping_type'] = $order_property_grouping_type;

        return $this;
    }

    /**
     * Gets is_surcharge_percental
     *
     * @return bool
     */
    public function getIsSurchargePercental()
    {
        return $this->container['is_surcharge_percental'];
    }

    /**
     * Sets is_surcharge_percental
     *
     * @param bool $is_surcharge_percental Flag that indicates if surcharge values are calculated in percent.
     *
     * @return $this
     */
    public function setIsSurchargePercental($is_surcharge_percental)
    {
        $this->container['is_surcharge_percental'] = $is_surcharge_percental;

        return $this;
    }

    /**
     * Gets otto_component_id
     *
     * @return int
     */
    public function getOttoComponentId()
    {
        return $this->container['otto_component_id'];
    }

    /**
     * Sets otto_component_id
     *
     * @param int $otto_component_id otto_component_id
     *
     * @return $this
     */
    public function setOttoComponentId($otto_component_id)
    {
        $this->container['otto_component_id'] = $otto_component_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

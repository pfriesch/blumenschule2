<?php
/**
 * OrderApi
 * PHP version 5
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BSApp\Service\plentymarketsAPI\Api;

use BSApp\Service\plentymarketsAPI\Model\IlluminateDatabaseEloquentCollection;
use BSApp\Service\plentymarketsAPI\Model\IlluminateSupportCollection;
use BSApp\Service\plentymarketsAPI\Model\Mixed;
use BSApp\Service\plentymarketsAPI\Model\PlentyDataSimpleRestResponse;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderBookingModelsOrderBooking;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderContactWishModelsContactWish;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCouponCampaignCodeModelsCouponCampaignCode;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCouponCodeValidationModelsCouponCodeValidation;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCurrencyModelsCurrency;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCurrencyModelsCurrencyExchangeRate;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderDate;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderDateType;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderDateTypeName;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderItemDate;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderItemProperty;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderProperty;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderPropertyType;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderReferrerModelsOrderReferrer;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderSerialNumberModelsOrderSerialNumber;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingCountriesModelsCountry;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingInformationModelsShippingInformation;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackage;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackageItems;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageTypeModelsShippingPackageType;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPalletModelsOrderShippingPallet;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingParcelServiceModelsParcelServicePreset;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingParcelServiceRegionModelsParcelServiceRegion;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingReturnsModelsReturnsServiceProvider;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingServiceProviderModelsShippingServiceProvider;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderStatusHistoryModelsStatusHistoryEntry;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderStatusModelsOrderStatus;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderTransactionModelsOrderItemTransaction;
use BSApp\Service\plentymarketsAPI\Model\PlentyRepositoriesModelsDeleteResponse;
use BSApp\Service\plentymarketsAPI\Model\Used\ModelsOrders;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use function GuzzleHttp\Psr7\build_query;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BSApp\Service\plentymarketsAPI\ApiException;
use BSApp\Service\plentymarketsAPI\Configuration;
use BSApp\Service\plentymarketsAPI\HeaderSelector;
use BSApp\Service\plentymarketsAPI\ObjectSerializer;
use InvalidArgumentException;
use RuntimeException;
use stdClass;

/**
 * OrderApi Class Doc Comment
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    )
    {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation restOrdersContactsContactIdGet
     *
     * List orders of a contact
     *
     * @param int $contact_id The id of the contact to search the orders (required)
     * @param int $page The page to get. The default page that will be returned is page 1. (required)
     * @param int $items_per_page The number of orders to be displayed per page. The default number of orders per page is 50. (required)
     * @param int $with Load additional relations for an order. Currently possible are:     &lt;ul&gt;     &lt;li&gt;&#x27;addresses&#x27; &#x3D; The address objects that are associated with the order.&lt;/li&gt;     &lt;li&gt;&#x27;relations&#x27; &#x3D; The order relation reference instances that are associated with the order. These instances contain information such as the the reference type, the ID of the reference and the relation itself.&lt;/li&gt;     &lt;li&gt;&#x27;comments&#x27; &#x3D; The order comments.&lt;/li&gt;     &lt;li&gt;&#x27;location&#x27; &#x3D; The accounting location of the order.&lt;/li&gt;     &lt;li&gt;&#x27;payments&#x27; &#x3D; The payments that are associated with the order.&lt;/li&gt;     &lt;li&gt;&#x27;documents&#x27; &#x3D; The documents that are associated with the order.&lt;/li&gt;     &lt;li&gt;&#x27;contactSender&#x27; &#x3D; The associated contact for the contact-sender relation.&lt;/li&gt;     &lt;li&gt;&#x27;contactReceiver&#x27; &#x3D; The associated contact for the contact-receiver relation.&lt;/li&gt;     &lt;li&gt;&#x27;warehouseSender&#x27; &#x3D; The associated warehouse for the warehouse-sender relation.&lt;/li&gt;     &lt;li&gt;&#x27;warehouseReceiver&#x27; &#x3D; The associated warehouse for the warehouse-receiver relation.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.variation&#x27; &#x3D; The variation that is associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.giftCardCodes&#x27; &#x3D; The gift card codes that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.transactions&#x27; &#x3D; The transactions that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.serialNumbers&#x27; &#x3D; The serial numbers that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.variationBarcodes&#x27; &#x3D; The barcodes that are associated with variation of the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.comments&#x27; &#x3D; The comments that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&lt;b&gt;deprecated&lt;/b&gt; &#x27;orderItems.warehouseLocations&#x27; &#x3D; The warehouse locations that are associated with the order item.&lt;/li&gt;     &lt;/ul&gt;     Example: &lt;code&gt;?with[]&#x3D;addresses&amp;with[]&#x3D;orderItems.variation&lt;/code&gt; (optional)
     *
     * @return object
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersContactsContactIdGet($contact_id, $page, $items_per_page, $with = null)
    {
        list($response) = $this->restOrdersContactsContactIdGetWithHttpInfo($contact_id, $page, $items_per_page, $with);
        return $response;
    }

    /**
     * Operation restOrdersContactsContactIdGetWithHttpInfo
     *
     * List orders of a contact
     *
     * @param int $contact_id The id of the contact to search the orders (required)
     * @param int $page The page to get. The default page that will be returned is page 1. (required)
     * @param int $items_per_page The number of orders to be displayed per page. The default number of orders per page is 50. (required)
     * @param int $with Load additional relations for an order. Currently possible are:     &lt;ul&gt;     &lt;li&gt;&#x27;addresses&#x27; &#x3D; The address objects that are associated with the order.&lt;/li&gt;     &lt;li&gt;&#x27;relations&#x27; &#x3D; The order relation reference instances that are associated with the order. These instances contain information such as the the reference type, the ID of the reference and the relation itself.&lt;/li&gt;     &lt;li&gt;&#x27;comments&#x27; &#x3D; The order comments.&lt;/li&gt;     &lt;li&gt;&#x27;location&#x27; &#x3D; The accounting location of the order.&lt;/li&gt;     &lt;li&gt;&#x27;payments&#x27; &#x3D; The payments that are associated with the order.&lt;/li&gt;     &lt;li&gt;&#x27;documents&#x27; &#x3D; The documents that are associated with the order.&lt;/li&gt;     &lt;li&gt;&#x27;contactSender&#x27; &#x3D; The associated contact for the contact-sender relation.&lt;/li&gt;     &lt;li&gt;&#x27;contactReceiver&#x27; &#x3D; The associated contact for the contact-receiver relation.&lt;/li&gt;     &lt;li&gt;&#x27;warehouseSender&#x27; &#x3D; The associated warehouse for the warehouse-sender relation.&lt;/li&gt;     &lt;li&gt;&#x27;warehouseReceiver&#x27; &#x3D; The associated warehouse for the warehouse-receiver relation.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.variation&#x27; &#x3D; The variation that is associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.giftCardCodes&#x27; &#x3D; The gift card codes that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.transactions&#x27; &#x3D; The transactions that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.serialNumbers&#x27; &#x3D; The serial numbers that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.variationBarcodes&#x27; &#x3D; The barcodes that are associated with variation of the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.comments&#x27; &#x3D; The comments that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&lt;b&gt;deprecated&lt;/b&gt; &#x27;orderItems.warehouseLocations&#x27; &#x3D; The warehouse locations that are associated with the order item.&lt;/li&gt;     &lt;/ul&gt;     Example: &lt;code&gt;?with[]&#x3D;addresses&amp;with[]&#x3D;orderItems.variation&lt;/code&gt; (optional)
     *
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersContactsContactIdGetWithHttpInfo($contact_id, $page, $items_per_page, $with = null)
    {
        $returnType = 'object';
        $request = $this->restOrdersContactsContactIdGetRequest($contact_id, $page, $items_per_page, $with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersContactsContactIdGetAsync
     *
     * List orders of a contact
     *
     * @param int $contact_id The id of the contact to search the orders (required)
     * @param int $page The page to get. The default page that will be returned is page 1. (required)
     * @param int $items_per_page The number of orders to be displayed per page. The default number of orders per page is 50. (required)
     * @param int $with Load additional relations for an order. Currently possible are:     &lt;ul&gt;     &lt;li&gt;&#x27;addresses&#x27; &#x3D; The address objects that are associated with the order.&lt;/li&gt;     &lt;li&gt;&#x27;relations&#x27; &#x3D; The order relation reference instances that are associated with the order. These instances contain information such as the the reference type, the ID of the reference and the relation itself.&lt;/li&gt;     &lt;li&gt;&#x27;comments&#x27; &#x3D; The order comments.&lt;/li&gt;     &lt;li&gt;&#x27;location&#x27; &#x3D; The accounting location of the order.&lt;/li&gt;     &lt;li&gt;&#x27;payments&#x27; &#x3D; The payments that are associated with the order.&lt;/li&gt;     &lt;li&gt;&#x27;documents&#x27; &#x3D; The documents that are associated with the order.&lt;/li&gt;     &lt;li&gt;&#x27;contactSender&#x27; &#x3D; The associated contact for the contact-sender relation.&lt;/li&gt;     &lt;li&gt;&#x27;contactReceiver&#x27; &#x3D; The associated contact for the contact-receiver relation.&lt;/li&gt;     &lt;li&gt;&#x27;warehouseSender&#x27; &#x3D; The associated warehouse for the warehouse-sender relation.&lt;/li&gt;     &lt;li&gt;&#x27;warehouseReceiver&#x27; &#x3D; The associated warehouse for the warehouse-receiver relation.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.variation&#x27; &#x3D; The variation that is associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.giftCardCodes&#x27; &#x3D; The gift card codes that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.transactions&#x27; &#x3D; The transactions that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.serialNumbers&#x27; &#x3D; The serial numbers that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.variationBarcodes&#x27; &#x3D; The barcodes that are associated with variation of the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.comments&#x27; &#x3D; The comments that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&lt;b&gt;deprecated&lt;/b&gt; &#x27;orderItems.warehouseLocations&#x27; &#x3D; The warehouse locations that are associated with the order item.&lt;/li&gt;     &lt;/ul&gt;     Example: &lt;code&gt;?with[]&#x3D;addresses&amp;with[]&#x3D;orderItems.variation&lt;/code&gt; (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersContactsContactIdGetAsync($contact_id, $page, $items_per_page, $with = null)
    {
        return $this->restOrdersContactsContactIdGetAsyncWithHttpInfo($contact_id, $page, $items_per_page, $with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersContactsContactIdGetAsyncWithHttpInfo
     *
     * List orders of a contact
     *
     * @param int $contact_id The id of the contact to search the orders (required)
     * @param int $page The page to get. The default page that will be returned is page 1. (required)
     * @param int $items_per_page The number of orders to be displayed per page. The default number of orders per page is 50. (required)
     * @param int $with Load additional relations for an order. Currently possible are:     &lt;ul&gt;     &lt;li&gt;&#x27;addresses&#x27; &#x3D; The address objects that are associated with the order.&lt;/li&gt;     &lt;li&gt;&#x27;relations&#x27; &#x3D; The order relation reference instances that are associated with the order. These instances contain information such as the the reference type, the ID of the reference and the relation itself.&lt;/li&gt;     &lt;li&gt;&#x27;comments&#x27; &#x3D; The order comments.&lt;/li&gt;     &lt;li&gt;&#x27;location&#x27; &#x3D; The accounting location of the order.&lt;/li&gt;     &lt;li&gt;&#x27;payments&#x27; &#x3D; The payments that are associated with the order.&lt;/li&gt;     &lt;li&gt;&#x27;documents&#x27; &#x3D; The documents that are associated with the order.&lt;/li&gt;     &lt;li&gt;&#x27;contactSender&#x27; &#x3D; The associated contact for the contact-sender relation.&lt;/li&gt;     &lt;li&gt;&#x27;contactReceiver&#x27; &#x3D; The associated contact for the contact-receiver relation.&lt;/li&gt;     &lt;li&gt;&#x27;warehouseSender&#x27; &#x3D; The associated warehouse for the warehouse-sender relation.&lt;/li&gt;     &lt;li&gt;&#x27;warehouseReceiver&#x27; &#x3D; The associated warehouse for the warehouse-receiver relation.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.variation&#x27; &#x3D; The variation that is associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.giftCardCodes&#x27; &#x3D; The gift card codes that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.transactions&#x27; &#x3D; The transactions that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.serialNumbers&#x27; &#x3D; The serial numbers that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.variationBarcodes&#x27; &#x3D; The barcodes that are associated with variation of the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.comments&#x27; &#x3D; The comments that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&lt;b&gt;deprecated&lt;/b&gt; &#x27;orderItems.warehouseLocations&#x27; &#x3D; The warehouse locations that are associated with the order item.&lt;/li&gt;     &lt;/ul&gt;     Example: &lt;code&gt;?with[]&#x3D;addresses&amp;with[]&#x3D;orderItems.variation&lt;/code&gt; (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersContactsContactIdGetAsyncWithHttpInfo($contact_id, $page, $items_per_page, $with = null)
    {
        $returnType = 'object';
        $request = $this->restOrdersContactsContactIdGetRequest($contact_id, $page, $items_per_page, $with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersContactsContactIdGet'
     *
     * @param int $contact_id The id of the contact to search the orders (required)
     * @param int $page The page to get. The default page that will be returned is page 1. (required)
     * @param int $items_per_page The number of orders to be displayed per page. The default number of orders per page is 50. (required)
     * @param int $with Load additional relations for an order. Currently possible are:     &lt;ul&gt;     &lt;li&gt;&#x27;addresses&#x27; &#x3D; The address objects that are associated with the order.&lt;/li&gt;     &lt;li&gt;&#x27;relations&#x27; &#x3D; The order relation reference instances that are associated with the order. These instances contain information such as the the reference type, the ID of the reference and the relation itself.&lt;/li&gt;     &lt;li&gt;&#x27;comments&#x27; &#x3D; The order comments.&lt;/li&gt;     &lt;li&gt;&#x27;location&#x27; &#x3D; The accounting location of the order.&lt;/li&gt;     &lt;li&gt;&#x27;payments&#x27; &#x3D; The payments that are associated with the order.&lt;/li&gt;     &lt;li&gt;&#x27;documents&#x27; &#x3D; The documents that are associated with the order.&lt;/li&gt;     &lt;li&gt;&#x27;contactSender&#x27; &#x3D; The associated contact for the contact-sender relation.&lt;/li&gt;     &lt;li&gt;&#x27;contactReceiver&#x27; &#x3D; The associated contact for the contact-receiver relation.&lt;/li&gt;     &lt;li&gt;&#x27;warehouseSender&#x27; &#x3D; The associated warehouse for the warehouse-sender relation.&lt;/li&gt;     &lt;li&gt;&#x27;warehouseReceiver&#x27; &#x3D; The associated warehouse for the warehouse-receiver relation.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.variation&#x27; &#x3D; The variation that is associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.giftCardCodes&#x27; &#x3D; The gift card codes that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.transactions&#x27; &#x3D; The transactions that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.serialNumbers&#x27; &#x3D; The serial numbers that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.variationBarcodes&#x27; &#x3D; The barcodes that are associated with variation of the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.comments&#x27; &#x3D; The comments that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&lt;b&gt;deprecated&lt;/b&gt; &#x27;orderItems.warehouseLocations&#x27; &#x3D; The warehouse locations that are associated with the order item.&lt;/li&gt;     &lt;/ul&gt;     Example: &lt;code&gt;?with[]&#x3D;addresses&amp;with[]&#x3D;orderItems.variation&lt;/code&gt; (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersContactsContactIdGetRequest($contact_id, $page, $items_per_page, $with = null)
    {
        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $contact_id when calling restOrdersContactsContactIdGet'
            );
        }
        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $page when calling restOrdersContactsContactIdGet'
            );
        }
        // verify the required parameter 'items_per_page' is set
        if ($items_per_page === null || (is_array($items_per_page) && count($items_per_page) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $items_per_page when calling restOrdersContactsContactIdGet'
            );
        }

        $resourcePath = '/rest/orders/contacts/{contactId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($items_per_page !== null) {
            $queryParams['itemsPerPage'] = ObjectSerializer::toQueryValue($items_per_page);
        }
        // query params
        if ($with !== null) {
            $queryParams['with'] = ObjectSerializer::toQueryValue($with);
        }

        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contactId' . '}',
                ObjectSerializer::toPathValue($contact_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersContactsContactIdMultiOrderPost
     *
     * Create a multi-order
     *
     * @param int $contact_id contact_id (required)
     *
     * @return PlentyModulesOrderModelsOrder
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersContactsContactIdMultiOrderPost($contact_id)
    {
        list($response) = $this->restOrdersContactsContactIdMultiOrderPostWithHttpInfo($contact_id);
        return $response;
    }

    /**
     * Operation restOrdersContactsContactIdMultiOrderPostWithHttpInfo
     *
     * Create a multi-order
     *
     * @param int $contact_id (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersContactsContactIdMultiOrderPostWithHttpInfo($contact_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder';
        $request = $this->restOrdersContactsContactIdMultiOrderPostRequest($contact_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersContactsContactIdMultiOrderPostAsync
     *
     * Create a multi-order
     *
     * @param int $contact_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersContactsContactIdMultiOrderPostAsync($contact_id)
    {
        return $this->restOrdersContactsContactIdMultiOrderPostAsyncWithHttpInfo($contact_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersContactsContactIdMultiOrderPostAsyncWithHttpInfo
     *
     * Create a multi-order
     *
     * @param int $contact_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersContactsContactIdMultiOrderPostAsyncWithHttpInfo($contact_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder';
        $request = $this->restOrdersContactsContactIdMultiOrderPostRequest($contact_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersContactsContactIdMultiOrderPost'
     *
     * @param int $contact_id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersContactsContactIdMultiOrderPostRequest($contact_id)
    {
        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $contact_id when calling restOrdersContactsContactIdMultiOrderPost'
            );
        }

        $resourcePath = '/rest/orders/contacts/{contactId}/multi_order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contactId' . '}',
                ObjectSerializer::toPathValue($contact_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersCouponsCampaignsCampaignIdCodesPost
     *
     * Create a coupon code
     *
     * @param int $campaign_id campaign_id (required)
     * @param object $body body (optional)
     *
     * @return PlentyModulesOrderCouponCampaignCodeModelsCouponCampaignCode
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersCouponsCampaignsCampaignIdCodesPost($campaign_id, $body = null)
    {
        list($response) = $this->restOrdersCouponsCampaignsCampaignIdCodesPostWithHttpInfo($campaign_id, $body);
        return $response;
    }

    /**
     * Operation restOrdersCouponsCampaignsCampaignIdCodesPostWithHttpInfo
     *
     * Create a coupon code
     *
     * @param int $campaign_id (required)
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCouponCampaignCodeModelsCouponCampaignCode, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersCouponsCampaignsCampaignIdCodesPostWithHttpInfo($campaign_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCouponCampaignCodeModelsCouponCampaignCode';
        $request = $this->restOrdersCouponsCampaignsCampaignIdCodesPostRequest($campaign_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCouponCampaignCodeModelsCouponCampaignCode',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersCouponsCampaignsCampaignIdCodesPostAsync
     *
     * Create a coupon code
     *
     * @param int $campaign_id (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersCouponsCampaignsCampaignIdCodesPostAsync($campaign_id, $body = null)
    {
        return $this->restOrdersCouponsCampaignsCampaignIdCodesPostAsyncWithHttpInfo($campaign_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersCouponsCampaignsCampaignIdCodesPostAsyncWithHttpInfo
     *
     * Create a coupon code
     *
     * @param int $campaign_id (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersCouponsCampaignsCampaignIdCodesPostAsyncWithHttpInfo($campaign_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCouponCampaignCodeModelsCouponCampaignCode';
        $request = $this->restOrdersCouponsCampaignsCampaignIdCodesPostRequest($campaign_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersCouponsCampaignsCampaignIdCodesPost'
     *
     * @param int $campaign_id (required)
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersCouponsCampaignsCampaignIdCodesPostRequest($campaign_id, $body = null)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling restOrdersCouponsCampaignsCampaignIdCodesPost'
            );
        }

        $resourcePath = '/rest/orders/coupons/campaigns/{campaignId}/codes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersCouponsCampaignsCodesCodeDelete
     *
     * Delete a coupon
     *
     * @param int $code code (required)
     * @param int $without_used Do not delete used coupons (optional)
     *
     * @return PlentyDataSimpleRestResponse
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersCouponsCampaignsCodesCodeDelete($code, $without_used = null)
    {
        list($response) = $this->restOrdersCouponsCampaignsCodesCodeDeleteWithHttpInfo($code, $without_used);
        return $response;
    }

    /**
     * Operation restOrdersCouponsCampaignsCodesCodeDeleteWithHttpInfo
     *
     * Delete a coupon
     *
     * @param int $code (required)
     * @param int $without_used Do not delete used coupons (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyDataSimpleRestResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersCouponsCampaignsCodesCodeDeleteWithHttpInfo($code, $without_used = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyDataSimpleRestResponse';
        $request = $this->restOrdersCouponsCampaignsCodesCodeDeleteRequest($code, $without_used);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyDataSimpleRestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersCouponsCampaignsCodesCodeDeleteAsync
     *
     * Delete a coupon
     *
     * @param int $code (required)
     * @param int $without_used Do not delete used coupons (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersCouponsCampaignsCodesCodeDeleteAsync($code, $without_used = null)
    {
        return $this->restOrdersCouponsCampaignsCodesCodeDeleteAsyncWithHttpInfo($code, $without_used)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersCouponsCampaignsCodesCodeDeleteAsyncWithHttpInfo
     *
     * Delete a coupon
     *
     * @param int $code (required)
     * @param int $without_used Do not delete used coupons (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersCouponsCampaignsCodesCodeDeleteAsyncWithHttpInfo($code, $without_used = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyDataSimpleRestResponse';
        $request = $this->restOrdersCouponsCampaignsCodesCodeDeleteRequest($code, $without_used);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersCouponsCampaignsCodesCodeDelete'
     *
     * @param int $code (required)
     * @param int $without_used Do not delete used coupons (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersCouponsCampaignsCodesCodeDeleteRequest($code, $without_used = null)
    {
        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $code when calling restOrdersCouponsCampaignsCodesCodeDelete'
            );
        }

        $resourcePath = '/rest/orders/coupons/campaigns/codes/{code}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($without_used !== null) {
            $queryParams['withoutUsed'] = ObjectSerializer::toQueryValue($without_used);
        }

        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                '{' . 'code' . '}',
                ObjectSerializer::toPathValue($code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersCouponsCampaignsCodesCodeDisabledIsDisabledPut
     *
     * Disable or enable coupon
     *
     * @param int $code code (required)
     * @param int $is_disabled is_disabled (required)
     *
     * @return PlentyDataSimpleRestResponse
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersCouponsCampaignsCodesCodeDisabledIsDisabledPut($code, $is_disabled)
    {
        list($response) = $this->restOrdersCouponsCampaignsCodesCodeDisabledIsDisabledPutWithHttpInfo($code, $is_disabled);
        return $response;
    }

    /**
     * Operation restOrdersCouponsCampaignsCodesCodeDisabledIsDisabledPutWithHttpInfo
     *
     * Disable or enable coupon
     *
     * @param int $code (required)
     * @param int $is_disabled (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyDataSimpleRestResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersCouponsCampaignsCodesCodeDisabledIsDisabledPutWithHttpInfo($code, $is_disabled)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyDataSimpleRestResponse';
        $request = $this->restOrdersCouponsCampaignsCodesCodeDisabledIsDisabledPutRequest($code, $is_disabled);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyDataSimpleRestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersCouponsCampaignsCodesCodeDisabledIsDisabledPutAsync
     *
     * Disable or enable coupon
     *
     * @param int $code (required)
     * @param int $is_disabled (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersCouponsCampaignsCodesCodeDisabledIsDisabledPutAsync($code, $is_disabled)
    {
        return $this->restOrdersCouponsCampaignsCodesCodeDisabledIsDisabledPutAsyncWithHttpInfo($code, $is_disabled)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersCouponsCampaignsCodesCodeDisabledIsDisabledPutAsyncWithHttpInfo
     *
     * Disable or enable coupon
     *
     * @param int $code (required)
     * @param int $is_disabled (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersCouponsCampaignsCodesCodeDisabledIsDisabledPutAsyncWithHttpInfo($code, $is_disabled)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyDataSimpleRestResponse';
        $request = $this->restOrdersCouponsCampaignsCodesCodeDisabledIsDisabledPutRequest($code, $is_disabled);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersCouponsCampaignsCodesCodeDisabledIsDisabledPut'
     *
     * @param int $code (required)
     * @param int $is_disabled (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersCouponsCampaignsCodesCodeDisabledIsDisabledPutRequest($code, $is_disabled)
    {
        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $code when calling restOrdersCouponsCampaignsCodesCodeDisabledIsDisabledPut'
            );
        }
        // verify the required parameter 'is_disabled' is set
        if ($is_disabled === null || (is_array($is_disabled) && count($is_disabled) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $is_disabled when calling restOrdersCouponsCampaignsCodesCodeDisabledIsDisabledPut'
            );
        }

        $resourcePath = '/rest/orders/coupons/campaigns/codes/{code}/disabled/{isDisabled}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                '{' . 'code' . '}',
                ObjectSerializer::toPathValue($code),
                $resourcePath
            );
        }
        // path params
        if ($is_disabled !== null) {
            $resourcePath = str_replace(
                '{' . 'isDisabled' . '}',
                ObjectSerializer::toPathValue($is_disabled),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersCouponsCampaignsCodesCodeGet
     *
     * Get coupon code information
     *
     * @param string $code The coupon code (required)
     * @param string $with Load additional relations for a coupon code. Currently possible are:      * &lt;ul&gt;      *   &lt;li&gt;&#x27;campaign&#x27; &#x3D; The coupon campaign to which this code belongs to.&lt;/li&gt;      * &lt;/ul&gt;      * Example: &lt;code&gt;?with&#x3D;campaign&lt;/code&gt; (optional)
     *
     * @return PlentyModulesOrderCouponCampaignCodeModelsCouponCampaignCode
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersCouponsCampaignsCodesCodeGet($code, $with = null)
    {
        list($response) = $this->restOrdersCouponsCampaignsCodesCodeGetWithHttpInfo($code, $with);
        return $response;
    }

    /**
     * Operation restOrdersCouponsCampaignsCodesCodeGetWithHttpInfo
     *
     * Get coupon code information
     *
     * @param string $code The coupon code (required)
     * @param string $with Load additional relations for a coupon code. Currently possible are:      * &lt;ul&gt;      *   &lt;li&gt;&#x27;campaign&#x27; &#x3D; The coupon campaign to which this code belongs to.&lt;/li&gt;      * &lt;/ul&gt;      * Example: &lt;code&gt;?with&#x3D;campaign&lt;/code&gt; (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCouponCampaignCodeModelsCouponCampaignCode, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersCouponsCampaignsCodesCodeGetWithHttpInfo($code, $with = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCouponCampaignCodeModelsCouponCampaignCode';
        $request = $this->restOrdersCouponsCampaignsCodesCodeGetRequest($code, $with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCouponCampaignCodeModelsCouponCampaignCode',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersCouponsCampaignsCodesCodeGetAsync
     *
     * Get coupon code information
     *
     * @param string $code The coupon code (required)
     * @param string $with Load additional relations for a coupon code. Currently possible are:      * &lt;ul&gt;      *   &lt;li&gt;&#x27;campaign&#x27; &#x3D; The coupon campaign to which this code belongs to.&lt;/li&gt;      * &lt;/ul&gt;      * Example: &lt;code&gt;?with&#x3D;campaign&lt;/code&gt; (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersCouponsCampaignsCodesCodeGetAsync($code, $with = null)
    {
        return $this->restOrdersCouponsCampaignsCodesCodeGetAsyncWithHttpInfo($code, $with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersCouponsCampaignsCodesCodeGetAsyncWithHttpInfo
     *
     * Get coupon code information
     *
     * @param string $code The coupon code (required)
     * @param string $with Load additional relations for a coupon code. Currently possible are:      * &lt;ul&gt;      *   &lt;li&gt;&#x27;campaign&#x27; &#x3D; The coupon campaign to which this code belongs to.&lt;/li&gt;      * &lt;/ul&gt;      * Example: &lt;code&gt;?with&#x3D;campaign&lt;/code&gt; (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersCouponsCampaignsCodesCodeGetAsyncWithHttpInfo($code, $with = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCouponCampaignCodeModelsCouponCampaignCode';
        $request = $this->restOrdersCouponsCampaignsCodesCodeGetRequest($code, $with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersCouponsCampaignsCodesCodeGet'
     *
     * @param string $code The coupon code (required)
     * @param string $with Load additional relations for a coupon code. Currently possible are:      * &lt;ul&gt;      *   &lt;li&gt;&#x27;campaign&#x27; &#x3D; The coupon campaign to which this code belongs to.&lt;/li&gt;      * &lt;/ul&gt;      * Example: &lt;code&gt;?with&#x3D;campaign&lt;/code&gt; (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersCouponsCampaignsCodesCodeGetRequest($code, $with = null)
    {
        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $code when calling restOrdersCouponsCampaignsCodesCodeGet'
            );
        }

        $resourcePath = '/rest/orders/coupons/campaigns/codes/{code}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($with !== null) {
            $queryParams['with'] = ObjectSerializer::toQueryValue($with);
        }

        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                '{' . 'code' . '}',
                ObjectSerializer::toPathValue($code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersCouponsCodesContactsContactIdGet
     *
     * List redeemed coupon codes of a contact
     *
     * @param int $contact_id The ID of the contact (required)
     * @param int $page The page to get. The default page that will be returned is page 1. (optional)
     * @param int $items_per_page The number of coupons to be displayed per page. The default number of coupons per page is 50. (optional)
     *
     * @return object
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersCouponsCodesContactsContactIdGet($contact_id, $page = null, $items_per_page = null)
    {
        list($response) = $this->restOrdersCouponsCodesContactsContactIdGetWithHttpInfo($contact_id, $page, $items_per_page);
        return $response;
    }

    /**
     * Operation restOrdersCouponsCodesContactsContactIdGetWithHttpInfo
     *
     * List redeemed coupon codes of a contact
     *
     * @param int $contact_id The ID of the contact (required)
     * @param int $page The page to get. The default page that will be returned is page 1. (optional)
     * @param int $items_per_page The number of coupons to be displayed per page. The default number of coupons per page is 50. (optional)
     *
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersCouponsCodesContactsContactIdGetWithHttpInfo($contact_id, $page = null, $items_per_page = null)
    {
        $returnType = 'object';
        $request = $this->restOrdersCouponsCodesContactsContactIdGetRequest($contact_id, $page, $items_per_page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersCouponsCodesContactsContactIdGetAsync
     *
     * List redeemed coupon codes of a contact
     *
     * @param int $contact_id The ID of the contact (required)
     * @param int $page The page to get. The default page that will be returned is page 1. (optional)
     * @param int $items_per_page The number of coupons to be displayed per page. The default number of coupons per page is 50. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersCouponsCodesContactsContactIdGetAsync($contact_id, $page = null, $items_per_page = null)
    {
        return $this->restOrdersCouponsCodesContactsContactIdGetAsyncWithHttpInfo($contact_id, $page, $items_per_page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersCouponsCodesContactsContactIdGetAsyncWithHttpInfo
     *
     * List redeemed coupon codes of a contact
     *
     * @param int $contact_id The ID of the contact (required)
     * @param int $page The page to get. The default page that will be returned is page 1. (optional)
     * @param int $items_per_page The number of coupons to be displayed per page. The default number of coupons per page is 50. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersCouponsCodesContactsContactIdGetAsyncWithHttpInfo($contact_id, $page = null, $items_per_page = null)
    {
        $returnType = 'object';
        $request = $this->restOrdersCouponsCodesContactsContactIdGetRequest($contact_id, $page, $items_per_page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersCouponsCodesContactsContactIdGet'
     *
     * @param int $contact_id The ID of the contact (required)
     * @param int $page The page to get. The default page that will be returned is page 1. (optional)
     * @param int $items_per_page The number of coupons to be displayed per page. The default number of coupons per page is 50. (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersCouponsCodesContactsContactIdGetRequest($contact_id, $page = null, $items_per_page = null)
    {
        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $contact_id when calling restOrdersCouponsCodesContactsContactIdGet'
            );
        }

        $resourcePath = '/rest/orders/coupons/codes/contacts/{contactId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($items_per_page !== null) {
            $queryParams['itemsPerPage'] = ObjectSerializer::toQueryValue($items_per_page);
        }

        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contactId' . '}',
                ObjectSerializer::toPathValue($contact_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersCouponsCodesCouponPost
     *
     * Validate a coupon
     *
     * @param int $plenty_id The plenty id. (required)
     * @param int $ship_to_country The country of delivery. (required)
     * @param string $coupon The coupon to validate. (required)
     * @param object $body body (optional)
     * @param bool $call_from_scheduler Flag that indicates whether the validation is requested by a subscription order or not. TRUE &#x3D; The validation is requested by a subscription order. FALSE &#x3D; The validation is not requested by a subscription order. (optional)
     * @param string $tax_id_number The tax id number. (optional)
     * @param int $contact_class The contact class. (optional)
     * @param int $contact_type The contact type. (optional)
     *
     * @return PlentyModulesOrderCouponCodeValidationModelsCouponCodeValidation
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     */
    public function restOrdersCouponsCodesCouponPost($plenty_id, $ship_to_country, $coupon, $body = null, $call_from_scheduler = null, $tax_id_number = null, $contact_class = null, $contact_type = null)
    {
        list($response) = $this->restOrdersCouponsCodesCouponPostWithHttpInfo($plenty_id, $ship_to_country, $coupon, $body, $call_from_scheduler, $tax_id_number, $contact_class, $contact_type);
        return $response;
    }

    /**
     * Operation restOrdersCouponsCodesCouponPostWithHttpInfo
     *
     * Validate a coupon
     *
     * @param int $plenty_id The plenty id. (required)
     * @param int $ship_to_country The country of delivery. (required)
     * @param string $coupon The coupon to validate. (required)
     * @param object $body (optional)
     * @param bool $call_from_scheduler Flag that indicates whether the validation is requested by a subscription order or not. TRUE &#x3D; The validation is requested by a subscription order. FALSE &#x3D; The validation is not requested by a subscription order. (optional)
     * @param string $tax_id_number The tax id number. (optional)
     * @param int $contact_class The contact class. (optional)
     * @param int $contact_type The contact type. (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCouponCodeValidationModelsCouponCodeValidation, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     */
    public function restOrdersCouponsCodesCouponPostWithHttpInfo($plenty_id, $ship_to_country, $coupon, $body = null, $call_from_scheduler = null, $tax_id_number = null, $contact_class = null, $contact_type = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCouponCodeValidationModelsCouponCodeValidation';
        $request = $this->restOrdersCouponsCodesCouponPostRequest($plenty_id, $ship_to_country, $coupon, $body, $call_from_scheduler, $tax_id_number, $contact_class, $contact_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCouponCodeValidationModelsCouponCodeValidation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersCouponsCodesCouponPostAsync
     *
     * Validate a coupon
     *
     * @param int $plenty_id The plenty id. (required)
     * @param int $ship_to_country The country of delivery. (required)
     * @param string $coupon The coupon to validate. (required)
     * @param object $body (optional)
     * @param bool $call_from_scheduler Flag that indicates whether the validation is requested by a subscription order or not. TRUE &#x3D; The validation is requested by a subscription order. FALSE &#x3D; The validation is not requested by a subscription order. (optional)
     * @param string $tax_id_number The tax id number. (optional)
     * @param int $contact_class The contact class. (optional)
     * @param int $contact_type The contact type. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersCouponsCodesCouponPostAsync($plenty_id, $ship_to_country, $coupon, $body = null, $call_from_scheduler = null, $tax_id_number = null, $contact_class = null, $contact_type = null)
    {
        return $this->restOrdersCouponsCodesCouponPostAsyncWithHttpInfo($plenty_id, $ship_to_country, $coupon, $body, $call_from_scheduler, $tax_id_number, $contact_class, $contact_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersCouponsCodesCouponPostAsyncWithHttpInfo
     *
     * Validate a coupon
     *
     * @param int $plenty_id The plenty id. (required)
     * @param int $ship_to_country The country of delivery. (required)
     * @param string $coupon The coupon to validate. (required)
     * @param object $body (optional)
     * @param bool $call_from_scheduler Flag that indicates whether the validation is requested by a subscription order or not. TRUE &#x3D; The validation is requested by a subscription order. FALSE &#x3D; The validation is not requested by a subscription order. (optional)
     * @param string $tax_id_number The tax id number. (optional)
     * @param int $contact_class The contact class. (optional)
     * @param int $contact_type The contact type. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersCouponsCodesCouponPostAsyncWithHttpInfo($plenty_id, $ship_to_country, $coupon, $body = null, $call_from_scheduler = null, $tax_id_number = null, $contact_class = null, $contact_type = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCouponCodeValidationModelsCouponCodeValidation';
        $request = $this->restOrdersCouponsCodesCouponPostRequest($plenty_id, $ship_to_country, $coupon, $body, $call_from_scheduler, $tax_id_number, $contact_class, $contact_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersCouponsCodesCouponPost'
     *
     * @param int $plenty_id The plenty id. (required)
     * @param int $ship_to_country The country of delivery. (required)
     * @param string $coupon The coupon to validate. (required)
     * @param object $body (optional)
     * @param bool $call_from_scheduler Flag that indicates whether the validation is requested by a subscription order or not. TRUE &#x3D; The validation is requested by a subscription order. FALSE &#x3D; The validation is not requested by a subscription order. (optional)
     * @param string $tax_id_number The tax id number. (optional)
     * @param int $contact_class The contact class. (optional)
     * @param int $contact_type The contact type. (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersCouponsCodesCouponPostRequest($plenty_id, $ship_to_country, $coupon, $body = null, $call_from_scheduler = null, $tax_id_number = null, $contact_class = null, $contact_type = null)
    {
        // verify the required parameter 'plenty_id' is set
        if ($plenty_id === null || (is_array($plenty_id) && count($plenty_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plenty_id when calling restOrdersCouponsCodesCouponPost'
            );
        }
        // verify the required parameter 'ship_to_country' is set
        if ($ship_to_country === null || (is_array($ship_to_country) && count($ship_to_country) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $ship_to_country when calling restOrdersCouponsCodesCouponPost'
            );
        }
        // verify the required parameter 'coupon' is set
        if ($coupon === null || (is_array($coupon) && count($coupon) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $coupon when calling restOrdersCouponsCodesCouponPost'
            );
        }

        $resourcePath = '/rest/orders/coupons/codes/{coupon}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($call_from_scheduler !== null) {
            $queryParams['callFromScheduler'] = ObjectSerializer::toQueryValue($call_from_scheduler);
        }
        // query params
        if ($plenty_id !== null) {
            $queryParams['plentyId'] = ObjectSerializer::toQueryValue($plenty_id);
        }
        // query params
        if ($ship_to_country !== null) {
            $queryParams['shipToCountry'] = ObjectSerializer::toQueryValue($ship_to_country);
        }
        // query params
        if ($tax_id_number !== null) {
            $queryParams['taxIdNumber'] = ObjectSerializer::toQueryValue($tax_id_number);
        }
        // query params
        if ($contact_class !== null) {
            $queryParams['contactClass'] = ObjectSerializer::toQueryValue($contact_class);
        }
        // query params
        if ($contact_type !== null) {
            $queryParams['contactType'] = ObjectSerializer::toQueryValue($contact_type);
        }

        // path params
        if ($coupon !== null) {
            $resourcePath = str_replace(
                '{' . 'coupon' . '}',
                ObjectSerializer::toPathValue($coupon),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersCouponsCodesPost
     *
     * Validate multiple coupons
     *
     * @param int $coupons The coupons to validate. (required)
     * @param int $plenty_id The plenty id. (required)
     * @param int $ship_to_country The country of delivery. (required)
     * @param object $body body (optional)
     * @param bool $call_from_scheduler Flag that indicates whether the validation is requested by a subscription order or not. TRUE &#x3D; The validation is requested by a subscription order. FALSE &#x3D; The validation is not requested by a subscription order. (optional)
     * @param string $tax_id_number The tax id number. (optional)
     * @param int $contact_class The contact class. (optional)
     * @param int $contact_type The contact type. (optional)
     *
     * @return PlentyModulesOrderCouponCodeValidationModelsCouponCodeValidation[]
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     */
    public function restOrdersCouponsCodesPost($coupons, $plenty_id, $ship_to_country, $body = null, $call_from_scheduler = null, $tax_id_number = null, $contact_class = null, $contact_type = null)
    {
        list($response) = $this->restOrdersCouponsCodesPostWithHttpInfo($coupons, $plenty_id, $ship_to_country, $body, $call_from_scheduler, $tax_id_number, $contact_class, $contact_type);
        return $response;
    }

    /**
     * Operation restOrdersCouponsCodesPostWithHttpInfo
     *
     * Validate multiple coupons
     *
     * @param int $coupons The coupons to validate. (required)
     * @param int $plenty_id The plenty id. (required)
     * @param int $ship_to_country The country of delivery. (required)
     * @param object $body (optional)
     * @param bool $call_from_scheduler Flag that indicates whether the validation is requested by a subscription order or not. TRUE &#x3D; The validation is requested by a subscription order. FALSE &#x3D; The validation is not requested by a subscription order. (optional)
     * @param string $tax_id_number The tax id number. (optional)
     * @param int $contact_class The contact class. (optional)
     * @param int $contact_type The contact type. (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCouponCodeValidationModelsCouponCodeValidation[], HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     */
    public function restOrdersCouponsCodesPostWithHttpInfo($coupons, $plenty_id, $ship_to_country, $body = null, $call_from_scheduler = null, $tax_id_number = null, $contact_class = null, $contact_type = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCouponCodeValidationModelsCouponCodeValidation[]';
        $request = $this->restOrdersCouponsCodesPostRequest($coupons, $plenty_id, $ship_to_country, $body, $call_from_scheduler, $tax_id_number, $contact_class, $contact_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCouponCodeValidationModelsCouponCodeValidation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersCouponsCodesPostAsync
     *
     * Validate multiple coupons
     *
     * @param int $coupons The coupons to validate. (required)
     * @param int $plenty_id The plenty id. (required)
     * @param int $ship_to_country The country of delivery. (required)
     * @param object $body (optional)
     * @param bool $call_from_scheduler Flag that indicates whether the validation is requested by a subscription order or not. TRUE &#x3D; The validation is requested by a subscription order. FALSE &#x3D; The validation is not requested by a subscription order. (optional)
     * @param string $tax_id_number The tax id number. (optional)
     * @param int $contact_class The contact class. (optional)
     * @param int $contact_type The contact type. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersCouponsCodesPostAsync($coupons, $plenty_id, $ship_to_country, $body = null, $call_from_scheduler = null, $tax_id_number = null, $contact_class = null, $contact_type = null)
    {
        return $this->restOrdersCouponsCodesPostAsyncWithHttpInfo($coupons, $plenty_id, $ship_to_country, $body, $call_from_scheduler, $tax_id_number, $contact_class, $contact_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersCouponsCodesPostAsyncWithHttpInfo
     *
     * Validate multiple coupons
     *
     * @param int $coupons The coupons to validate. (required)
     * @param int $plenty_id The plenty id. (required)
     * @param int $ship_to_country The country of delivery. (required)
     * @param object $body (optional)
     * @param bool $call_from_scheduler Flag that indicates whether the validation is requested by a subscription order or not. TRUE &#x3D; The validation is requested by a subscription order. FALSE &#x3D; The validation is not requested by a subscription order. (optional)
     * @param string $tax_id_number The tax id number. (optional)
     * @param int $contact_class The contact class. (optional)
     * @param int $contact_type The contact type. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersCouponsCodesPostAsyncWithHttpInfo($coupons, $plenty_id, $ship_to_country, $body = null, $call_from_scheduler = null, $tax_id_number = null, $contact_class = null, $contact_type = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCouponCodeValidationModelsCouponCodeValidation[]';
        $request = $this->restOrdersCouponsCodesPostRequest($coupons, $plenty_id, $ship_to_country, $body, $call_from_scheduler, $tax_id_number, $contact_class, $contact_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersCouponsCodesPost'
     *
     * @param int $coupons The coupons to validate. (required)
     * @param int $plenty_id The plenty id. (required)
     * @param int $ship_to_country The country of delivery. (required)
     * @param object $body (optional)
     * @param bool $call_from_scheduler Flag that indicates whether the validation is requested by a subscription order or not. TRUE &#x3D; The validation is requested by a subscription order. FALSE &#x3D; The validation is not requested by a subscription order. (optional)
     * @param string $tax_id_number The tax id number. (optional)
     * @param int $contact_class The contact class. (optional)
     * @param int $contact_type The contact type. (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersCouponsCodesPostRequest($coupons, $plenty_id, $ship_to_country, $body = null, $call_from_scheduler = null, $tax_id_number = null, $contact_class = null, $contact_type = null)
    {
        // verify the required parameter 'coupons' is set
        if ($coupons === null || (is_array($coupons) && count($coupons) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $coupons when calling restOrdersCouponsCodesPost'
            );
        }
        // verify the required parameter 'plenty_id' is set
        if ($plenty_id === null || (is_array($plenty_id) && count($plenty_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $plenty_id when calling restOrdersCouponsCodesPost'
            );
        }
        // verify the required parameter 'ship_to_country' is set
        if ($ship_to_country === null || (is_array($ship_to_country) && count($ship_to_country) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $ship_to_country when calling restOrdersCouponsCodesPost'
            );
        }

        $resourcePath = '/rest/orders/coupons/codes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($coupons !== null) {
            $queryParams['coupons'] = ObjectSerializer::toQueryValue($coupons);
        }
        // query params
        if ($call_from_scheduler !== null) {
            $queryParams['callFromScheduler'] = ObjectSerializer::toQueryValue($call_from_scheduler);
        }
        // query params
        if ($plenty_id !== null) {
            $queryParams['plentyId'] = ObjectSerializer::toQueryValue($plenty_id);
        }
        // query params
        if ($ship_to_country !== null) {
            $queryParams['shipToCountry'] = ObjectSerializer::toQueryValue($ship_to_country);
        }
        // query params
        if ($tax_id_number !== null) {
            $queryParams['taxIdNumber'] = ObjectSerializer::toQueryValue($tax_id_number);
        }
        // query params
        if ($contact_class !== null) {
            $queryParams['contactClass'] = ObjectSerializer::toQueryValue($contact_class);
        }
        // query params
        if ($contact_type !== null) {
            $queryParams['contactType'] = ObjectSerializer::toQueryValue($contact_type);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersCurrenciesCountriesCountryIdGet
     *
     * Get a currency for a country
     *
     * @param int $country_id country_id (required)
     * @param int $columns The attributes to be loaded (optional)
     * @param int $with The relations to be loaded. Valid relations are &#x27;names&#x27; or &#x27;countries&#x27;). (optional)
     *
     * @return PlentyModulesOrderCurrencyModelsCurrency
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersCurrenciesCountriesCountryIdGet($country_id, $columns = null, $with = null)
    {
        list($response) = $this->restOrdersCurrenciesCountriesCountryIdGetWithHttpInfo($country_id, $columns, $with);
        return $response;
    }

    /**
     * Operation restOrdersCurrenciesCountriesCountryIdGetWithHttpInfo
     *
     * Get a currency for a country
     *
     * @param int $country_id (required)
     * @param int $columns The attributes to be loaded (optional)
     * @param int $with The relations to be loaded. Valid relations are &#x27;names&#x27; or &#x27;countries&#x27;). (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCurrencyModelsCurrency, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersCurrenciesCountriesCountryIdGetWithHttpInfo($country_id, $columns = null, $with = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCurrencyModelsCurrency';
        $request = $this->restOrdersCurrenciesCountriesCountryIdGetRequest($country_id, $columns, $with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCurrencyModelsCurrency',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersCurrenciesCountriesCountryIdGetAsync
     *
     * Get a currency for a country
     *
     * @param int $country_id (required)
     * @param int $columns The attributes to be loaded (optional)
     * @param int $with The relations to be loaded. Valid relations are &#x27;names&#x27; or &#x27;countries&#x27;). (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersCurrenciesCountriesCountryIdGetAsync($country_id, $columns = null, $with = null)
    {
        return $this->restOrdersCurrenciesCountriesCountryIdGetAsyncWithHttpInfo($country_id, $columns, $with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersCurrenciesCountriesCountryIdGetAsyncWithHttpInfo
     *
     * Get a currency for a country
     *
     * @param int $country_id (required)
     * @param int $columns The attributes to be loaded (optional)
     * @param int $with The relations to be loaded. Valid relations are &#x27;names&#x27; or &#x27;countries&#x27;). (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersCurrenciesCountriesCountryIdGetAsyncWithHttpInfo($country_id, $columns = null, $with = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCurrencyModelsCurrency';
        $request = $this->restOrdersCurrenciesCountriesCountryIdGetRequest($country_id, $columns, $with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersCurrenciesCountriesCountryIdGet'
     *
     * @param int $country_id (required)
     * @param int $columns The attributes to be loaded (optional)
     * @param int $with The relations to be loaded. Valid relations are &#x27;names&#x27; or &#x27;countries&#x27;). (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersCurrenciesCountriesCountryIdGetRequest($country_id, $columns = null, $with = null)
    {
        // verify the required parameter 'country_id' is set
        if ($country_id === null || (is_array($country_id) && count($country_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $country_id when calling restOrdersCurrenciesCountriesCountryIdGet'
            );
        }

        $resourcePath = '/rest/orders/currencies/countries/{countryId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($columns !== null) {
            $queryParams['columns'] = ObjectSerializer::toQueryValue($columns);
        }
        // query params
        if ($with !== null) {
            $queryParams['with'] = ObjectSerializer::toQueryValue($with);
        }

        // path params
        if ($country_id !== null) {
            $resourcePath = str_replace(
                '{' . 'countryId' . '}',
                ObjectSerializer::toPathValue($country_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersCurrenciesCurrencyIsoCountriesGet
     *
     * List countries for a currency
     *
     * @param string $currency_iso The ISO 4217 code of the currency (required)
     * @param int $columns The attributes to be loaded (optional)
     *
     * @return PlentyModulesOrderShippingCountriesModelsCountry[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersCurrenciesCurrencyIsoCountriesGet($currency_iso, $columns = null)
    {
        list($response) = $this->restOrdersCurrenciesCurrencyIsoCountriesGetWithHttpInfo($currency_iso, $columns);
        return $response;
    }

    /**
     * Operation restOrdersCurrenciesCurrencyIsoCountriesGetWithHttpInfo
     *
     * List countries for a currency
     *
     * @param string $currency_iso The ISO 4217 code of the currency (required)
     * @param int $columns The attributes to be loaded (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingCountriesModelsCountry[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersCurrenciesCurrencyIsoCountriesGetWithHttpInfo($currency_iso, $columns = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingCountriesModelsCountry[]';
        $request = $this->restOrdersCurrenciesCurrencyIsoCountriesGetRequest($currency_iso, $columns);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingCountriesModelsCountry[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersCurrenciesCurrencyIsoCountriesGetAsync
     *
     * List countries for a currency
     *
     * @param string $currency_iso The ISO 4217 code of the currency (required)
     * @param int $columns The attributes to be loaded (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersCurrenciesCurrencyIsoCountriesGetAsync($currency_iso, $columns = null)
    {
        return $this->restOrdersCurrenciesCurrencyIsoCountriesGetAsyncWithHttpInfo($currency_iso, $columns)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersCurrenciesCurrencyIsoCountriesGetAsyncWithHttpInfo
     *
     * List countries for a currency
     *
     * @param string $currency_iso The ISO 4217 code of the currency (required)
     * @param int $columns The attributes to be loaded (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersCurrenciesCurrencyIsoCountriesGetAsyncWithHttpInfo($currency_iso, $columns = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingCountriesModelsCountry[]';
        $request = $this->restOrdersCurrenciesCurrencyIsoCountriesGetRequest($currency_iso, $columns);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersCurrenciesCurrencyIsoCountriesGet'
     *
     * @param string $currency_iso The ISO 4217 code of the currency (required)
     * @param int $columns The attributes to be loaded (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersCurrenciesCurrencyIsoCountriesGetRequest($currency_iso, $columns = null)
    {
        // verify the required parameter 'currency_iso' is set
        if ($currency_iso === null || (is_array($currency_iso) && count($currency_iso) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $currency_iso when calling restOrdersCurrenciesCurrencyIsoCountriesGet'
            );
        }

        $resourcePath = '/rest/orders/currencies/{currencyIso}/countries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($columns !== null) {
            $queryParams['columns'] = ObjectSerializer::toQueryValue($columns);
        }

        // path params
        if ($currency_iso !== null) {
            $resourcePath = str_replace(
                '{' . 'currencyIso' . '}',
                ObjectSerializer::toPathValue($currency_iso),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersCurrenciesCurrencyIsoExchangeRateGet
     *
     * Get the exchange rate for a currency
     *
     * @param int $currency_iso currency_iso (required)
     *
     * @return PlentyModulesOrderCurrencyModelsCurrencyExchangeRate
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersCurrenciesCurrencyIsoExchangeRateGet($currency_iso)
    {
        list($response) = $this->restOrdersCurrenciesCurrencyIsoExchangeRateGetWithHttpInfo($currency_iso);
        return $response;
    }

    /**
     * Operation restOrdersCurrenciesCurrencyIsoExchangeRateGetWithHttpInfo
     *
     * Get the exchange rate for a currency
     *
     * @param int $currency_iso (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCurrencyModelsCurrencyExchangeRate, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersCurrenciesCurrencyIsoExchangeRateGetWithHttpInfo($currency_iso)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCurrencyModelsCurrencyExchangeRate';
        $request = $this->restOrdersCurrenciesCurrencyIsoExchangeRateGetRequest($currency_iso);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCurrencyModelsCurrencyExchangeRate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersCurrenciesCurrencyIsoExchangeRateGetAsync
     *
     * Get the exchange rate for a currency
     *
     * @param int $currency_iso (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersCurrenciesCurrencyIsoExchangeRateGetAsync($currency_iso)
    {
        return $this->restOrdersCurrenciesCurrencyIsoExchangeRateGetAsyncWithHttpInfo($currency_iso)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersCurrenciesCurrencyIsoExchangeRateGetAsyncWithHttpInfo
     *
     * Get the exchange rate for a currency
     *
     * @param int $currency_iso (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersCurrenciesCurrencyIsoExchangeRateGetAsyncWithHttpInfo($currency_iso)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCurrencyModelsCurrencyExchangeRate';
        $request = $this->restOrdersCurrenciesCurrencyIsoExchangeRateGetRequest($currency_iso);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersCurrenciesCurrencyIsoExchangeRateGet'
     *
     * @param int $currency_iso (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersCurrenciesCurrencyIsoExchangeRateGetRequest($currency_iso)
    {
        // verify the required parameter 'currency_iso' is set
        if ($currency_iso === null || (is_array($currency_iso) && count($currency_iso) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $currency_iso when calling restOrdersCurrenciesCurrencyIsoExchangeRateGet'
            );
        }

        $resourcePath = '/rest/orders/currencies/{currencyIso}/exchangeRate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($currency_iso !== null) {
            $resourcePath = str_replace(
                '{' . 'currencyIso' . '}',
                ObjectSerializer::toPathValue($currency_iso),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersCurrenciesCurrencyIsoGet
     *
     * Get a currency
     *
     * @param string $currency_iso The ISO 4217 code of the currency (required)
     * @param int $columns The attributes to be loaded (optional)
     * @param int $with The relations to be loaded. Valid relations are &#x27;names&#x27; or &#x27;countries&#x27; (optional)
     *
     * @return PlentyModulesOrderCurrencyModelsCurrency
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersCurrenciesCurrencyIsoGet($currency_iso, $columns = null, $with = null)
    {
        list($response) = $this->restOrdersCurrenciesCurrencyIsoGetWithHttpInfo($currency_iso, $columns, $with);
        return $response;
    }

    /**
     * Operation restOrdersCurrenciesCurrencyIsoGetWithHttpInfo
     *
     * Get a currency
     *
     * @param string $currency_iso The ISO 4217 code of the currency (required)
     * @param int $columns The attributes to be loaded (optional)
     * @param int $with The relations to be loaded. Valid relations are &#x27;names&#x27; or &#x27;countries&#x27; (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCurrencyModelsCurrency, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersCurrenciesCurrencyIsoGetWithHttpInfo($currency_iso, $columns = null, $with = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCurrencyModelsCurrency';
        $request = $this->restOrdersCurrenciesCurrencyIsoGetRequest($currency_iso, $columns, $with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCurrencyModelsCurrency',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersCurrenciesCurrencyIsoGetAsync
     *
     * Get a currency
     *
     * @param string $currency_iso The ISO 4217 code of the currency (required)
     * @param int $columns The attributes to be loaded (optional)
     * @param int $with The relations to be loaded. Valid relations are &#x27;names&#x27; or &#x27;countries&#x27; (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersCurrenciesCurrencyIsoGetAsync($currency_iso, $columns = null, $with = null)
    {
        return $this->restOrdersCurrenciesCurrencyIsoGetAsyncWithHttpInfo($currency_iso, $columns, $with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersCurrenciesCurrencyIsoGetAsyncWithHttpInfo
     *
     * Get a currency
     *
     * @param string $currency_iso The ISO 4217 code of the currency (required)
     * @param int $columns The attributes to be loaded (optional)
     * @param int $with The relations to be loaded. Valid relations are &#x27;names&#x27; or &#x27;countries&#x27; (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersCurrenciesCurrencyIsoGetAsyncWithHttpInfo($currency_iso, $columns = null, $with = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCurrencyModelsCurrency';
        $request = $this->restOrdersCurrenciesCurrencyIsoGetRequest($currency_iso, $columns, $with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersCurrenciesCurrencyIsoGet'
     *
     * @param string $currency_iso The ISO 4217 code of the currency (required)
     * @param int $columns The attributes to be loaded (optional)
     * @param int $with The relations to be loaded. Valid relations are &#x27;names&#x27; or &#x27;countries&#x27; (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersCurrenciesCurrencyIsoGetRequest($currency_iso, $columns = null, $with = null)
    {
        // verify the required parameter 'currency_iso' is set
        if ($currency_iso === null || (is_array($currency_iso) && count($currency_iso) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $currency_iso when calling restOrdersCurrenciesCurrencyIsoGet'
            );
        }

        $resourcePath = '/rest/orders/currencies/{currencyIso}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($columns !== null) {
            $queryParams['columns'] = ObjectSerializer::toQueryValue($columns);
        }
        // query params
        if ($with !== null) {
            $queryParams['with'] = ObjectSerializer::toQueryValue($with);
        }

        // path params
        if ($currency_iso !== null) {
            $resourcePath = str_replace(
                '{' . 'currencyIso' . '}',
                ObjectSerializer::toPathValue($currency_iso),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersCurrenciesGet
     *
     * List currencies
     *
     * @param int $columns The attributes to be loaded (optional)
     * @param int $with The relations to be loaded. Valid relations are &#x27;names&#x27; or &#x27;countries&#x27;. (optional)
     *
     * @return PlentyModulesOrderCurrencyModelsCurrency[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersCurrenciesGet($columns = null, $with = null)
    {
        list($response) = $this->restOrdersCurrenciesGetWithHttpInfo($columns, $with);
        return $response;
    }

    /**
     * Operation restOrdersCurrenciesGetWithHttpInfo
     *
     * List currencies
     *
     * @param int $columns The attributes to be loaded (optional)
     * @param int $with The relations to be loaded. Valid relations are &#x27;names&#x27; or &#x27;countries&#x27;. (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCurrencyModelsCurrency[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersCurrenciesGetWithHttpInfo($columns = null, $with = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCurrencyModelsCurrency[]';
        $request = $this->restOrdersCurrenciesGetRequest($columns, $with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCurrencyModelsCurrency[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersCurrenciesGetAsync
     *
     * List currencies
     *
     * @param int $columns The attributes to be loaded (optional)
     * @param int $with The relations to be loaded. Valid relations are &#x27;names&#x27; or &#x27;countries&#x27;. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersCurrenciesGetAsync($columns = null, $with = null)
    {
        return $this->restOrdersCurrenciesGetAsyncWithHttpInfo($columns, $with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersCurrenciesGetAsyncWithHttpInfo
     *
     * List currencies
     *
     * @param int $columns The attributes to be loaded (optional)
     * @param int $with The relations to be loaded. Valid relations are &#x27;names&#x27; or &#x27;countries&#x27;. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersCurrenciesGetAsyncWithHttpInfo($columns = null, $with = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCurrencyModelsCurrency[]';
        $request = $this->restOrdersCurrenciesGetRequest($columns, $with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersCurrenciesGet'
     *
     * @param int $columns The attributes to be loaded (optional)
     * @param int $with The relations to be loaded. Valid relations are &#x27;names&#x27; or &#x27;countries&#x27;. (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersCurrenciesGetRequest($columns = null, $with = null)
    {

        $resourcePath = '/rest/orders/currencies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($columns !== null) {
            $queryParams['columns'] = ObjectSerializer::toQueryValue($columns);
        }
        // query params
        if ($with !== null) {
            $queryParams['with'] = ObjectSerializer::toQueryValue($with);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersDatesTypesGet
     *
     * List order date types
     *
     *
     * @return IlluminateDatabaseEloquentCollection
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersDatesTypesGet()
    {
        list($response) = $this->restOrdersDatesTypesGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation restOrdersDatesTypesGetWithHttpInfo
     *
     * List order date types
     *
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\IlluminateDatabaseEloquentCollection, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersDatesTypesGetWithHttpInfo()
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\IlluminateDatabaseEloquentCollection';
        $request = $this->restOrdersDatesTypesGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\IlluminateDatabaseEloquentCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersDatesTypesGetAsync
     *
     * List order date types
     *
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersDatesTypesGetAsync()
    {
        return $this->restOrdersDatesTypesGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersDatesTypesGetAsyncWithHttpInfo
     *
     * List order date types
     *
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersDatesTypesGetAsyncWithHttpInfo()
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\IlluminateDatabaseEloquentCollection';
        $request = $this->restOrdersDatesTypesGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersDatesTypesGet'
     *
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersDatesTypesGetRequest()
    {

        $resourcePath = '/rest/orders/dates/types';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersDatesTypesTypeIdGet
     *
     * Find an order date type by it's ID
     *
     * @param int $type_id type_id (required)
     *
     * @return PlentyModulesOrderDateModelsOrderDateType
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersDatesTypesTypeIdGet($type_id)
    {
        list($response) = $this->restOrdersDatesTypesTypeIdGetWithHttpInfo($type_id);
        return $response;
    }

    /**
     * Operation restOrdersDatesTypesTypeIdGetWithHttpInfo
     *
     * Find an order date type by it's ID
     *
     * @param int $type_id (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderDateType, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersDatesTypesTypeIdGetWithHttpInfo($type_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderDateType';
        $request = $this->restOrdersDatesTypesTypeIdGetRequest($type_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderDateType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersDatesTypesTypeIdGetAsync
     *
     * Find an order date type by it's ID
     *
     * @param int $type_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersDatesTypesTypeIdGetAsync($type_id)
    {
        return $this->restOrdersDatesTypesTypeIdGetAsyncWithHttpInfo($type_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersDatesTypesTypeIdGetAsyncWithHttpInfo
     *
     * Find an order date type by it's ID
     *
     * @param int $type_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersDatesTypesTypeIdGetAsyncWithHttpInfo($type_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderDateType';
        $request = $this->restOrdersDatesTypesTypeIdGetRequest($type_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersDatesTypesTypeIdGet'
     *
     * @param int $type_id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersDatesTypesTypeIdGetRequest($type_id)
    {
        // verify the required parameter 'type_id' is set
        if ($type_id === null || (is_array($type_id) && count($type_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $type_id when calling restOrdersDatesTypesTypeIdGet'
            );
        }

        $resourcePath = '/rest/orders/dates/types/{typeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'typeId' . '}',
                ObjectSerializer::toPathValue($type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersDatesTypesTypeIdNamesGet
     *
     * List names of an order date type
     *
     * @param int $type_id The Id of the OrderDateType to be found (required)
     *
     * @return PlentyModulesOrderDateModelsOrderDateTypeName[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersDatesTypesTypeIdNamesGet($type_id)
    {
        list($response) = $this->restOrdersDatesTypesTypeIdNamesGetWithHttpInfo($type_id);
        return $response;
    }

    /**
     * Operation restOrdersDatesTypesTypeIdNamesGetWithHttpInfo
     *
     * List names of an order date type
     *
     * @param int $type_id The Id of the OrderDateType to be found (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderDateTypeName[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersDatesTypesTypeIdNamesGetWithHttpInfo($type_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderDateTypeName[]';
        $request = $this->restOrdersDatesTypesTypeIdNamesGetRequest($type_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderDateTypeName[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersDatesTypesTypeIdNamesGetAsync
     *
     * List names of an order date type
     *
     * @param int $type_id The Id of the OrderDateType to be found (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersDatesTypesTypeIdNamesGetAsync($type_id)
    {
        return $this->restOrdersDatesTypesTypeIdNamesGetAsyncWithHttpInfo($type_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersDatesTypesTypeIdNamesGetAsyncWithHttpInfo
     *
     * List names of an order date type
     *
     * @param int $type_id The Id of the OrderDateType to be found (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersDatesTypesTypeIdNamesGetAsyncWithHttpInfo($type_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderDateTypeName[]';
        $request = $this->restOrdersDatesTypesTypeIdNamesGetRequest($type_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersDatesTypesTypeIdNamesGet'
     *
     * @param int $type_id The Id of the OrderDateType to be found (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersDatesTypesTypeIdNamesGetRequest($type_id)
    {
        // verify the required parameter 'type_id' is set
        if ($type_id === null || (is_array($type_id) && count($type_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $type_id when calling restOrdersDatesTypesTypeIdNamesGet'
            );
        }

        $resourcePath = '/rest/orders/dates/types/{typeId}/names';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'typeId' . '}',
                ObjectSerializer::toPathValue($type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersDatesTypesTypeIdNamesLangGet
     *
     * Get a name of an order date type
     *
     * @param int $type_id The ID of the order date type to be found (required)
     * @param string $lang The language of the order date type name (required)
     *
     * @return PlentyModulesOrderDateModelsOrderDateTypeName
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersDatesTypesTypeIdNamesLangGet($type_id, $lang)
    {
        list($response) = $this->restOrdersDatesTypesTypeIdNamesLangGetWithHttpInfo($type_id, $lang);
        return $response;
    }

    /**
     * Operation restOrdersDatesTypesTypeIdNamesLangGetWithHttpInfo
     *
     * Get a name of an order date type
     *
     * @param int $type_id The ID of the order date type to be found (required)
     * @param string $lang The language of the order date type name (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderDateTypeName, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersDatesTypesTypeIdNamesLangGetWithHttpInfo($type_id, $lang)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderDateTypeName';
        $request = $this->restOrdersDatesTypesTypeIdNamesLangGetRequest($type_id, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderDateTypeName',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersDatesTypesTypeIdNamesLangGetAsync
     *
     * Get a name of an order date type
     *
     * @param int $type_id The ID of the order date type to be found (required)
     * @param string $lang The language of the order date type name (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersDatesTypesTypeIdNamesLangGetAsync($type_id, $lang)
    {
        return $this->restOrdersDatesTypesTypeIdNamesLangGetAsyncWithHttpInfo($type_id, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersDatesTypesTypeIdNamesLangGetAsyncWithHttpInfo
     *
     * Get a name of an order date type
     *
     * @param int $type_id The ID of the order date type to be found (required)
     * @param string $lang The language of the order date type name (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersDatesTypesTypeIdNamesLangGetAsyncWithHttpInfo($type_id, $lang)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderDateTypeName';
        $request = $this->restOrdersDatesTypesTypeIdNamesLangGetRequest($type_id, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersDatesTypesTypeIdNamesLangGet'
     *
     * @param int $type_id The ID of the order date type to be found (required)
     * @param string $lang The language of the order date type name (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersDatesTypesTypeIdNamesLangGetRequest($type_id, $lang)
    {
        // verify the required parameter 'type_id' is set
        if ($type_id === null || (is_array($type_id) && count($type_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $type_id when calling restOrdersDatesTypesTypeIdNamesLangGet'
            );
        }
        // verify the required parameter 'lang' is set
        if ($lang === null || (is_array($lang) && count($lang) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $lang when calling restOrdersDatesTypesTypeIdNamesLangGet'
            );
        }

        $resourcePath = '/rest/orders/dates/types/{typeId}/names/{lang}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'typeId' . '}',
                ObjectSerializer::toPathValue($type_id),
                $resourcePath
            );
        }
        // path params
        if ($lang !== null) {
            $resourcePath = str_replace(
                '{' . 'lang' . '}',
                ObjectSerializer::toPathValue($lang),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersDocumentsAccountingSummaryGet
     *
     * List document accounting summaries
     *
     * @param int $order_id The ID of the order. (optional)
     * @param string $document_type The document type. (optional)
     * @param string $created_at_from Get entries with createdAt date after this date. (optional)
     * @param string $created_at_to Get entries with createdAt date before this date. (optional)
     * @param int $page The page to get. The default page that will be returned is page 1. (optional)
     * @param int $items_per_page The number of summaries to be displayed per page. The default number of orders per page is 10. (optional)
     *
     * @return IlluminateSupportCollection
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersDocumentsAccountingSummaryGet($order_id = null, $document_type = null, $created_at_from = null, $created_at_to = null, $page = null, $items_per_page = null)
    {
        list($response) = $this->restOrdersDocumentsAccountingSummaryGetWithHttpInfo($order_id, $document_type, $created_at_from, $created_at_to, $page, $items_per_page);
        return $response;
    }

    /**
     * Operation restOrdersDocumentsAccountingSummaryGetWithHttpInfo
     *
     * List document accounting summaries
     *
     * @param int $order_id The ID of the order. (optional)
     * @param string $document_type The document type. (optional)
     * @param string $created_at_from Get entries with createdAt date after this date. (optional)
     * @param string $created_at_to Get entries with createdAt date before this date. (optional)
     * @param int $page The page to get. The default page that will be returned is page 1. (optional)
     * @param int $items_per_page The number of summaries to be displayed per page. The default number of orders per page is 10. (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\IlluminateSupportCollection, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersDocumentsAccountingSummaryGetWithHttpInfo($order_id = null, $document_type = null, $created_at_from = null, $created_at_to = null, $page = null, $items_per_page = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\IlluminateSupportCollection';
        $request = $this->restOrdersDocumentsAccountingSummaryGetRequest($order_id, $document_type, $created_at_from, $created_at_to, $page, $items_per_page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\IlluminateSupportCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersDocumentsAccountingSummaryGetAsync
     *
     * List document accounting summaries
     *
     * @param int $order_id The ID of the order. (optional)
     * @param string $document_type The document type. (optional)
     * @param string $created_at_from Get entries with createdAt date after this date. (optional)
     * @param string $created_at_to Get entries with createdAt date before this date. (optional)
     * @param int $page The page to get. The default page that will be returned is page 1. (optional)
     * @param int $items_per_page The number of summaries to be displayed per page. The default number of orders per page is 10. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersDocumentsAccountingSummaryGetAsync($order_id = null, $document_type = null, $created_at_from = null, $created_at_to = null, $page = null, $items_per_page = null)
    {
        return $this->restOrdersDocumentsAccountingSummaryGetAsyncWithHttpInfo($order_id, $document_type, $created_at_from, $created_at_to, $page, $items_per_page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersDocumentsAccountingSummaryGetAsyncWithHttpInfo
     *
     * List document accounting summaries
     *
     * @param int $order_id The ID of the order. (optional)
     * @param string $document_type The document type. (optional)
     * @param string $created_at_from Get entries with createdAt date after this date. (optional)
     * @param string $created_at_to Get entries with createdAt date before this date. (optional)
     * @param int $page The page to get. The default page that will be returned is page 1. (optional)
     * @param int $items_per_page The number of summaries to be displayed per page. The default number of orders per page is 10. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersDocumentsAccountingSummaryGetAsyncWithHttpInfo($order_id = null, $document_type = null, $created_at_from = null, $created_at_to = null, $page = null, $items_per_page = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\IlluminateSupportCollection';
        $request = $this->restOrdersDocumentsAccountingSummaryGetRequest($order_id, $document_type, $created_at_from, $created_at_to, $page, $items_per_page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersDocumentsAccountingSummaryGet'
     *
     * @param int $order_id The ID of the order. (optional)
     * @param string $document_type The document type. (optional)
     * @param string $created_at_from Get entries with createdAt date after this date. (optional)
     * @param string $created_at_to Get entries with createdAt date before this date. (optional)
     * @param int $page The page to get. The default page that will be returned is page 1. (optional)
     * @param int $items_per_page The number of summaries to be displayed per page. The default number of orders per page is 10. (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersDocumentsAccountingSummaryGetRequest($order_id = null, $document_type = null, $created_at_from = null, $created_at_to = null, $page = null, $items_per_page = null)
    {

        $resourcePath = '/rest/orders/documents/accounting_summary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($order_id !== null) {
            $queryParams['orderId'] = ObjectSerializer::toQueryValue($order_id);
        }
        // query params
        if ($document_type !== null) {
            $queryParams['documentType'] = ObjectSerializer::toQueryValue($document_type);
        }
        // query params
        if ($created_at_from !== null) {
            $queryParams['createdAtFrom'] = ObjectSerializer::toQueryValue($created_at_from);
        }
        // query params
        if ($created_at_to !== null) {
            $queryParams['createdAtTo'] = ObjectSerializer::toQueryValue($created_at_to);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($items_per_page !== null) {
            $queryParams['itemsPerPage'] = ObjectSerializer::toQueryValue($items_per_page);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersGet
     *
     * List orders by filter options
     *
     * @param string $order_type Filter that restricts the search result to orders of specific order types. The id of the order types must be specified. Several order types can be entered seperated by commas. @see order model typeId (optional)
     * @param int $contact_id Filter that restricts the search result to orders of one order contact. The id of the contact must be specified. (optional)
     * @param int $referrer_id Filter that restricts the search result to orders from one order referrer. The id of the order referrer must be specified. (optional)
     * @param int $shipping_profile_id Filter that restricts the search result to orders with a specific shipping profile. The id of shipping profile must be specified. (optional)
     * @param int $owner_user_id Filter that restricts the search result to orders of one owner. The user id of the owner must be specified. (optional)
     * @param int $warehouse_id Filter that restricts the search result to orders with a specific main warehouse. The id of the warehouse must be specified. (optional)
     * @param bool $is_ebay_plus Filter that restricts the search result to orders with ebay plus. (optional)
     * @param int $included_variation Filter that restricts the search result to orders with a certain variation. The id of the variation must be specified. (optional)
     * @param int $included_item Filter that restricts the search result to orders with a certain item. The id of the item must be specified. (optional)
     * @param int $order_ids Filter that restricts the search result to orders. To list several orders the orders must be separated by comma. (optional)
     * @param int $country_id Filter that restricts the search result to orders of one country. The id of the country must be specified. (optional)
     * @param string $order_item_name Filter that restricts the search results to orders with a certain item name. The name of the item must be specified. (optional)
     * @param int $variation_number Filter that restricts the search results to orders with a specific variation number. The number of the variation must be specified. (optional)
     * @param int $sender_contact Filter that restricts the search results to orders with a specific sender of the type contact. The id of the sender must be specified. (optional)
     * @param int $sender_warehouse Filter that restricts the search results to orders with a specific sender of the type warehouse. The id of the sender must be specified. (optional)
     * @param int $receiver_contact Filter that restricts the search results to orders with a specific receiver of the type contact. The id of the receiver must be specified. (optional)
     * @param int $receiver_warehouse Filter that restricts the search results to orders with a specific receiver of the type warehouse. The id of the receiver must be specified. (optional)
     * @param string $external_order_id Filter that restricts the search result to an external order id. The external order id must be specified. (optional)
     * @param int $client_id Filter that restricts the search result to order from one client. The id of the client must be specified. (optional)
     * @param string $payment_status Filter that restricts the search result to order with a specific payment status. Valid values are unpaid,partlyPaid,fullyPaid,overpaid. One value must be specified. (optional)
     * @param string $updated_at_from Filter that restricts the search result to orders that were last updated on the specified date. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $updated_at_to Filter that restricts the search result to orders that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $created_at_from Filter that restricts the search result to orders that were created on the specified date. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $created_at_to Filter that restricts the search result to orders that were created within a certain period of time. This filter can be used alone or can be combined with the CreatedAtFrom filter. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $paid_at_from Filter that restricts the search result to orders that received a payment on the specified date. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $paid_at_to Filter that restricts the search result to orders that received a payment within a certain period of time. This filter can be used alone or can be combined with the paidAtFrom filter. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $outgoing_items_booked_at_from Filter that restricts the search result to orders where the outgoing items were booked on the specified date. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $outgoing_items_booked_at_to Filter that restricts the search result to orders where the outgoing items were booked within a specified period of time. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param int $status_from Filter that restricts the search result to orders in a specific order status. The value of the order status must be specified. (optional)
     * @param int $status_to Filter that restricts the search result to orders within a range of order statuses. This filter can be used alone or can be combined with the statusFrom filter. The value of the order status must be specified. (optional)
     * @param string $has_document Filter that restricts the search result to orders which hold the given document type. Valid values are &lt;i&gt;multi_invoice&lt;/i&gt;, &lt;i&gt;multi_credit_note&lt;/i&gt;, &lt;i&gt;success_confirmation&lt;/i&gt;, &lt;i&gt;return_note&lt;/i&gt;, &lt;i&gt;pickup_delivery&lt;/i&gt;, &lt;i&gt;repair_bill&lt;/i&gt;, &lt;i&gt;dunning_letter&lt;/i&gt;, &lt;i&gt;offer&lt;/i&gt;, &lt;i&gt;order_confirmation&lt;/i&gt;, &lt;i&gt;credit_note&lt;/i&gt;, &lt;i&gt;correction_document&lt;/i&gt;, &lt;i&gt;delivery_note&lt;/i&gt;, &lt;i&gt;invoice&lt;/i&gt;, &lt;i&gt;invoice_external&lt;/i&gt;, &lt;i&gt;receipt&lt;/i&gt; (optional)
     * @param string $has_document_number Filter that restricts the search result to orders which hold documents with given number. (optional)
     * @param int $page The page to get. The default page that will be returned is page 1. (optional)
     * @param int $items_per_page The number of orders to be displayed per page. The default number of orders per page is 50. (optional)
     * @param int $with Load additional relations for an order. Currently possible are:     &lt;ul&gt;     &lt;li&gt;&#x27;addresses&#x27; &#x3D; The address objects that are associated with the order.&lt;/li&gt;     &lt;li&gt;&#x27;relations&#x27; &#x3D; The order relation reference instances that are associated with the order. These instances contain information such as the the reference type, the ID of the reference and the relation itself.&lt;/li&gt;     &lt;li&gt;&#x27;comments&#x27; &#x3D; The order comments.&lt;/li&gt;     &lt;li&gt;&#x27;location&#x27; &#x3D; The accounting location of the order.&lt;/li&gt;     &lt;li&gt;&#x27;payments&#x27; &#x3D; The payments that are associated with the order.&lt;/li&gt;     &lt;li&gt;&#x27;documents&#x27; &#x3D; The documents that are associated with the order.&lt;/li&gt;     &lt;li&gt;&#x27;contactSender&#x27; &#x3D; The associated contact for the contact-sender relation.&lt;/li&gt;     &lt;li&gt;&#x27;contactReceiver&#x27; &#x3D; The associated contact for the contact-receiver relation.&lt;/li&gt;     &lt;li&gt;&#x27;warehouseSender&#x27; &#x3D; The associated warehouse for the warehouse-sender relation.&lt;/li&gt;     &lt;li&gt;&#x27;warehouseReceiver&#x27; &#x3D; The associated warehouse for the warehouse-receiver relation.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.variation&#x27; &#x3D; The variation that is associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.giftCardCodes&#x27; &#x3D; The gift card codes that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.transactions&#x27; &#x3D; The transactions that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.serialNumbers&#x27; &#x3D; The serial numbers that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.variationBarcodes&#x27; &#x3D; The barcodes that are associated with variation of the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.comments&#x27; &#x3D; The comments that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;originOrderReferences&#x27; &#x3D; The references to other orders, e.g. returns or credit notes, associated with this order.&lt;/li&gt;     &lt;li&gt;&lt;b&gt;deprecated&lt;/b&gt; &#x27;orderItems.warehouseLocations&#x27; &#x3D; The warehouse locations that are associated with the order item.&lt;/li&gt;     &lt;/ul&gt;     Example: &lt;code&gt;?with[]&#x3D;addresses&amp;with[]&#x3D;orderItems.variation&lt;/code&gt; (optional)
     *
     * @return object
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     */
    public function restOrdersGet($order_type = null, $contact_id = null, $referrer_id = null, $shipping_profile_id = null, $owner_user_id = null, $warehouse_id = null, $is_ebay_plus = null, $included_variation = null, $included_item = null, $order_ids = null, $country_id = null, $order_item_name = null, $variation_number = null, $sender_contact = null, $sender_warehouse = null, $receiver_contact = null, $receiver_warehouse = null, $external_order_id = null, $client_id = null, $payment_status = null, $updated_at_from = null, $updated_at_to = null, $created_at_from = null, $created_at_to = null, $paid_at_from = null, $paid_at_to = null, $outgoing_items_booked_at_from = null, $outgoing_items_booked_at_to = null, $status_from = null, $status_to = null, $has_document = null, $has_document_number = null, $page = null, $items_per_page = null, $with = null)
    {
        list($response) = $this->restOrdersGetWithHttpInfo($order_type, $contact_id, $referrer_id, $shipping_profile_id, $owner_user_id, $warehouse_id, $is_ebay_plus, $included_variation, $included_item, $order_ids, $country_id, $order_item_name, $variation_number, $sender_contact, $sender_warehouse, $receiver_contact, $receiver_warehouse, $external_order_id, $client_id, $payment_status, $updated_at_from, $updated_at_to, $created_at_from, $created_at_to, $paid_at_from, $paid_at_to, $outgoing_items_booked_at_from, $outgoing_items_booked_at_to, $status_from, $status_to, $has_document, $has_document_number, $page, $items_per_page, $with);
        return $response;
    }

    /**
     * Operation restOrdersGetWithHttpInfo
     *
     * List orders by filter options
     *
     * @param string $order_type Filter that restricts the search result to orders of specific order types. The id of the order types must be specified. Several order types can be entered seperated by commas. @see order model typeId (optional)
     * @param int $contact_id Filter that restricts the search result to orders of one order contact. The id of the contact must be specified. (optional)
     * @param int $referrer_id Filter that restricts the search result to orders from one order referrer. The id of the order referrer must be specified. (optional)
     * @param int $shipping_profile_id Filter that restricts the search result to orders with a specific shipping profile. The id of shipping profile must be specified. (optional)
     * @param int $owner_user_id Filter that restricts the search result to orders of one owner. The user id of the owner must be specified. (optional)
     * @param int $warehouse_id Filter that restricts the search result to orders with a specific main warehouse. The id of the warehouse must be specified. (optional)
     * @param bool $is_ebay_plus Filter that restricts the search result to orders with ebay plus. (optional)
     * @param int $included_variation Filter that restricts the search result to orders with a certain variation. The id of the variation must be specified. (optional)
     * @param int $included_item Filter that restricts the search result to orders with a certain item. The id of the item must be specified. (optional)
     * @param int $order_ids Filter that restricts the search result to orders. To list several orders the orders must be separated by comma. (optional)
     * @param int $country_id Filter that restricts the search result to orders of one country. The id of the country must be specified. (optional)
     * @param string $order_item_name Filter that restricts the search results to orders with a certain item name. The name of the item must be specified. (optional)
     * @param int $variation_number Filter that restricts the search results to orders with a specific variation number. The number of the variation must be specified. (optional)
     * @param int $sender_contact Filter that restricts the search results to orders with a specific sender of the type contact. The id of the sender must be specified. (optional)
     * @param int $sender_warehouse Filter that restricts the search results to orders with a specific sender of the type warehouse. The id of the sender must be specified. (optional)
     * @param int $receiver_contact Filter that restricts the search results to orders with a specific receiver of the type contact. The id of the receiver must be specified. (optional)
     * @param int $receiver_warehouse Filter that restricts the search results to orders with a specific receiver of the type warehouse. The id of the receiver must be specified. (optional)
     * @param string $external_order_id Filter that restricts the search result to an external order id. The external order id must be specified. (optional)
     * @param int $client_id Filter that restricts the search result to order from one client. The id of the client must be specified. (optional)
     * @param string $payment_status Filter that restricts the search result to order with a specific payment status. Valid values are unpaid,partlyPaid,fullyPaid,overpaid. One value must be specified. (optional)
     * @param string $updated_at_from Filter that restricts the search result to orders that were last updated on the specified date. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $updated_at_to Filter that restricts the search result to orders that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $created_at_from Filter that restricts the search result to orders that were created on the specified date. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $created_at_to Filter that restricts the search result to orders that were created within a certain period of time. This filter can be used alone or can be combined with the CreatedAtFrom filter. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $paid_at_from Filter that restricts the search result to orders that received a payment on the specified date. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $paid_at_to Filter that restricts the search result to orders that received a payment within a certain period of time. This filter can be used alone or can be combined with the paidAtFrom filter. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $outgoing_items_booked_at_from Filter that restricts the search result to orders where the outgoing items were booked on the specified date. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $outgoing_items_booked_at_to Filter that restricts the search result to orders where the outgoing items were booked within a specified period of time. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param int $status_from Filter that restricts the search result to orders in a specific order status. The value of the order status must be specified. (optional)
     * @param int $status_to Filter that restricts the search result to orders within a range of order statuses. This filter can be used alone or can be combined with the statusFrom filter. The value of the order status must be specified. (optional)
     * @param string $has_document Filter that restricts the search result to orders which hold the given document type. Valid values are &lt;i&gt;multi_invoice&lt;/i&gt;, &lt;i&gt;multi_credit_note&lt;/i&gt;, &lt;i&gt;success_confirmation&lt;/i&gt;, &lt;i&gt;return_note&lt;/i&gt;, &lt;i&gt;pickup_delivery&lt;/i&gt;, &lt;i&gt;repair_bill&lt;/i&gt;, &lt;i&gt;dunning_letter&lt;/i&gt;, &lt;i&gt;offer&lt;/i&gt;, &lt;i&gt;order_confirmation&lt;/i&gt;, &lt;i&gt;credit_note&lt;/i&gt;, &lt;i&gt;correction_document&lt;/i&gt;, &lt;i&gt;delivery_note&lt;/i&gt;, &lt;i&gt;invoice&lt;/i&gt;, &lt;i&gt;invoice_external&lt;/i&gt;, &lt;i&gt;receipt&lt;/i&gt; (optional)
     * @param string $has_document_number Filter that restricts the search result to orders which hold documents with given number. (optional)
     * @param int $page The page to get. The default page that will be returned is page 1. (optional)
     * @param int $items_per_page The number of orders to be displayed per page. The default number of orders per page is 50. (optional)
     * @param int $with Load additional relations for an order. Currently possible are:     &lt;ul&gt;     &lt;li&gt;&#x27;addresses&#x27; &#x3D; The address objects that are associated with the order.&lt;/li&gt;     &lt;li&gt;&#x27;relations&#x27; &#x3D; The order relation reference instances that are associated with the order. These instances contain information such as the the reference type, the ID of the reference and the relation itself.&lt;/li&gt;     &lt;li&gt;&#x27;comments&#x27; &#x3D; The order comments.&lt;/li&gt;     &lt;li&gt;&#x27;location&#x27; &#x3D; The accounting location of the order.&lt;/li&gt;     &lt;li&gt;&#x27;payments&#x27; &#x3D; The payments that are associated with the order.&lt;/li&gt;     &lt;li&gt;&#x27;documents&#x27; &#x3D; The documents that are associated with the order.&lt;/li&gt;     &lt;li&gt;&#x27;contactSender&#x27; &#x3D; The associated contact for the contact-sender relation.&lt;/li&gt;     &lt;li&gt;&#x27;contactReceiver&#x27; &#x3D; The associated contact for the contact-receiver relation.&lt;/li&gt;     &lt;li&gt;&#x27;warehouseSender&#x27; &#x3D; The associated warehouse for the warehouse-sender relation.&lt;/li&gt;     &lt;li&gt;&#x27;warehouseReceiver&#x27; &#x3D; The associated warehouse for the warehouse-receiver relation.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.variation&#x27; &#x3D; The variation that is associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.giftCardCodes&#x27; &#x3D; The gift card codes that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.transactions&#x27; &#x3D; The transactions that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.serialNumbers&#x27; &#x3D; The serial numbers that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.variationBarcodes&#x27; &#x3D; The barcodes that are associated with variation of the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.comments&#x27; &#x3D; The comments that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;originOrderReferences&#x27; &#x3D; The references to other orders, e.g. returns or credit notes, associated with this order.&lt;/li&gt;     &lt;li&gt;&lt;b&gt;deprecated&lt;/b&gt; &#x27;orderItems.warehouseLocations&#x27; &#x3D; The warehouse locations that are associated with the order item.&lt;/li&gt;     &lt;/ul&gt;     Example: &lt;code&gt;?with[]&#x3D;addresses&amp;with[]&#x3D;orderItems.variation&lt;/code&gt; (optional)
     *
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     */
    public function restOrdersGetWithHttpInfo($order_type = null, $contact_id = null, $referrer_id = null, $shipping_profile_id = null, $owner_user_id = null, $warehouse_id = null, $is_ebay_plus = null, $included_variation = null, $included_item = null, $order_ids = null, $country_id = null, $order_item_name = null, $variation_number = null, $sender_contact = null, $sender_warehouse = null, $receiver_contact = null, $receiver_warehouse = null, $external_order_id = null, $client_id = null, $payment_status = null, $updated_at_from = null, $updated_at_to = null, $created_at_from = null, $created_at_to = null, $paid_at_from = null, $paid_at_to = null, $outgoing_items_booked_at_from = null, $outgoing_items_booked_at_to = null, $status_from = null, $status_to = null, $has_document = null, $has_document_number = null, $page = null, $items_per_page = null, $with = null)
    {
        $returnType = ModelsOrders::class;
        $request = $this->restOrdersGetRequest($order_type, $contact_id, $referrer_id, $shipping_profile_id, $owner_user_id, $warehouse_id, $is_ebay_plus, $included_variation, $included_item, $order_ids, $country_id, $order_item_name, $variation_number, $sender_contact, $sender_warehouse, $receiver_contact, $receiver_warehouse, $external_order_id, $client_id, $payment_status, $updated_at_from, $updated_at_to, $created_at_from, $created_at_to, $paid_at_from, $paid_at_to, $outgoing_items_booked_at_from, $outgoing_items_booked_at_to, $status_from, $status_to, $has_document, $has_document_number, $page, $items_per_page, $with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersGetAsync
     *
     * List orders by filter options
     *
     * @param string $order_type Filter that restricts the search result to orders of specific order types. The id of the order types must be specified. Several order types can be entered seperated by commas. @see order model typeId (optional)
     * @param int $contact_id Filter that restricts the search result to orders of one order contact. The id of the contact must be specified. (optional)
     * @param int $referrer_id Filter that restricts the search result to orders from one order referrer. The id of the order referrer must be specified. (optional)
     * @param int $shipping_profile_id Filter that restricts the search result to orders with a specific shipping profile. The id of shipping profile must be specified. (optional)
     * @param int $owner_user_id Filter that restricts the search result to orders of one owner. The user id of the owner must be specified. (optional)
     * @param int $warehouse_id Filter that restricts the search result to orders with a specific main warehouse. The id of the warehouse must be specified. (optional)
     * @param bool $is_ebay_plus Filter that restricts the search result to orders with ebay plus. (optional)
     * @param int $included_variation Filter that restricts the search result to orders with a certain variation. The id of the variation must be specified. (optional)
     * @param int $included_item Filter that restricts the search result to orders with a certain item. The id of the item must be specified. (optional)
     * @param int $order_ids Filter that restricts the search result to orders. To list several orders the orders must be separated by comma. (optional)
     * @param int $country_id Filter that restricts the search result to orders of one country. The id of the country must be specified. (optional)
     * @param string $order_item_name Filter that restricts the search results to orders with a certain item name. The name of the item must be specified. (optional)
     * @param int $variation_number Filter that restricts the search results to orders with a specific variation number. The number of the variation must be specified. (optional)
     * @param int $sender_contact Filter that restricts the search results to orders with a specific sender of the type contact. The id of the sender must be specified. (optional)
     * @param int $sender_warehouse Filter that restricts the search results to orders with a specific sender of the type warehouse. The id of the sender must be specified. (optional)
     * @param int $receiver_contact Filter that restricts the search results to orders with a specific receiver of the type contact. The id of the receiver must be specified. (optional)
     * @param int $receiver_warehouse Filter that restricts the search results to orders with a specific receiver of the type warehouse. The id of the receiver must be specified. (optional)
     * @param string $external_order_id Filter that restricts the search result to an external order id. The external order id must be specified. (optional)
     * @param int $client_id Filter that restricts the search result to order from one client. The id of the client must be specified. (optional)
     * @param string $payment_status Filter that restricts the search result to order with a specific payment status. Valid values are unpaid,partlyPaid,fullyPaid,overpaid. One value must be specified. (optional)
     * @param string $updated_at_from Filter that restricts the search result to orders that were last updated on the specified date. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $updated_at_to Filter that restricts the search result to orders that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $created_at_from Filter that restricts the search result to orders that were created on the specified date. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $created_at_to Filter that restricts the search result to orders that were created within a certain period of time. This filter can be used alone or can be combined with the CreatedAtFrom filter. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $paid_at_from Filter that restricts the search result to orders that received a payment on the specified date. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $paid_at_to Filter that restricts the search result to orders that received a payment within a certain period of time. This filter can be used alone or can be combined with the paidAtFrom filter. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $outgoing_items_booked_at_from Filter that restricts the search result to orders where the outgoing items were booked on the specified date. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $outgoing_items_booked_at_to Filter that restricts the search result to orders where the outgoing items were booked within a specified period of time. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param int $status_from Filter that restricts the search result to orders in a specific order status. The value of the order status must be specified. (optional)
     * @param int $status_to Filter that restricts the search result to orders within a range of order statuses. This filter can be used alone or can be combined with the statusFrom filter. The value of the order status must be specified. (optional)
     * @param string $has_document Filter that restricts the search result to orders which hold the given document type. Valid values are &lt;i&gt;multi_invoice&lt;/i&gt;, &lt;i&gt;multi_credit_note&lt;/i&gt;, &lt;i&gt;success_confirmation&lt;/i&gt;, &lt;i&gt;return_note&lt;/i&gt;, &lt;i&gt;pickup_delivery&lt;/i&gt;, &lt;i&gt;repair_bill&lt;/i&gt;, &lt;i&gt;dunning_letter&lt;/i&gt;, &lt;i&gt;offer&lt;/i&gt;, &lt;i&gt;order_confirmation&lt;/i&gt;, &lt;i&gt;credit_note&lt;/i&gt;, &lt;i&gt;correction_document&lt;/i&gt;, &lt;i&gt;delivery_note&lt;/i&gt;, &lt;i&gt;invoice&lt;/i&gt;, &lt;i&gt;invoice_external&lt;/i&gt;, &lt;i&gt;receipt&lt;/i&gt; (optional)
     * @param string $has_document_number Filter that restricts the search result to orders which hold documents with given number. (optional)
     * @param int $page The page to get. The default page that will be returned is page 1. (optional)
     * @param int $items_per_page The number of orders to be displayed per page. The default number of orders per page is 50. (optional)
     * @param int $with Load additional relations for an order. Currently possible are:     &lt;ul&gt;     &lt;li&gt;&#x27;addresses&#x27; &#x3D; The address objects that are associated with the order.&lt;/li&gt;     &lt;li&gt;&#x27;relations&#x27; &#x3D; The order relation reference instances that are associated with the order. These instances contain information such as the the reference type, the ID of the reference and the relation itself.&lt;/li&gt;     &lt;li&gt;&#x27;comments&#x27; &#x3D; The order comments.&lt;/li&gt;     &lt;li&gt;&#x27;location&#x27; &#x3D; The accounting location of the order.&lt;/li&gt;     &lt;li&gt;&#x27;payments&#x27; &#x3D; The payments that are associated with the order.&lt;/li&gt;     &lt;li&gt;&#x27;documents&#x27; &#x3D; The documents that are associated with the order.&lt;/li&gt;     &lt;li&gt;&#x27;contactSender&#x27; &#x3D; The associated contact for the contact-sender relation.&lt;/li&gt;     &lt;li&gt;&#x27;contactReceiver&#x27; &#x3D; The associated contact for the contact-receiver relation.&lt;/li&gt;     &lt;li&gt;&#x27;warehouseSender&#x27; &#x3D; The associated warehouse for the warehouse-sender relation.&lt;/li&gt;     &lt;li&gt;&#x27;warehouseReceiver&#x27; &#x3D; The associated warehouse for the warehouse-receiver relation.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.variation&#x27; &#x3D; The variation that is associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.giftCardCodes&#x27; &#x3D; The gift card codes that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.transactions&#x27; &#x3D; The transactions that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.serialNumbers&#x27; &#x3D; The serial numbers that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.variationBarcodes&#x27; &#x3D; The barcodes that are associated with variation of the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.comments&#x27; &#x3D; The comments that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;originOrderReferences&#x27; &#x3D; The references to other orders, e.g. returns or credit notes, associated with this order.&lt;/li&gt;     &lt;li&gt;&lt;b&gt;deprecated&lt;/b&gt; &#x27;orderItems.warehouseLocations&#x27; &#x3D; The warehouse locations that are associated with the order item.&lt;/li&gt;     &lt;/ul&gt;     Example: &lt;code&gt;?with[]&#x3D;addresses&amp;with[]&#x3D;orderItems.variation&lt;/code&gt; (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersGetAsync($order_type = null, $contact_id = null, $referrer_id = null, $shipping_profile_id = null, $owner_user_id = null, $warehouse_id = null, $is_ebay_plus = null, $included_variation = null, $included_item = null, $order_ids = null, $country_id = null, $order_item_name = null, $variation_number = null, $sender_contact = null, $sender_warehouse = null, $receiver_contact = null, $receiver_warehouse = null, $external_order_id = null, $client_id = null, $payment_status = null, $updated_at_from = null, $updated_at_to = null, $created_at_from = null, $created_at_to = null, $paid_at_from = null, $paid_at_to = null, $outgoing_items_booked_at_from = null, $outgoing_items_booked_at_to = null, $status_from = null, $status_to = null, $has_document = null, $has_document_number = null, $page = null, $items_per_page = null, $with = null)
    {
        return $this->restOrdersGetAsyncWithHttpInfo($order_type, $contact_id, $referrer_id, $shipping_profile_id, $owner_user_id, $warehouse_id, $is_ebay_plus, $included_variation, $included_item, $order_ids, $country_id, $order_item_name, $variation_number, $sender_contact, $sender_warehouse, $receiver_contact, $receiver_warehouse, $external_order_id, $client_id, $payment_status, $updated_at_from, $updated_at_to, $created_at_from, $created_at_to, $paid_at_from, $paid_at_to, $outgoing_items_booked_at_from, $outgoing_items_booked_at_to, $status_from, $status_to, $has_document, $has_document_number, $page, $items_per_page, $with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersGetAsyncWithHttpInfo
     *
     * List orders by filter options
     *
     * @param string $order_type Filter that restricts the search result to orders of specific order types. The id of the order types must be specified. Several order types can be entered seperated by commas. @see order model typeId (optional)
     * @param int $contact_id Filter that restricts the search result to orders of one order contact. The id of the contact must be specified. (optional)
     * @param int $referrer_id Filter that restricts the search result to orders from one order referrer. The id of the order referrer must be specified. (optional)
     * @param int $shipping_profile_id Filter that restricts the search result to orders with a specific shipping profile. The id of shipping profile must be specified. (optional)
     * @param int $owner_user_id Filter that restricts the search result to orders of one owner. The user id of the owner must be specified. (optional)
     * @param int $warehouse_id Filter that restricts the search result to orders with a specific main warehouse. The id of the warehouse must be specified. (optional)
     * @param bool $is_ebay_plus Filter that restricts the search result to orders with ebay plus. (optional)
     * @param int $included_variation Filter that restricts the search result to orders with a certain variation. The id of the variation must be specified. (optional)
     * @param int $included_item Filter that restricts the search result to orders with a certain item. The id of the item must be specified. (optional)
     * @param int $order_ids Filter that restricts the search result to orders. To list several orders the orders must be separated by comma. (optional)
     * @param int $country_id Filter that restricts the search result to orders of one country. The id of the country must be specified. (optional)
     * @param string $order_item_name Filter that restricts the search results to orders with a certain item name. The name of the item must be specified. (optional)
     * @param int $variation_number Filter that restricts the search results to orders with a specific variation number. The number of the variation must be specified. (optional)
     * @param int $sender_contact Filter that restricts the search results to orders with a specific sender of the type contact. The id of the sender must be specified. (optional)
     * @param int $sender_warehouse Filter that restricts the search results to orders with a specific sender of the type warehouse. The id of the sender must be specified. (optional)
     * @param int $receiver_contact Filter that restricts the search results to orders with a specific receiver of the type contact. The id of the receiver must be specified. (optional)
     * @param int $receiver_warehouse Filter that restricts the search results to orders with a specific receiver of the type warehouse. The id of the receiver must be specified. (optional)
     * @param string $external_order_id Filter that restricts the search result to an external order id. The external order id must be specified. (optional)
     * @param int $client_id Filter that restricts the search result to order from one client. The id of the client must be specified. (optional)
     * @param string $payment_status Filter that restricts the search result to order with a specific payment status. Valid values are unpaid,partlyPaid,fullyPaid,overpaid. One value must be specified. (optional)
     * @param string $updated_at_from Filter that restricts the search result to orders that were last updated on the specified date. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $updated_at_to Filter that restricts the search result to orders that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $created_at_from Filter that restricts the search result to orders that were created on the specified date. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $created_at_to Filter that restricts the search result to orders that were created within a certain period of time. This filter can be used alone or can be combined with the CreatedAtFrom filter. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $paid_at_from Filter that restricts the search result to orders that received a payment on the specified date. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $paid_at_to Filter that restricts the search result to orders that received a payment within a certain period of time. This filter can be used alone or can be combined with the paidAtFrom filter. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $outgoing_items_booked_at_from Filter that restricts the search result to orders where the outgoing items were booked on the specified date. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $outgoing_items_booked_at_to Filter that restricts the search result to orders where the outgoing items were booked within a specified period of time. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param int $status_from Filter that restricts the search result to orders in a specific order status. The value of the order status must be specified. (optional)
     * @param int $status_to Filter that restricts the search result to orders within a range of order statuses. This filter can be used alone or can be combined with the statusFrom filter. The value of the order status must be specified. (optional)
     * @param string $has_document Filter that restricts the search result to orders which hold the given document type. Valid values are &lt;i&gt;multi_invoice&lt;/i&gt;, &lt;i&gt;multi_credit_note&lt;/i&gt;, &lt;i&gt;success_confirmation&lt;/i&gt;, &lt;i&gt;return_note&lt;/i&gt;, &lt;i&gt;pickup_delivery&lt;/i&gt;, &lt;i&gt;repair_bill&lt;/i&gt;, &lt;i&gt;dunning_letter&lt;/i&gt;, &lt;i&gt;offer&lt;/i&gt;, &lt;i&gt;order_confirmation&lt;/i&gt;, &lt;i&gt;credit_note&lt;/i&gt;, &lt;i&gt;correction_document&lt;/i&gt;, &lt;i&gt;delivery_note&lt;/i&gt;, &lt;i&gt;invoice&lt;/i&gt;, &lt;i&gt;invoice_external&lt;/i&gt;, &lt;i&gt;receipt&lt;/i&gt; (optional)
     * @param string $has_document_number Filter that restricts the search result to orders which hold documents with given number. (optional)
     * @param int $page The page to get. The default page that will be returned is page 1. (optional)
     * @param int $items_per_page The number of orders to be displayed per page. The default number of orders per page is 50. (optional)
     * @param int $with Load additional relations for an order. Currently possible are:     &lt;ul&gt;     &lt;li&gt;&#x27;addresses&#x27; &#x3D; The address objects that are associated with the order.&lt;/li&gt;     &lt;li&gt;&#x27;relations&#x27; &#x3D; The order relation reference instances that are associated with the order. These instances contain information such as the the reference type, the ID of the reference and the relation itself.&lt;/li&gt;     &lt;li&gt;&#x27;comments&#x27; &#x3D; The order comments.&lt;/li&gt;     &lt;li&gt;&#x27;location&#x27; &#x3D; The accounting location of the order.&lt;/li&gt;     &lt;li&gt;&#x27;payments&#x27; &#x3D; The payments that are associated with the order.&lt;/li&gt;     &lt;li&gt;&#x27;documents&#x27; &#x3D; The documents that are associated with the order.&lt;/li&gt;     &lt;li&gt;&#x27;contactSender&#x27; &#x3D; The associated contact for the contact-sender relation.&lt;/li&gt;     &lt;li&gt;&#x27;contactReceiver&#x27; &#x3D; The associated contact for the contact-receiver relation.&lt;/li&gt;     &lt;li&gt;&#x27;warehouseSender&#x27; &#x3D; The associated warehouse for the warehouse-sender relation.&lt;/li&gt;     &lt;li&gt;&#x27;warehouseReceiver&#x27; &#x3D; The associated warehouse for the warehouse-receiver relation.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.variation&#x27; &#x3D; The variation that is associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.giftCardCodes&#x27; &#x3D; The gift card codes that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.transactions&#x27; &#x3D; The transactions that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.serialNumbers&#x27; &#x3D; The serial numbers that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.variationBarcodes&#x27; &#x3D; The barcodes that are associated with variation of the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.comments&#x27; &#x3D; The comments that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;originOrderReferences&#x27; &#x3D; The references to other orders, e.g. returns or credit notes, associated with this order.&lt;/li&gt;     &lt;li&gt;&lt;b&gt;deprecated&lt;/b&gt; &#x27;orderItems.warehouseLocations&#x27; &#x3D; The warehouse locations that are associated with the order item.&lt;/li&gt;     &lt;/ul&gt;     Example: &lt;code&gt;?with[]&#x3D;addresses&amp;with[]&#x3D;orderItems.variation&lt;/code&gt; (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersGetAsyncWithHttpInfo($order_type = null, $contact_id = null, $referrer_id = null, $shipping_profile_id = null, $owner_user_id = null, $warehouse_id = null, $is_ebay_plus = null, $included_variation = null, $included_item = null, $order_ids = null, $country_id = null, $order_item_name = null, $variation_number = null, $sender_contact = null, $sender_warehouse = null, $receiver_contact = null, $receiver_warehouse = null, $external_order_id = null, $client_id = null, $payment_status = null, $updated_at_from = null, $updated_at_to = null, $created_at_from = null, $created_at_to = null, $paid_at_from = null, $paid_at_to = null, $outgoing_items_booked_at_from = null, $outgoing_items_booked_at_to = null, $status_from = null, $status_to = null, $has_document = null, $has_document_number = null, $page = null, $items_per_page = null, $with = null)
    {
        $returnType = 'object';
        $request = $this->restOrdersGetRequest($order_type, $contact_id, $referrer_id, $shipping_profile_id, $owner_user_id, $warehouse_id, $is_ebay_plus, $included_variation, $included_item, $order_ids, $country_id, $order_item_name, $variation_number, $sender_contact, $sender_warehouse, $receiver_contact, $receiver_warehouse, $external_order_id, $client_id, $payment_status, $updated_at_from, $updated_at_to, $created_at_from, $created_at_to, $paid_at_from, $paid_at_to, $outgoing_items_booked_at_from, $outgoing_items_booked_at_to, $status_from, $status_to, $has_document, $has_document_number, $page, $items_per_page, $with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersGet'
     *
     * @param string $order_type Filter that restricts the search result to orders of specific order types. The id of the order types must be specified. Several order types can be entered seperated by commas. @see order model typeId (optional)
     * @param int $contact_id Filter that restricts the search result to orders of one order contact. The id of the contact must be specified. (optional)
     * @param int $referrer_id Filter that restricts the search result to orders from one order referrer. The id of the order referrer must be specified. (optional)
     * @param int $shipping_profile_id Filter that restricts the search result to orders with a specific shipping profile. The id of shipping profile must be specified. (optional)
     * @param int $owner_user_id Filter that restricts the search result to orders of one owner. The user id of the owner must be specified. (optional)
     * @param int $warehouse_id Filter that restricts the search result to orders with a specific main warehouse. The id of the warehouse must be specified. (optional)
     * @param bool $is_ebay_plus Filter that restricts the search result to orders with ebay plus. (optional)
     * @param int $included_variation Filter that restricts the search result to orders with a certain variation. The id of the variation must be specified. (optional)
     * @param int $included_item Filter that restricts the search result to orders with a certain item. The id of the item must be specified. (optional)
     * @param int $order_ids Filter that restricts the search result to orders. To list several orders the orders must be separated by comma. (optional)
     * @param int $country_id Filter that restricts the search result to orders of one country. The id of the country must be specified. (optional)
     * @param string $order_item_name Filter that restricts the search results to orders with a certain item name. The name of the item must be specified. (optional)
     * @param int $variation_number Filter that restricts the search results to orders with a specific variation number. The number of the variation must be specified. (optional)
     * @param int $sender_contact Filter that restricts the search results to orders with a specific sender of the type contact. The id of the sender must be specified. (optional)
     * @param int $sender_warehouse Filter that restricts the search results to orders with a specific sender of the type warehouse. The id of the sender must be specified. (optional)
     * @param int $receiver_contact Filter that restricts the search results to orders with a specific receiver of the type contact. The id of the receiver must be specified. (optional)
     * @param int $receiver_warehouse Filter that restricts the search results to orders with a specific receiver of the type warehouse. The id of the receiver must be specified. (optional)
     * @param string $external_order_id Filter that restricts the search result to an external order id. The external order id must be specified. (optional)
     * @param int $client_id Filter that restricts the search result to order from one client. The id of the client must be specified. (optional)
     * @param string $payment_status Filter that restricts the search result to order with a specific payment status. Valid values are unpaid,partlyPaid,fullyPaid,overpaid. One value must be specified. (optional)
     * @param string $updated_at_from Filter that restricts the search result to orders that were last updated on the specified date. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $updated_at_to Filter that restricts the search result to orders that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $created_at_from Filter that restricts the search result to orders that were created on the specified date. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $created_at_to Filter that restricts the search result to orders that were created within a certain period of time. This filter can be used alone or can be combined with the CreatedAtFrom filter. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $paid_at_from Filter that restricts the search result to orders that received a payment on the specified date. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $paid_at_to Filter that restricts the search result to orders that received a payment within a certain period of time. This filter can be used alone or can be combined with the paidAtFrom filter. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $outgoing_items_booked_at_from Filter that restricts the search result to orders where the outgoing items were booked on the specified date. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param string $outgoing_items_booked_at_to Filter that restricts the search result to orders where the outgoing items were booked within a specified period of time. The date has to be in the W3C format, e.g. &#x27;2016-10-24T13:33:23+02:00&#x27;. (optional)
     * @param int $status_from Filter that restricts the search result to orders in a specific order status. The value of the order status must be specified. (optional)
     * @param int $status_to Filter that restricts the search result to orders within a range of order statuses. This filter can be used alone or can be combined with the statusFrom filter. The value of the order status must be specified. (optional)
     * @param string $has_document Filter that restricts the search result to orders which hold the given document type. Valid values are &lt;i&gt;multi_invoice&lt;/i&gt;, &lt;i&gt;multi_credit_note&lt;/i&gt;, &lt;i&gt;success_confirmation&lt;/i&gt;, &lt;i&gt;return_note&lt;/i&gt;, &lt;i&gt;pickup_delivery&lt;/i&gt;, &lt;i&gt;repair_bill&lt;/i&gt;, &lt;i&gt;dunning_letter&lt;/i&gt;, &lt;i&gt;offer&lt;/i&gt;, &lt;i&gt;order_confirmation&lt;/i&gt;, &lt;i&gt;credit_note&lt;/i&gt;, &lt;i&gt;correction_document&lt;/i&gt;, &lt;i&gt;delivery_note&lt;/i&gt;, &lt;i&gt;invoice&lt;/i&gt;, &lt;i&gt;invoice_external&lt;/i&gt;, &lt;i&gt;receipt&lt;/i&gt; (optional)
     * @param string $has_document_number Filter that restricts the search result to orders which hold documents with given number. (optional)
     * @param int $page The page to get. The default page that will be returned is page 1. (optional)
     * @param int $items_per_page The number of orders to be displayed per page. The default number of orders per page is 50. (optional)
     * @param int $with Load additional relations for an order. Currently possible are:     &lt;ul&gt;     &lt;li&gt;&#x27;addresses&#x27; &#x3D; The address objects that are associated with the order.&lt;/li&gt;     &lt;li&gt;&#x27;relations&#x27; &#x3D; The order relation reference instances that are associated with the order. These instances contain information such as the the reference type, the ID of the reference and the relation itself.&lt;/li&gt;     &lt;li&gt;&#x27;comments&#x27; &#x3D; The order comments.&lt;/li&gt;     &lt;li&gt;&#x27;location&#x27; &#x3D; The accounting location of the order.&lt;/li&gt;     &lt;li&gt;&#x27;payments&#x27; &#x3D; The payments that are associated with the order.&lt;/li&gt;     &lt;li&gt;&#x27;documents&#x27; &#x3D; The documents that are associated with the order.&lt;/li&gt;     &lt;li&gt;&#x27;contactSender&#x27; &#x3D; The associated contact for the contact-sender relation.&lt;/li&gt;     &lt;li&gt;&#x27;contactReceiver&#x27; &#x3D; The associated contact for the contact-receiver relation.&lt;/li&gt;     &lt;li&gt;&#x27;warehouseSender&#x27; &#x3D; The associated warehouse for the warehouse-sender relation.&lt;/li&gt;     &lt;li&gt;&#x27;warehouseReceiver&#x27; &#x3D; The associated warehouse for the warehouse-receiver relation.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.variation&#x27; &#x3D; The variation that is associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.giftCardCodes&#x27; &#x3D; The gift card codes that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.transactions&#x27; &#x3D; The transactions that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.serialNumbers&#x27; &#x3D; The serial numbers that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.variationBarcodes&#x27; &#x3D; The barcodes that are associated with variation of the order item.&lt;/li&gt;     &lt;li&gt;&#x27;orderItems.comments&#x27; &#x3D; The comments that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;originOrderReferences&#x27; &#x3D; The references to other orders, e.g. returns or credit notes, associated with this order.&lt;/li&gt;     &lt;li&gt;&lt;b&gt;deprecated&lt;/b&gt; &#x27;orderItems.warehouseLocations&#x27; &#x3D; The warehouse locations that are associated with the order item.&lt;/li&gt;     &lt;/ul&gt;     Example: &lt;code&gt;?with[]&#x3D;addresses&amp;with[]&#x3D;orderItems.variation&lt;/code&gt; (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersGetRequest($order_type = null, $contact_id = null, $referrer_id = null, $shipping_profile_id = null, $owner_user_id = null, $warehouse_id = null, $is_ebay_plus = null, $included_variation = null, $included_item = null, $order_ids = null, $country_id = null, $order_item_name = null, $variation_number = null, $sender_contact = null, $sender_warehouse = null, $receiver_contact = null, $receiver_warehouse = null, $external_order_id = null, $client_id = null, $payment_status = null, $updated_at_from = null, $updated_at_to = null, $created_at_from = null, $created_at_to = null, $paid_at_from = null, $paid_at_to = null, $outgoing_items_booked_at_from = null, $outgoing_items_booked_at_to = null, $status_from = null, $status_to = null, $has_document = null, $has_document_number = null, $page = null, $items_per_page = null, $with = null)
    {

        $resourcePath = '/rest/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($order_type !== null) {
            $queryParams['orderType'] = ObjectSerializer::toQueryValue($order_type);
        }
        // query params
        if ($contact_id !== null) {
            $queryParams['contactId'] = ObjectSerializer::toQueryValue($contact_id);
        }
        // query params
        if ($referrer_id !== null) {
            $queryParams['referrerId'] = ObjectSerializer::toQueryValue($referrer_id);
        }
        // query params
        if ($shipping_profile_id !== null) {
            $queryParams['shippingProfileId'] = ObjectSerializer::toQueryValue($shipping_profile_id);
        }
        // query params
        if ($owner_user_id !== null) {
            $queryParams['ownerUserId'] = ObjectSerializer::toQueryValue($owner_user_id);
        }
        // query params
        if ($warehouse_id !== null) {
            $queryParams['warehouseId'] = ObjectSerializer::toQueryValue($warehouse_id);
        }
        // query params
        if ($is_ebay_plus !== null) {
            $queryParams['isEbayPlus'] = ObjectSerializer::toQueryValue($is_ebay_plus);
        }
        // query params
        if ($included_variation !== null) {
            $queryParams['includedVariation'] = ObjectSerializer::toQueryValue($included_variation);
        }
        // query params
        if ($included_item !== null) {
            $queryParams['includedItem'] = ObjectSerializer::toQueryValue($included_item);
        }
        // query params
        if ($order_ids !== null) {
            $queryParams['orderIds'] = ObjectSerializer::toQueryValue($order_ids);
        }
        // query params
        if ($country_id !== null) {
            $queryParams['countryId'] = ObjectSerializer::toQueryValue($country_id);
        }
        // query params
        if ($order_item_name !== null) {
            $queryParams['orderItemName'] = ObjectSerializer::toQueryValue($order_item_name);
        }
        // query params
        if ($variation_number !== null) {
            $queryParams['variationNumber'] = ObjectSerializer::toQueryValue($variation_number);
        }
        // query params
        if ($sender_contact !== null) {
            $queryParams['sender.contact'] = ObjectSerializer::toQueryValue($sender_contact);
        }
        // query params
        if ($sender_warehouse !== null) {
            $queryParams['sender.warehouse'] = ObjectSerializer::toQueryValue($sender_warehouse);
        }
        // query params
        if ($receiver_contact !== null) {
            $queryParams['receiver.contact'] = ObjectSerializer::toQueryValue($receiver_contact);
        }
        // query params
        if ($receiver_warehouse !== null) {
            $queryParams['receiver.warehouse'] = ObjectSerializer::toQueryValue($receiver_warehouse);
        }
        // query params
        if ($external_order_id !== null) {
            $queryParams['externalOrderId'] = ObjectSerializer::toQueryValue($external_order_id);
        }
        // query params
        if ($client_id !== null) {
            $queryParams['clientId'] = ObjectSerializer::toQueryValue($client_id);
        }
        // query params
        if ($payment_status !== null) {
            $queryParams['paymentStatus'] = ObjectSerializer::toQueryValue($payment_status);
        }
        // query params
        if ($updated_at_from !== null) {
            $queryParams['updatedAtFrom'] = ObjectSerializer::toQueryValue($updated_at_from);
        }
        // query params
        if ($updated_at_to !== null) {
            $queryParams['updatedAtTo'] = ObjectSerializer::toQueryValue($updated_at_to);
        }
        // query params
        if ($created_at_from !== null) {
            $queryParams['createdAtFrom'] = ObjectSerializer::toQueryValue($created_at_from);
        }
        // query params
        if ($created_at_to !== null) {
            $queryParams['createdAtTo'] = ObjectSerializer::toQueryValue($created_at_to);
        }
        // query params
        if ($paid_at_from !== null) {
            $queryParams['paidAtFrom'] = ObjectSerializer::toQueryValue($paid_at_from);
        }
        // query params
        if ($paid_at_to !== null) {
            $queryParams['paidAtTo'] = ObjectSerializer::toQueryValue($paid_at_to);
        }
        // query params
        if ($outgoing_items_booked_at_from !== null) {
            $queryParams['outgoingItemsBookedAtFrom'] = ObjectSerializer::toQueryValue($outgoing_items_booked_at_from);
        }
        // query params
        if ($outgoing_items_booked_at_to !== null) {
            $queryParams['outgoingItemsBookedAtTo'] = ObjectSerializer::toQueryValue($outgoing_items_booked_at_to);
        }
        // query params
        if ($status_from !== null) {
            $queryParams['statusFrom'] = ObjectSerializer::toQueryValue($status_from);
        }
        // query params
        if ($status_to !== null) {
            $queryParams['statusTo'] = ObjectSerializer::toQueryValue($status_to);
        }
        // query params
        if ($has_document !== null) {
            $queryParams['hasDocument'] = ObjectSerializer::toQueryValue($has_document);
        }
        // query params
        if ($has_document_number !== null) {
            $queryParams['hasDocumentNumber'] = ObjectSerializer::toQueryValue($has_document_number);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($items_per_page !== null) {
            $queryParams['itemsPerPage'] = ObjectSerializer::toQueryValue($items_per_page);
        }
        // query params
        if ($with !== null) {
            $queryParams['with'] = ObjectSerializer::toQueryValue($with);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersItemsDatesIdDelete
     *
     * Delete a date from an order item
     *
     * @param int $id The ID of the order item date (required)
     *
     * @return void
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsDatesIdDelete($id)
    {
        $this->restOrdersItemsDatesIdDeleteWithHttpInfo($id);
    }

    /**
     * Operation restOrdersItemsDatesIdDeleteWithHttpInfo
     *
     * Delete a date from an order item
     *
     * @param int $id The ID of the order item date (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsDatesIdDeleteWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->restOrdersItemsDatesIdDeleteRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersItemsDatesIdDeleteAsync
     *
     * Delete a date from an order item
     *
     * @param int $id The ID of the order item date (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsDatesIdDeleteAsync($id)
    {
        return $this->restOrdersItemsDatesIdDeleteAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersItemsDatesIdDeleteAsyncWithHttpInfo
     *
     * Delete a date from an order item
     *
     * @param int $id The ID of the order item date (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsDatesIdDeleteAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->restOrdersItemsDatesIdDeleteRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersItemsDatesIdDelete'
     *
     * @param int $id The ID of the order item date (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersItemsDatesIdDeleteRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling restOrdersItemsDatesIdDelete'
            );
        }

        $resourcePath = '/rest/orders/items/dates/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersItemsDatesIdGet
     *
     * Get a date of an order item
     *
     * @param int $id The ID of the order item date (required)
     *
     * @return PlentyModulesOrderDateModelsOrderItemDate
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsDatesIdGet($id)
    {
        list($response) = $this->restOrdersItemsDatesIdGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation restOrdersItemsDatesIdGetWithHttpInfo
     *
     * Get a date of an order item
     *
     * @param int $id The ID of the order item date (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderItemDate, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsDatesIdGetWithHttpInfo($id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderItemDate';
        $request = $this->restOrdersItemsDatesIdGetRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderItemDate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersItemsDatesIdGetAsync
     *
     * Get a date of an order item
     *
     * @param int $id The ID of the order item date (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsDatesIdGetAsync($id)
    {
        return $this->restOrdersItemsDatesIdGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersItemsDatesIdGetAsyncWithHttpInfo
     *
     * Get a date of an order item
     *
     * @param int $id The ID of the order item date (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsDatesIdGetAsyncWithHttpInfo($id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderItemDate';
        $request = $this->restOrdersItemsDatesIdGetRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersItemsDatesIdGet'
     *
     * @param int $id The ID of the order item date (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersItemsDatesIdGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling restOrdersItemsDatesIdGet'
            );
        }

        $resourcePath = '/rest/orders/items/dates/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersItemsDatesIdPut
     *
     * Update a date of an order item
     *
     * @param int $id The ID of the order item date (required)
     * @param object $body body (optional)
     *
     * @return PlentyModulesOrderDateModelsOrderItemDate
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsDatesIdPut($id, $body = null)
    {
        list($response) = $this->restOrdersItemsDatesIdPutWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation restOrdersItemsDatesIdPutWithHttpInfo
     *
     * Update a date of an order item
     *
     * @param int $id The ID of the order item date (required)
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderItemDate, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsDatesIdPutWithHttpInfo($id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderItemDate';
        $request = $this->restOrdersItemsDatesIdPutRequest($id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderItemDate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersItemsDatesIdPutAsync
     *
     * Update a date of an order item
     *
     * @param int $id The ID of the order item date (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsDatesIdPutAsync($id, $body = null)
    {
        return $this->restOrdersItemsDatesIdPutAsyncWithHttpInfo($id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersItemsDatesIdPutAsyncWithHttpInfo
     *
     * Update a date of an order item
     *
     * @param int $id The ID of the order item date (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsDatesIdPutAsyncWithHttpInfo($id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderItemDate';
        $request = $this->restOrdersItemsDatesIdPutRequest($id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersItemsDatesIdPut'
     *
     * @param int $id The ID of the order item date (required)
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersItemsDatesIdPutRequest($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling restOrdersItemsDatesIdPut'
            );
        }

        $resourcePath = '/rest/orders/items/dates/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersItemsDatesPost
     *
     * Create a date for an order item
     *
     * @param object $body body (optional)
     *
     * @return PlentyModulesOrderDateModelsOrderItemDate
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsDatesPost($body = null)
    {
        list($response) = $this->restOrdersItemsDatesPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation restOrdersItemsDatesPostWithHttpInfo
     *
     * Create a date for an order item
     *
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderItemDate, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsDatesPostWithHttpInfo($body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderItemDate';
        $request = $this->restOrdersItemsDatesPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderItemDate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersItemsDatesPostAsync
     *
     * Create a date for an order item
     *
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsDatesPostAsync($body = null)
    {
        return $this->restOrdersItemsDatesPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersItemsDatesPostAsyncWithHttpInfo
     *
     * Create a date for an order item
     *
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsDatesPostAsyncWithHttpInfo($body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderItemDate';
        $request = $this->restOrdersItemsDatesPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersItemsDatesPost'
     *
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersItemsDatesPostRequest($body = null)
    {

        $resourcePath = '/rest/orders/items/dates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersItemsOrderItemIdBookingPost
     *
     * Book an order item
     *
     * @param int $order_item_id The ID of the order item. (required)
     * @param int $delivery_note_number The delivery note number. (optional)
     *
     * @return PlentyModulesOrderBookingModelsOrderBooking
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsOrderItemIdBookingPost($order_item_id, $delivery_note_number = null)
    {
        list($response) = $this->restOrdersItemsOrderItemIdBookingPostWithHttpInfo($order_item_id, $delivery_note_number);
        return $response;
    }

    /**
     * Operation restOrdersItemsOrderItemIdBookingPostWithHttpInfo
     *
     * Book an order item
     *
     * @param int $order_item_id The ID of the order item. (required)
     * @param int $delivery_note_number The delivery note number. (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderBookingModelsOrderBooking, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsOrderItemIdBookingPostWithHttpInfo($order_item_id, $delivery_note_number = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderBookingModelsOrderBooking';
        $request = $this->restOrdersItemsOrderItemIdBookingPostRequest($order_item_id, $delivery_note_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderBookingModelsOrderBooking',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersItemsOrderItemIdBookingPostAsync
     *
     * Book an order item
     *
     * @param int $order_item_id The ID of the order item. (required)
     * @param int $delivery_note_number The delivery note number. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsOrderItemIdBookingPostAsync($order_item_id, $delivery_note_number = null)
    {
        return $this->restOrdersItemsOrderItemIdBookingPostAsyncWithHttpInfo($order_item_id, $delivery_note_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersItemsOrderItemIdBookingPostAsyncWithHttpInfo
     *
     * Book an order item
     *
     * @param int $order_item_id The ID of the order item. (required)
     * @param int $delivery_note_number The delivery note number. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsOrderItemIdBookingPostAsyncWithHttpInfo($order_item_id, $delivery_note_number = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderBookingModelsOrderBooking';
        $request = $this->restOrdersItemsOrderItemIdBookingPostRequest($order_item_id, $delivery_note_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersItemsOrderItemIdBookingPost'
     *
     * @param int $order_item_id The ID of the order item. (required)
     * @param int $delivery_note_number The delivery note number. (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersItemsOrderItemIdBookingPostRequest($order_item_id, $delivery_note_number = null)
    {
        // verify the required parameter 'order_item_id' is set
        if ($order_item_id === null || (is_array($order_item_id) && count($order_item_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_item_id when calling restOrdersItemsOrderItemIdBookingPost'
            );
        }

        $resourcePath = '/rest/orders/items/{orderItemId}/booking';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($delivery_note_number !== null) {
            $queryParams['deliveryNoteNumber'] = ObjectSerializer::toQueryValue($delivery_note_number);
        }

        // path params
        if ($order_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderItemId' . '}',
                ObjectSerializer::toPathValue($order_item_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersItemsOrderItemIdDatesGet
     *
     * List dates of an order item
     *
     * @param int $order_item_id The order item ID of the order item date instance to be loaded (required)
     *
     * @return PlentyModulesOrderDateModelsOrderItemDate[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsOrderItemIdDatesGet($order_item_id)
    {
        list($response) = $this->restOrdersItemsOrderItemIdDatesGetWithHttpInfo($order_item_id);
        return $response;
    }

    /**
     * Operation restOrdersItemsOrderItemIdDatesGetWithHttpInfo
     *
     * List dates of an order item
     *
     * @param int $order_item_id The order item ID of the order item date instance to be loaded (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderItemDate[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsOrderItemIdDatesGetWithHttpInfo($order_item_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderItemDate[]';
        $request = $this->restOrdersItemsOrderItemIdDatesGetRequest($order_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderItemDate[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersItemsOrderItemIdDatesGetAsync
     *
     * List dates of an order item
     *
     * @param int $order_item_id The order item ID of the order item date instance to be loaded (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsOrderItemIdDatesGetAsync($order_item_id)
    {
        return $this->restOrdersItemsOrderItemIdDatesGetAsyncWithHttpInfo($order_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersItemsOrderItemIdDatesGetAsyncWithHttpInfo
     *
     * List dates of an order item
     *
     * @param int $order_item_id The order item ID of the order item date instance to be loaded (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsOrderItemIdDatesGetAsyncWithHttpInfo($order_item_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderItemDate[]';
        $request = $this->restOrdersItemsOrderItemIdDatesGetRequest($order_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersItemsOrderItemIdDatesGet'
     *
     * @param int $order_item_id The order item ID of the order item date instance to be loaded (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersItemsOrderItemIdDatesGetRequest($order_item_id)
    {
        // verify the required parameter 'order_item_id' is set
        if ($order_item_id === null || (is_array($order_item_id) && count($order_item_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_item_id when calling restOrdersItemsOrderItemIdDatesGet'
            );
        }

        $resourcePath = '/rest/orders/items/{orderItemId}/dates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderItemId' . '}',
                ObjectSerializer::toPathValue($order_item_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersItemsOrderItemIdDatesTypeIdDelete
     *
     * Delete a date from an order item by order item and date type
     *
     * @param int $order_item_id The ID of the order item (required)
     * @param int $type_id The ID of the order date (required)
     *
     * @return void
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsOrderItemIdDatesTypeIdDelete($order_item_id, $type_id)
    {
        $this->restOrdersItemsOrderItemIdDatesTypeIdDeleteWithHttpInfo($order_item_id, $type_id);
    }

    /**
     * Operation restOrdersItemsOrderItemIdDatesTypeIdDeleteWithHttpInfo
     *
     * Delete a date from an order item by order item and date type
     *
     * @param int $order_item_id The ID of the order item (required)
     * @param int $type_id The ID of the order date (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsOrderItemIdDatesTypeIdDeleteWithHttpInfo($order_item_id, $type_id)
    {
        $returnType = '';
        $request = $this->restOrdersItemsOrderItemIdDatesTypeIdDeleteRequest($order_item_id, $type_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersItemsOrderItemIdDatesTypeIdDeleteAsync
     *
     * Delete a date from an order item by order item and date type
     *
     * @param int $order_item_id The ID of the order item (required)
     * @param int $type_id The ID of the order date (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsOrderItemIdDatesTypeIdDeleteAsync($order_item_id, $type_id)
    {
        return $this->restOrdersItemsOrderItemIdDatesTypeIdDeleteAsyncWithHttpInfo($order_item_id, $type_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersItemsOrderItemIdDatesTypeIdDeleteAsyncWithHttpInfo
     *
     * Delete a date from an order item by order item and date type
     *
     * @param int $order_item_id The ID of the order item (required)
     * @param int $type_id The ID of the order date (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsOrderItemIdDatesTypeIdDeleteAsyncWithHttpInfo($order_item_id, $type_id)
    {
        $returnType = '';
        $request = $this->restOrdersItemsOrderItemIdDatesTypeIdDeleteRequest($order_item_id, $type_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersItemsOrderItemIdDatesTypeIdDelete'
     *
     * @param int $order_item_id The ID of the order item (required)
     * @param int $type_id The ID of the order date (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersItemsOrderItemIdDatesTypeIdDeleteRequest($order_item_id, $type_id)
    {
        // verify the required parameter 'order_item_id' is set
        if ($order_item_id === null || (is_array($order_item_id) && count($order_item_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_item_id when calling restOrdersItemsOrderItemIdDatesTypeIdDelete'
            );
        }
        // verify the required parameter 'type_id' is set
        if ($type_id === null || (is_array($type_id) && count($type_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $type_id when calling restOrdersItemsOrderItemIdDatesTypeIdDelete'
            );
        }

        $resourcePath = '/rest/orders/items/{orderItemId}/dates/{typeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderItemId' . '}',
                ObjectSerializer::toPathValue($order_item_id),
                $resourcePath
            );
        }
        // path params
        if ($type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'typeId' . '}',
                ObjectSerializer::toPathValue($type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersItemsOrderItemIdDatesTypeIdGet
     *
     * Get a date of an order item by order item and date type
     *
     * @param int $order_item_id The ID of the order item (required)
     * @param int $type_id The ID of the order date type (required)
     *
     * @return PlentyModulesOrderDateModelsOrderItemDate
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsOrderItemIdDatesTypeIdGet($order_item_id, $type_id)
    {
        list($response) = $this->restOrdersItemsOrderItemIdDatesTypeIdGetWithHttpInfo($order_item_id, $type_id);
        return $response;
    }

    /**
     * Operation restOrdersItemsOrderItemIdDatesTypeIdGetWithHttpInfo
     *
     * Get a date of an order item by order item and date type
     *
     * @param int $order_item_id The ID of the order item (required)
     * @param int $type_id The ID of the order date type (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderItemDate, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsOrderItemIdDatesTypeIdGetWithHttpInfo($order_item_id, $type_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderItemDate';
        $request = $this->restOrdersItemsOrderItemIdDatesTypeIdGetRequest($order_item_id, $type_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderItemDate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersItemsOrderItemIdDatesTypeIdGetAsync
     *
     * Get a date of an order item by order item and date type
     *
     * @param int $order_item_id The ID of the order item (required)
     * @param int $type_id The ID of the order date type (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsOrderItemIdDatesTypeIdGetAsync($order_item_id, $type_id)
    {
        return $this->restOrdersItemsOrderItemIdDatesTypeIdGetAsyncWithHttpInfo($order_item_id, $type_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersItemsOrderItemIdDatesTypeIdGetAsyncWithHttpInfo
     *
     * Get a date of an order item by order item and date type
     *
     * @param int $order_item_id The ID of the order item (required)
     * @param int $type_id The ID of the order date type (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsOrderItemIdDatesTypeIdGetAsyncWithHttpInfo($order_item_id, $type_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderItemDate';
        $request = $this->restOrdersItemsOrderItemIdDatesTypeIdGetRequest($order_item_id, $type_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersItemsOrderItemIdDatesTypeIdGet'
     *
     * @param int $order_item_id The ID of the order item (required)
     * @param int $type_id The ID of the order date type (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersItemsOrderItemIdDatesTypeIdGetRequest($order_item_id, $type_id)
    {
        // verify the required parameter 'order_item_id' is set
        if ($order_item_id === null || (is_array($order_item_id) && count($order_item_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_item_id when calling restOrdersItemsOrderItemIdDatesTypeIdGet'
            );
        }
        // verify the required parameter 'type_id' is set
        if ($type_id === null || (is_array($type_id) && count($type_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $type_id when calling restOrdersItemsOrderItemIdDatesTypeIdGet'
            );
        }

        $resourcePath = '/rest/orders/items/{orderItemId}/dates/{typeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderItemId' . '}',
                ObjectSerializer::toPathValue($order_item_id),
                $resourcePath
            );
        }
        // path params
        if ($type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'typeId' . '}',
                ObjectSerializer::toPathValue($type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersItemsOrderItemIdDatesTypeIdPost
     *
     * Create a date for an order item by order item and date type
     *
     * @param int $order_item_id The ID of the order item (required)
     * @param int $type_id The ID of the order date type (required)
     * @param object $body body (optional)
     *
     * @return PlentyModulesOrderDateModelsOrderItemDate
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsOrderItemIdDatesTypeIdPost($order_item_id, $type_id, $body = null)
    {
        list($response) = $this->restOrdersItemsOrderItemIdDatesTypeIdPostWithHttpInfo($order_item_id, $type_id, $body);
        return $response;
    }

    /**
     * Operation restOrdersItemsOrderItemIdDatesTypeIdPostWithHttpInfo
     *
     * Create a date for an order item by order item and date type
     *
     * @param int $order_item_id The ID of the order item (required)
     * @param int $type_id The ID of the order date type (required)
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderItemDate, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsOrderItemIdDatesTypeIdPostWithHttpInfo($order_item_id, $type_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderItemDate';
        $request = $this->restOrdersItemsOrderItemIdDatesTypeIdPostRequest($order_item_id, $type_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderItemDate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersItemsOrderItemIdDatesTypeIdPostAsync
     *
     * Create a date for an order item by order item and date type
     *
     * @param int $order_item_id The ID of the order item (required)
     * @param int $type_id The ID of the order date type (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsOrderItemIdDatesTypeIdPostAsync($order_item_id, $type_id, $body = null)
    {
        return $this->restOrdersItemsOrderItemIdDatesTypeIdPostAsyncWithHttpInfo($order_item_id, $type_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersItemsOrderItemIdDatesTypeIdPostAsyncWithHttpInfo
     *
     * Create a date for an order item by order item and date type
     *
     * @param int $order_item_id The ID of the order item (required)
     * @param int $type_id The ID of the order date type (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsOrderItemIdDatesTypeIdPostAsyncWithHttpInfo($order_item_id, $type_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderItemDate';
        $request = $this->restOrdersItemsOrderItemIdDatesTypeIdPostRequest($order_item_id, $type_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersItemsOrderItemIdDatesTypeIdPost'
     *
     * @param int $order_item_id The ID of the order item (required)
     * @param int $type_id The ID of the order date type (required)
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersItemsOrderItemIdDatesTypeIdPostRequest($order_item_id, $type_id, $body = null)
    {
        // verify the required parameter 'order_item_id' is set
        if ($order_item_id === null || (is_array($order_item_id) && count($order_item_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_item_id when calling restOrdersItemsOrderItemIdDatesTypeIdPost'
            );
        }
        // verify the required parameter 'type_id' is set
        if ($type_id === null || (is_array($type_id) && count($type_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $type_id when calling restOrdersItemsOrderItemIdDatesTypeIdPost'
            );
        }

        $resourcePath = '/rest/orders/items/{orderItemId}/dates/{typeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderItemId' . '}',
                ObjectSerializer::toPathValue($order_item_id),
                $resourcePath
            );
        }
        // path params
        if ($type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'typeId' . '}',
                ObjectSerializer::toPathValue($type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersItemsOrderItemIdDatesTypeIdPut
     *
     * Update a date of an order item by order item and date type
     *
     * @param int $order_item_id The ID of the order item (required)
     * @param int $type_id The ID of the order date type (required)
     * @param object $body body (optional)
     *
     * @return PlentyModulesOrderDateModelsOrderItemDate
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsOrderItemIdDatesTypeIdPut($order_item_id, $type_id, $body = null)
    {
        list($response) = $this->restOrdersItemsOrderItemIdDatesTypeIdPutWithHttpInfo($order_item_id, $type_id, $body);
        return $response;
    }

    /**
     * Operation restOrdersItemsOrderItemIdDatesTypeIdPutWithHttpInfo
     *
     * Update a date of an order item by order item and date type
     *
     * @param int $order_item_id The ID of the order item (required)
     * @param int $type_id The ID of the order date type (required)
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderItemDate, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsOrderItemIdDatesTypeIdPutWithHttpInfo($order_item_id, $type_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderItemDate';
        $request = $this->restOrdersItemsOrderItemIdDatesTypeIdPutRequest($order_item_id, $type_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderItemDate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersItemsOrderItemIdDatesTypeIdPutAsync
     *
     * Update a date of an order item by order item and date type
     *
     * @param int $order_item_id The ID of the order item (required)
     * @param int $type_id The ID of the order date type (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsOrderItemIdDatesTypeIdPutAsync($order_item_id, $type_id, $body = null)
    {
        return $this->restOrdersItemsOrderItemIdDatesTypeIdPutAsyncWithHttpInfo($order_item_id, $type_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersItemsOrderItemIdDatesTypeIdPutAsyncWithHttpInfo
     *
     * Update a date of an order item by order item and date type
     *
     * @param int $order_item_id The ID of the order item (required)
     * @param int $type_id The ID of the order date type (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsOrderItemIdDatesTypeIdPutAsyncWithHttpInfo($order_item_id, $type_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderItemDate';
        $request = $this->restOrdersItemsOrderItemIdDatesTypeIdPutRequest($order_item_id, $type_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersItemsOrderItemIdDatesTypeIdPut'
     *
     * @param int $order_item_id The ID of the order item (required)
     * @param int $type_id The ID of the order date type (required)
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersItemsOrderItemIdDatesTypeIdPutRequest($order_item_id, $type_id, $body = null)
    {
        // verify the required parameter 'order_item_id' is set
        if ($order_item_id === null || (is_array($order_item_id) && count($order_item_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_item_id when calling restOrdersItemsOrderItemIdDatesTypeIdPut'
            );
        }
        // verify the required parameter 'type_id' is set
        if ($type_id === null || (is_array($type_id) && count($type_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $type_id when calling restOrdersItemsOrderItemIdDatesTypeIdPut'
            );
        }

        $resourcePath = '/rest/orders/items/{orderItemId}/dates/{typeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderItemId' . '}',
                ObjectSerializer::toPathValue($order_item_id),
                $resourcePath
            );
        }
        // path params
        if ($type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'typeId' . '}',
                ObjectSerializer::toPathValue($type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersItemsOrderItemIdPropertiesGet
     *
     * Get all order item propertys for one order item by its order item id.
     *
     * @param int $order_item_id The order item ID of the order item property instance to be loaded (required)
     *
     * @return PlentyModulesOrderPropertyModelsOrderItemProperty[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsOrderItemIdPropertiesGet($order_item_id)
    {
        list($response) = $this->restOrdersItemsOrderItemIdPropertiesGetWithHttpInfo($order_item_id);
        return $response;
    }

    /**
     * Operation restOrdersItemsOrderItemIdPropertiesGetWithHttpInfo
     *
     * Get all order item propertys for one order item by its order item id.
     *
     * @param int $order_item_id The order item ID of the order item property instance to be loaded (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderItemProperty[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsOrderItemIdPropertiesGetWithHttpInfo($order_item_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderItemProperty[]';
        $request = $this->restOrdersItemsOrderItemIdPropertiesGetRequest($order_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderItemProperty[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersItemsOrderItemIdPropertiesGetAsync
     *
     * Get all order item propertys for one order item by its order item id.
     *
     * @param int $order_item_id The order item ID of the order item property instance to be loaded (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsOrderItemIdPropertiesGetAsync($order_item_id)
    {
        return $this->restOrdersItemsOrderItemIdPropertiesGetAsyncWithHttpInfo($order_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersItemsOrderItemIdPropertiesGetAsyncWithHttpInfo
     *
     * Get all order item propertys for one order item by its order item id.
     *
     * @param int $order_item_id The order item ID of the order item property instance to be loaded (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsOrderItemIdPropertiesGetAsyncWithHttpInfo($order_item_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderItemProperty[]';
        $request = $this->restOrdersItemsOrderItemIdPropertiesGetRequest($order_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersItemsOrderItemIdPropertiesGet'
     *
     * @param int $order_item_id The order item ID of the order item property instance to be loaded (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersItemsOrderItemIdPropertiesGetRequest($order_item_id)
    {
        // verify the required parameter 'order_item_id' is set
        if ($order_item_id === null || (is_array($order_item_id) && count($order_item_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_item_id when calling restOrdersItemsOrderItemIdPropertiesGet'
            );
        }

        $resourcePath = '/rest/orders/items/{orderItemId}/properties';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderItemId' . '}',
                ObjectSerializer::toPathValue($order_item_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersItemsOrderItemIdPropertiesTypeIdDelete
     *
     * Delete an order item property by order item ID and order property type ID.
     *
     * @param int $order_item_id The order item ID of the order item property instance to be deleted (required)
     * @param int $type_id The order property type ID of the order item property instance to be deleted (required)
     *
     * @return void
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsOrderItemIdPropertiesTypeIdDelete($order_item_id, $type_id)
    {
        $this->restOrdersItemsOrderItemIdPropertiesTypeIdDeleteWithHttpInfo($order_item_id, $type_id);
    }

    /**
     * Operation restOrdersItemsOrderItemIdPropertiesTypeIdDeleteWithHttpInfo
     *
     * Delete an order item property by order item ID and order property type ID.
     *
     * @param int $order_item_id The order item ID of the order item property instance to be deleted (required)
     * @param int $type_id The order property type ID of the order item property instance to be deleted (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsOrderItemIdPropertiesTypeIdDeleteWithHttpInfo($order_item_id, $type_id)
    {
        $returnType = '';
        $request = $this->restOrdersItemsOrderItemIdPropertiesTypeIdDeleteRequest($order_item_id, $type_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersItemsOrderItemIdPropertiesTypeIdDeleteAsync
     *
     * Delete an order item property by order item ID and order property type ID.
     *
     * @param int $order_item_id The order item ID of the order item property instance to be deleted (required)
     * @param int $type_id The order property type ID of the order item property instance to be deleted (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsOrderItemIdPropertiesTypeIdDeleteAsync($order_item_id, $type_id)
    {
        return $this->restOrdersItemsOrderItemIdPropertiesTypeIdDeleteAsyncWithHttpInfo($order_item_id, $type_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersItemsOrderItemIdPropertiesTypeIdDeleteAsyncWithHttpInfo
     *
     * Delete an order item property by order item ID and order property type ID.
     *
     * @param int $order_item_id The order item ID of the order item property instance to be deleted (required)
     * @param int $type_id The order property type ID of the order item property instance to be deleted (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsOrderItemIdPropertiesTypeIdDeleteAsyncWithHttpInfo($order_item_id, $type_id)
    {
        $returnType = '';
        $request = $this->restOrdersItemsOrderItemIdPropertiesTypeIdDeleteRequest($order_item_id, $type_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersItemsOrderItemIdPropertiesTypeIdDelete'
     *
     * @param int $order_item_id The order item ID of the order item property instance to be deleted (required)
     * @param int $type_id The order property type ID of the order item property instance to be deleted (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersItemsOrderItemIdPropertiesTypeIdDeleteRequest($order_item_id, $type_id)
    {
        // verify the required parameter 'order_item_id' is set
        if ($order_item_id === null || (is_array($order_item_id) && count($order_item_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_item_id when calling restOrdersItemsOrderItemIdPropertiesTypeIdDelete'
            );
        }
        // verify the required parameter 'type_id' is set
        if ($type_id === null || (is_array($type_id) && count($type_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $type_id when calling restOrdersItemsOrderItemIdPropertiesTypeIdDelete'
            );
        }

        $resourcePath = '/rest/orders/items/{orderItemId}/properties/{typeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderItemId' . '}',
                ObjectSerializer::toPathValue($order_item_id),
                $resourcePath
            );
        }
        // path params
        if ($type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'typeId' . '}',
                ObjectSerializer::toPathValue($type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersItemsOrderItemIdPropertiesTypeIdGet
     *
     * Get an order item property by order item ID and order property type ID.
     *
     * @param int $order_item_id The order item ID of the order item property instance to be loaded (required)
     * @param int $type_id The order property type ID of the order item property instance to be loaded (required)
     *
     * @return PlentyModulesOrderPropertyModelsOrderItemProperty
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsOrderItemIdPropertiesTypeIdGet($order_item_id, $type_id)
    {
        list($response) = $this->restOrdersItemsOrderItemIdPropertiesTypeIdGetWithHttpInfo($order_item_id, $type_id);
        return $response;
    }

    /**
     * Operation restOrdersItemsOrderItemIdPropertiesTypeIdGetWithHttpInfo
     *
     * Get an order item property by order item ID and order property type ID.
     *
     * @param int $order_item_id The order item ID of the order item property instance to be loaded (required)
     * @param int $type_id The order property type ID of the order item property instance to be loaded (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderItemProperty, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsOrderItemIdPropertiesTypeIdGetWithHttpInfo($order_item_id, $type_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderItemProperty';
        $request = $this->restOrdersItemsOrderItemIdPropertiesTypeIdGetRequest($order_item_id, $type_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderItemProperty',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersItemsOrderItemIdPropertiesTypeIdGetAsync
     *
     * Get an order item property by order item ID and order property type ID.
     *
     * @param int $order_item_id The order item ID of the order item property instance to be loaded (required)
     * @param int $type_id The order property type ID of the order item property instance to be loaded (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsOrderItemIdPropertiesTypeIdGetAsync($order_item_id, $type_id)
    {
        return $this->restOrdersItemsOrderItemIdPropertiesTypeIdGetAsyncWithHttpInfo($order_item_id, $type_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersItemsOrderItemIdPropertiesTypeIdGetAsyncWithHttpInfo
     *
     * Get an order item property by order item ID and order property type ID.
     *
     * @param int $order_item_id The order item ID of the order item property instance to be loaded (required)
     * @param int $type_id The order property type ID of the order item property instance to be loaded (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsOrderItemIdPropertiesTypeIdGetAsyncWithHttpInfo($order_item_id, $type_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderItemProperty';
        $request = $this->restOrdersItemsOrderItemIdPropertiesTypeIdGetRequest($order_item_id, $type_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersItemsOrderItemIdPropertiesTypeIdGet'
     *
     * @param int $order_item_id The order item ID of the order item property instance to be loaded (required)
     * @param int $type_id The order property type ID of the order item property instance to be loaded (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersItemsOrderItemIdPropertiesTypeIdGetRequest($order_item_id, $type_id)
    {
        // verify the required parameter 'order_item_id' is set
        if ($order_item_id === null || (is_array($order_item_id) && count($order_item_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_item_id when calling restOrdersItemsOrderItemIdPropertiesTypeIdGet'
            );
        }
        // verify the required parameter 'type_id' is set
        if ($type_id === null || (is_array($type_id) && count($type_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $type_id when calling restOrdersItemsOrderItemIdPropertiesTypeIdGet'
            );
        }

        $resourcePath = '/rest/orders/items/{orderItemId}/properties/{typeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderItemId' . '}',
                ObjectSerializer::toPathValue($order_item_id),
                $resourcePath
            );
        }
        // path params
        if ($type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'typeId' . '}',
                ObjectSerializer::toPathValue($type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersItemsOrderItemIdPropertiesTypeIdPost
     *
     * Create an order item property by order item ID and order property type ID.
     *
     * @param int $order_item_id The order item ID of the order item property instance to be created (required)
     * @param int $type_id The order property type ID of the order item property instance to be created (required)
     * @param object $body body (optional)
     *
     * @return PlentyModulesOrderPropertyModelsOrderItemProperty
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsOrderItemIdPropertiesTypeIdPost($order_item_id, $type_id, $body = null)
    {
        list($response) = $this->restOrdersItemsOrderItemIdPropertiesTypeIdPostWithHttpInfo($order_item_id, $type_id, $body);
        return $response;
    }

    /**
     * Operation restOrdersItemsOrderItemIdPropertiesTypeIdPostWithHttpInfo
     *
     * Create an order item property by order item ID and order property type ID.
     *
     * @param int $order_item_id The order item ID of the order item property instance to be created (required)
     * @param int $type_id The order property type ID of the order item property instance to be created (required)
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderItemProperty, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsOrderItemIdPropertiesTypeIdPostWithHttpInfo($order_item_id, $type_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderItemProperty';
        $request = $this->restOrdersItemsOrderItemIdPropertiesTypeIdPostRequest($order_item_id, $type_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderItemProperty',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersItemsOrderItemIdPropertiesTypeIdPostAsync
     *
     * Create an order item property by order item ID and order property type ID.
     *
     * @param int $order_item_id The order item ID of the order item property instance to be created (required)
     * @param int $type_id The order property type ID of the order item property instance to be created (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsOrderItemIdPropertiesTypeIdPostAsync($order_item_id, $type_id, $body = null)
    {
        return $this->restOrdersItemsOrderItemIdPropertiesTypeIdPostAsyncWithHttpInfo($order_item_id, $type_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersItemsOrderItemIdPropertiesTypeIdPostAsyncWithHttpInfo
     *
     * Create an order item property by order item ID and order property type ID.
     *
     * @param int $order_item_id The order item ID of the order item property instance to be created (required)
     * @param int $type_id The order property type ID of the order item property instance to be created (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsOrderItemIdPropertiesTypeIdPostAsyncWithHttpInfo($order_item_id, $type_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderItemProperty';
        $request = $this->restOrdersItemsOrderItemIdPropertiesTypeIdPostRequest($order_item_id, $type_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersItemsOrderItemIdPropertiesTypeIdPost'
     *
     * @param int $order_item_id The order item ID of the order item property instance to be created (required)
     * @param int $type_id The order property type ID of the order item property instance to be created (required)
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersItemsOrderItemIdPropertiesTypeIdPostRequest($order_item_id, $type_id, $body = null)
    {
        // verify the required parameter 'order_item_id' is set
        if ($order_item_id === null || (is_array($order_item_id) && count($order_item_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_item_id when calling restOrdersItemsOrderItemIdPropertiesTypeIdPost'
            );
        }
        // verify the required parameter 'type_id' is set
        if ($type_id === null || (is_array($type_id) && count($type_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $type_id when calling restOrdersItemsOrderItemIdPropertiesTypeIdPost'
            );
        }

        $resourcePath = '/rest/orders/items/{orderItemId}/properties/{typeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderItemId' . '}',
                ObjectSerializer::toPathValue($order_item_id),
                $resourcePath
            );
        }
        // path params
        if ($type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'typeId' . '}',
                ObjectSerializer::toPathValue($type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersItemsOrderItemIdPropertiesTypeIdPut
     *
     * Update an order item property by order item ID and order property type ID.
     *
     * @param int $order_item_id The order item ID of the order item property instance to be updated (required)
     * @param int $type_id The order property type ID of the order item property instance to be updated (required)
     * @param object $body body (optional)
     *
     * @return PlentyModulesOrderPropertyModelsOrderItemProperty
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsOrderItemIdPropertiesTypeIdPut($order_item_id, $type_id, $body = null)
    {
        list($response) = $this->restOrdersItemsOrderItemIdPropertiesTypeIdPutWithHttpInfo($order_item_id, $type_id, $body);
        return $response;
    }

    /**
     * Operation restOrdersItemsOrderItemIdPropertiesTypeIdPutWithHttpInfo
     *
     * Update an order item property by order item ID and order property type ID.
     *
     * @param int $order_item_id The order item ID of the order item property instance to be updated (required)
     * @param int $type_id The order property type ID of the order item property instance to be updated (required)
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderItemProperty, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsOrderItemIdPropertiesTypeIdPutWithHttpInfo($order_item_id, $type_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderItemProperty';
        $request = $this->restOrdersItemsOrderItemIdPropertiesTypeIdPutRequest($order_item_id, $type_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderItemProperty',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersItemsOrderItemIdPropertiesTypeIdPutAsync
     *
     * Update an order item property by order item ID and order property type ID.
     *
     * @param int $order_item_id The order item ID of the order item property instance to be updated (required)
     * @param int $type_id The order property type ID of the order item property instance to be updated (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsOrderItemIdPropertiesTypeIdPutAsync($order_item_id, $type_id, $body = null)
    {
        return $this->restOrdersItemsOrderItemIdPropertiesTypeIdPutAsyncWithHttpInfo($order_item_id, $type_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersItemsOrderItemIdPropertiesTypeIdPutAsyncWithHttpInfo
     *
     * Update an order item property by order item ID and order property type ID.
     *
     * @param int $order_item_id The order item ID of the order item property instance to be updated (required)
     * @param int $type_id The order property type ID of the order item property instance to be updated (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsOrderItemIdPropertiesTypeIdPutAsyncWithHttpInfo($order_item_id, $type_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderItemProperty';
        $request = $this->restOrdersItemsOrderItemIdPropertiesTypeIdPutRequest($order_item_id, $type_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersItemsOrderItemIdPropertiesTypeIdPut'
     *
     * @param int $order_item_id The order item ID of the order item property instance to be updated (required)
     * @param int $type_id The order property type ID of the order item property instance to be updated (required)
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersItemsOrderItemIdPropertiesTypeIdPutRequest($order_item_id, $type_id, $body = null)
    {
        // verify the required parameter 'order_item_id' is set
        if ($order_item_id === null || (is_array($order_item_id) && count($order_item_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_item_id when calling restOrdersItemsOrderItemIdPropertiesTypeIdPut'
            );
        }
        // verify the required parameter 'type_id' is set
        if ($type_id === null || (is_array($type_id) && count($type_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $type_id when calling restOrdersItemsOrderItemIdPropertiesTypeIdPut'
            );
        }

        $resourcePath = '/rest/orders/items/{orderItemId}/properties/{typeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderItemId' . '}',
                ObjectSerializer::toPathValue($order_item_id),
                $resourcePath
            );
        }
        // path params
        if ($type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'typeId' . '}',
                ObjectSerializer::toPathValue($type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersItemsOrderItemIdTransactionsGet
     *
     * List transactions
     *
     * @param int $order_item_id The ID of the order item (required)
     * @param int $columns The properties to be loaded (optional)
     * @param int $with Load additional relations for a transaction. Currently possible are &#x27;orderItem&#x27; and &#x27;warehouseLocation&#x27;. (optional)
     *
     * @return IlluminateDatabaseEloquentCollection
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsOrderItemIdTransactionsGet($order_item_id, $columns = null, $with = null)
    {
        list($response) = $this->restOrdersItemsOrderItemIdTransactionsGetWithHttpInfo($order_item_id, $columns, $with);
        return $response;
    }

    /**
     * Operation restOrdersItemsOrderItemIdTransactionsGetWithHttpInfo
     *
     * List transactions
     *
     * @param int $order_item_id The ID of the order item (required)
     * @param int $columns The properties to be loaded (optional)
     * @param int $with Load additional relations for a transaction. Currently possible are &#x27;orderItem&#x27; and &#x27;warehouseLocation&#x27;. (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\IlluminateDatabaseEloquentCollection, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsOrderItemIdTransactionsGetWithHttpInfo($order_item_id, $columns = null, $with = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\IlluminateDatabaseEloquentCollection';
        $request = $this->restOrdersItemsOrderItemIdTransactionsGetRequest($order_item_id, $columns, $with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\IlluminateDatabaseEloquentCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersItemsOrderItemIdTransactionsGetAsync
     *
     * List transactions
     *
     * @param int $order_item_id The ID of the order item (required)
     * @param int $columns The properties to be loaded (optional)
     * @param int $with Load additional relations for a transaction. Currently possible are &#x27;orderItem&#x27; and &#x27;warehouseLocation&#x27;. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsOrderItemIdTransactionsGetAsync($order_item_id, $columns = null, $with = null)
    {
        return $this->restOrdersItemsOrderItemIdTransactionsGetAsyncWithHttpInfo($order_item_id, $columns, $with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersItemsOrderItemIdTransactionsGetAsyncWithHttpInfo
     *
     * List transactions
     *
     * @param int $order_item_id The ID of the order item (required)
     * @param int $columns The properties to be loaded (optional)
     * @param int $with Load additional relations for a transaction. Currently possible are &#x27;orderItem&#x27; and &#x27;warehouseLocation&#x27;. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsOrderItemIdTransactionsGetAsyncWithHttpInfo($order_item_id, $columns = null, $with = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\IlluminateDatabaseEloquentCollection';
        $request = $this->restOrdersItemsOrderItemIdTransactionsGetRequest($order_item_id, $columns, $with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersItemsOrderItemIdTransactionsGet'
     *
     * @param int $order_item_id The ID of the order item (required)
     * @param int $columns The properties to be loaded (optional)
     * @param int $with Load additional relations for a transaction. Currently possible are &#x27;orderItem&#x27; and &#x27;warehouseLocation&#x27;. (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersItemsOrderItemIdTransactionsGetRequest($order_item_id, $columns = null, $with = null)
    {
        // verify the required parameter 'order_item_id' is set
        if ($order_item_id === null || (is_array($order_item_id) && count($order_item_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_item_id when calling restOrdersItemsOrderItemIdTransactionsGet'
            );
        }

        $resourcePath = '/rest/orders/items/{orderItemId}/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($columns !== null) {
            $queryParams['columns'] = ObjectSerializer::toQueryValue($columns);
        }
        // query params
        if ($with !== null) {
            $queryParams['with'] = ObjectSerializer::toQueryValue($with);
        }

        // path params
        if ($order_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderItemId' . '}',
                ObjectSerializer::toPathValue($order_item_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersItemsOrderItemIdTransactionsPost
     *
     * Create a transaction
     *
     * @param int $order_item_id order_item_id (required)
     * @param object $body body (optional)
     *
     * @return PlentyModulesOrderTransactionModelsOrderItemTransaction
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsOrderItemIdTransactionsPost($order_item_id, $body = null)
    {
        list($response) = $this->restOrdersItemsOrderItemIdTransactionsPostWithHttpInfo($order_item_id, $body);
        return $response;
    }

    /**
     * Operation restOrdersItemsOrderItemIdTransactionsPostWithHttpInfo
     *
     * Create a transaction
     *
     * @param int $order_item_id (required)
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderTransactionModelsOrderItemTransaction, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsOrderItemIdTransactionsPostWithHttpInfo($order_item_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderTransactionModelsOrderItemTransaction';
        $request = $this->restOrdersItemsOrderItemIdTransactionsPostRequest($order_item_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderTransactionModelsOrderItemTransaction',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersItemsOrderItemIdTransactionsPostAsync
     *
     * Create a transaction
     *
     * @param int $order_item_id (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsOrderItemIdTransactionsPostAsync($order_item_id, $body = null)
    {
        return $this->restOrdersItemsOrderItemIdTransactionsPostAsyncWithHttpInfo($order_item_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersItemsOrderItemIdTransactionsPostAsyncWithHttpInfo
     *
     * Create a transaction
     *
     * @param int $order_item_id (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsOrderItemIdTransactionsPostAsyncWithHttpInfo($order_item_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderTransactionModelsOrderItemTransaction';
        $request = $this->restOrdersItemsOrderItemIdTransactionsPostRequest($order_item_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersItemsOrderItemIdTransactionsPost'
     *
     * @param int $order_item_id (required)
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersItemsOrderItemIdTransactionsPostRequest($order_item_id, $body = null)
    {
        // verify the required parameter 'order_item_id' is set
        if ($order_item_id === null || (is_array($order_item_id) && count($order_item_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_item_id when calling restOrdersItemsOrderItemIdTransactionsPost'
            );
        }

        $resourcePath = '/rest/orders/items/{orderItemId}/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderItemId' . '}',
                ObjectSerializer::toPathValue($order_item_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersItemsOutgoingStocksDelete
     *
     * Revert outgoing stock for order items
     *
     * @param object $body body (optional)
     *
     * @return void
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsOutgoingStocksDelete($body = null)
    {
        $this->restOrdersItemsOutgoingStocksDeleteWithHttpInfo($body);
    }

    /**
     * Operation restOrdersItemsOutgoingStocksDeleteWithHttpInfo
     *
     * Revert outgoing stock for order items
     *
     * @param object $body (optional)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsOutgoingStocksDeleteWithHttpInfo($body = null)
    {
        $returnType = '';
        $request = $this->restOrdersItemsOutgoingStocksDeleteRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersItemsOutgoingStocksDeleteAsync
     *
     * Revert outgoing stock for order items
     *
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsOutgoingStocksDeleteAsync($body = null)
    {
        return $this->restOrdersItemsOutgoingStocksDeleteAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersItemsOutgoingStocksDeleteAsyncWithHttpInfo
     *
     * Revert outgoing stock for order items
     *
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsOutgoingStocksDeleteAsyncWithHttpInfo($body = null)
    {
        $returnType = '';
        $request = $this->restOrdersItemsOutgoingStocksDeleteRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersItemsOutgoingStocksDelete'
     *
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersItemsOutgoingStocksDeleteRequest($body = null)
    {

        $resourcePath = '/rest/orders/items/outgoing_stocks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersItemsPropertiesIdDelete
     *
     * Delete an order item property by ID.
     *
     * @param int $id The ID of the order item property instance to be deleted. (required)
     *
     * @return void
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsPropertiesIdDelete($id)
    {
        $this->restOrdersItemsPropertiesIdDeleteWithHttpInfo($id);
    }

    /**
     * Operation restOrdersItemsPropertiesIdDeleteWithHttpInfo
     *
     * Delete an order item property by ID.
     *
     * @param int $id The ID of the order item property instance to be deleted. (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsPropertiesIdDeleteWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->restOrdersItemsPropertiesIdDeleteRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersItemsPropertiesIdDeleteAsync
     *
     * Delete an order item property by ID.
     *
     * @param int $id The ID of the order item property instance to be deleted. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsPropertiesIdDeleteAsync($id)
    {
        return $this->restOrdersItemsPropertiesIdDeleteAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersItemsPropertiesIdDeleteAsyncWithHttpInfo
     *
     * Delete an order item property by ID.
     *
     * @param int $id The ID of the order item property instance to be deleted. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsPropertiesIdDeleteAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->restOrdersItemsPropertiesIdDeleteRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersItemsPropertiesIdDelete'
     *
     * @param int $id The ID of the order item property instance to be deleted. (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersItemsPropertiesIdDeleteRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling restOrdersItemsPropertiesIdDelete'
            );
        }

        $resourcePath = '/rest/orders/items/properties/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersItemsPropertiesIdGet
     *
     * Get an order item property by ID.
     *
     * @param int $id The ID of the order item property instance to be loaded. (required)
     *
     * @return PlentyModulesOrderPropertyModelsOrderItemProperty
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsPropertiesIdGet($id)
    {
        list($response) = $this->restOrdersItemsPropertiesIdGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation restOrdersItemsPropertiesIdGetWithHttpInfo
     *
     * Get an order item property by ID.
     *
     * @param int $id The ID of the order item property instance to be loaded. (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderItemProperty, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsPropertiesIdGetWithHttpInfo($id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderItemProperty';
        $request = $this->restOrdersItemsPropertiesIdGetRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderItemProperty',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersItemsPropertiesIdGetAsync
     *
     * Get an order item property by ID.
     *
     * @param int $id The ID of the order item property instance to be loaded. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsPropertiesIdGetAsync($id)
    {
        return $this->restOrdersItemsPropertiesIdGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersItemsPropertiesIdGetAsyncWithHttpInfo
     *
     * Get an order item property by ID.
     *
     * @param int $id The ID of the order item property instance to be loaded. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsPropertiesIdGetAsyncWithHttpInfo($id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderItemProperty';
        $request = $this->restOrdersItemsPropertiesIdGetRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersItemsPropertiesIdGet'
     *
     * @param int $id The ID of the order item property instance to be loaded. (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersItemsPropertiesIdGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling restOrdersItemsPropertiesIdGet'
            );
        }

        $resourcePath = '/rest/orders/items/properties/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersItemsPropertiesIdPut
     *
     * Update an order item property by ID.
     *
     * @param int $id The ID of the order item property instance to be updated. (required)
     * @param object $body body (optional)
     *
     * @return PlentyModulesOrderPropertyModelsOrderItemProperty
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsPropertiesIdPut($id, $body = null)
    {
        list($response) = $this->restOrdersItemsPropertiesIdPutWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation restOrdersItemsPropertiesIdPutWithHttpInfo
     *
     * Update an order item property by ID.
     *
     * @param int $id The ID of the order item property instance to be updated. (required)
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderItemProperty, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsPropertiesIdPutWithHttpInfo($id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderItemProperty';
        $request = $this->restOrdersItemsPropertiesIdPutRequest($id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderItemProperty',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersItemsPropertiesIdPutAsync
     *
     * Update an order item property by ID.
     *
     * @param int $id The ID of the order item property instance to be updated. (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsPropertiesIdPutAsync($id, $body = null)
    {
        return $this->restOrdersItemsPropertiesIdPutAsyncWithHttpInfo($id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersItemsPropertiesIdPutAsyncWithHttpInfo
     *
     * Update an order item property by ID.
     *
     * @param int $id The ID of the order item property instance to be updated. (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsPropertiesIdPutAsyncWithHttpInfo($id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderItemProperty';
        $request = $this->restOrdersItemsPropertiesIdPutRequest($id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersItemsPropertiesIdPut'
     *
     * @param int $id The ID of the order item property instance to be updated. (required)
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersItemsPropertiesIdPutRequest($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling restOrdersItemsPropertiesIdPut'
            );
        }

        $resourcePath = '/rest/orders/items/properties/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersItemsPropertiesPost
     *
     * Create an order item property.
     *
     * @param object $body body (optional)
     *
     * @return PlentyModulesOrderPropertyModelsOrderItemProperty
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsPropertiesPost($body = null)
    {
        list($response) = $this->restOrdersItemsPropertiesPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation restOrdersItemsPropertiesPostWithHttpInfo
     *
     * Create an order item property.
     *
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderItemProperty, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsPropertiesPostWithHttpInfo($body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderItemProperty';
        $request = $this->restOrdersItemsPropertiesPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderItemProperty',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersItemsPropertiesPostAsync
     *
     * Create an order item property.
     *
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsPropertiesPostAsync($body = null)
    {
        return $this->restOrdersItemsPropertiesPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersItemsPropertiesPostAsyncWithHttpInfo
     *
     * Create an order item property.
     *
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsPropertiesPostAsyncWithHttpInfo($body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderItemProperty';
        $request = $this->restOrdersItemsPropertiesPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersItemsPropertiesPost'
     *
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersItemsPropertiesPostRequest($body = null)
    {

        $resourcePath = '/rest/orders/items/properties';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersItemsTransactionsBookingPost
     *
     * Book order item transactions
     *
     * @param string $transaction_ids The IDs of the order item transactions. (required)
     * @param int $delivery_note_number The delivery note number. (optional)
     *
     * @return PlentyModulesOrderBookingModelsOrderBooking
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsTransactionsBookingPost($transaction_ids, $delivery_note_number = null)
    {
        list($response) = $this->restOrdersItemsTransactionsBookingPostWithHttpInfo($transaction_ids, $delivery_note_number);
        return $response;
    }

    /**
     * Operation restOrdersItemsTransactionsBookingPostWithHttpInfo
     *
     * Book order item transactions
     *
     * @param string $transaction_ids The IDs of the order item transactions. (required)
     * @param int $delivery_note_number The delivery note number. (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderBookingModelsOrderBooking, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsTransactionsBookingPostWithHttpInfo($transaction_ids, $delivery_note_number = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderBookingModelsOrderBooking';
        $request = $this->restOrdersItemsTransactionsBookingPostRequest($transaction_ids, $delivery_note_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderBookingModelsOrderBooking',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersItemsTransactionsBookingPostAsync
     *
     * Book order item transactions
     *
     * @param string $transaction_ids The IDs of the order item transactions. (required)
     * @param int $delivery_note_number The delivery note number. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsTransactionsBookingPostAsync($transaction_ids, $delivery_note_number = null)
    {
        return $this->restOrdersItemsTransactionsBookingPostAsyncWithHttpInfo($transaction_ids, $delivery_note_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersItemsTransactionsBookingPostAsyncWithHttpInfo
     *
     * Book order item transactions
     *
     * @param string $transaction_ids The IDs of the order item transactions. (required)
     * @param int $delivery_note_number The delivery note number. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsTransactionsBookingPostAsyncWithHttpInfo($transaction_ids, $delivery_note_number = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderBookingModelsOrderBooking';
        $request = $this->restOrdersItemsTransactionsBookingPostRequest($transaction_ids, $delivery_note_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersItemsTransactionsBookingPost'
     *
     * @param string $transaction_ids The IDs of the order item transactions. (required)
     * @param int $delivery_note_number The delivery note number. (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersItemsTransactionsBookingPostRequest($transaction_ids, $delivery_note_number = null)
    {
        // verify the required parameter 'transaction_ids' is set
        if ($transaction_ids === null || (is_array($transaction_ids) && count($transaction_ids) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $transaction_ids when calling restOrdersItemsTransactionsBookingPost'
            );
        }

        $resourcePath = '/rest/orders/items/transactions/booking';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($transaction_ids !== null) {
            $queryParams['transactionIds'] = ObjectSerializer::toQueryValue($transaction_ids);
        }
        // query params
        if ($delivery_note_number !== null) {
            $queryParams['deliveryNoteNumber'] = ObjectSerializer::toQueryValue($delivery_note_number);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersItemsTransactionsGet
     *
     * Search transactions
     *
     * @param int $page The page to get. The default page that will be returned is page 1. (optional)
     * @param int $items_per_page The number of orders to be displayed per page. The default number of orders per page is 50. (optional)
     * @param int $columns The properties to be loaded (optional)
     * @param int $with Load additional relations for a transaction. Currently possible are &#x27;orderItem&#x27; and &#x27;warehouseLocation&#x27;. (optional)
     * @param int $order_item_id The ID of the order item (optional)
     * @param int $order_id The ID of the order (optional)
     * @param string $direction The direction of the transaction (optional)
     * @param string $status The status of the transaction (optional)
     * @param bool $is_booked Returns all booked transactions (optional)
     *
     * @return object
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsTransactionsGet($page = null, $items_per_page = null, $columns = null, $with = null, $order_item_id = null, $order_id = null, $direction = null, $status = null, $is_booked = null)
    {
        list($response) = $this->restOrdersItemsTransactionsGetWithHttpInfo($page, $items_per_page, $columns, $with, $order_item_id, $order_id, $direction, $status, $is_booked);
        return $response;
    }

    /**
     * Operation restOrdersItemsTransactionsGetWithHttpInfo
     *
     * Search transactions
     *
     * @param int $page The page to get. The default page that will be returned is page 1. (optional)
     * @param int $items_per_page The number of orders to be displayed per page. The default number of orders per page is 50. (optional)
     * @param int $columns The properties to be loaded (optional)
     * @param int $with Load additional relations for a transaction. Currently possible are &#x27;orderItem&#x27; and &#x27;warehouseLocation&#x27;. (optional)
     * @param int $order_item_id The ID of the order item (optional)
     * @param int $order_id The ID of the order (optional)
     * @param string $direction The direction of the transaction (optional)
     * @param string $status The status of the transaction (optional)
     * @param bool $is_booked Returns all booked transactions (optional)
     *
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsTransactionsGetWithHttpInfo($page = null, $items_per_page = null, $columns = null, $with = null, $order_item_id = null, $order_id = null, $direction = null, $status = null, $is_booked = null)
    {
        $returnType = 'object';
        $request = $this->restOrdersItemsTransactionsGetRequest($page, $items_per_page, $columns, $with, $order_item_id, $order_id, $direction, $status, $is_booked);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersItemsTransactionsGetAsync
     *
     * Search transactions
     *
     * @param int $page The page to get. The default page that will be returned is page 1. (optional)
     * @param int $items_per_page The number of orders to be displayed per page. The default number of orders per page is 50. (optional)
     * @param int $columns The properties to be loaded (optional)
     * @param int $with Load additional relations for a transaction. Currently possible are &#x27;orderItem&#x27; and &#x27;warehouseLocation&#x27;. (optional)
     * @param int $order_item_id The ID of the order item (optional)
     * @param int $order_id The ID of the order (optional)
     * @param string $direction The direction of the transaction (optional)
     * @param string $status The status of the transaction (optional)
     * @param bool $is_booked Returns all booked transactions (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsTransactionsGetAsync($page = null, $items_per_page = null, $columns = null, $with = null, $order_item_id = null, $order_id = null, $direction = null, $status = null, $is_booked = null)
    {
        return $this->restOrdersItemsTransactionsGetAsyncWithHttpInfo($page, $items_per_page, $columns, $with, $order_item_id, $order_id, $direction, $status, $is_booked)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersItemsTransactionsGetAsyncWithHttpInfo
     *
     * Search transactions
     *
     * @param int $page The page to get. The default page that will be returned is page 1. (optional)
     * @param int $items_per_page The number of orders to be displayed per page. The default number of orders per page is 50. (optional)
     * @param int $columns The properties to be loaded (optional)
     * @param int $with Load additional relations for a transaction. Currently possible are &#x27;orderItem&#x27; and &#x27;warehouseLocation&#x27;. (optional)
     * @param int $order_item_id The ID of the order item (optional)
     * @param int $order_id The ID of the order (optional)
     * @param string $direction The direction of the transaction (optional)
     * @param string $status The status of the transaction (optional)
     * @param bool $is_booked Returns all booked transactions (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsTransactionsGetAsyncWithHttpInfo($page = null, $items_per_page = null, $columns = null, $with = null, $order_item_id = null, $order_id = null, $direction = null, $status = null, $is_booked = null)
    {
        $returnType = 'object';
        $request = $this->restOrdersItemsTransactionsGetRequest($page, $items_per_page, $columns, $with, $order_item_id, $order_id, $direction, $status, $is_booked);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersItemsTransactionsGet'
     *
     * @param int $page The page to get. The default page that will be returned is page 1. (optional)
     * @param int $items_per_page The number of orders to be displayed per page. The default number of orders per page is 50. (optional)
     * @param int $columns The properties to be loaded (optional)
     * @param int $with Load additional relations for a transaction. Currently possible are &#x27;orderItem&#x27; and &#x27;warehouseLocation&#x27;. (optional)
     * @param int $order_item_id The ID of the order item (optional)
     * @param int $order_id The ID of the order (optional)
     * @param string $direction The direction of the transaction (optional)
     * @param string $status The status of the transaction (optional)
     * @param bool $is_booked Returns all booked transactions (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersItemsTransactionsGetRequest($page = null, $items_per_page = null, $columns = null, $with = null, $order_item_id = null, $order_id = null, $direction = null, $status = null, $is_booked = null)
    {

        $resourcePath = '/rest/orders/items/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($items_per_page !== null) {
            $queryParams['itemsPerPage'] = ObjectSerializer::toQueryValue($items_per_page);
        }
        // query params
        if ($columns !== null) {
            $queryParams['columns'] = ObjectSerializer::toQueryValue($columns);
        }
        // query params
        if ($with !== null) {
            $queryParams['with'] = ObjectSerializer::toQueryValue($with);
        }
        // query params
        if ($order_item_id !== null) {
            $queryParams['orderItemId'] = ObjectSerializer::toQueryValue($order_item_id);
        }
        // query params
        if ($order_id !== null) {
            $queryParams['orderId'] = ObjectSerializer::toQueryValue($order_id);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($is_booked !== null) {
            $queryParams['isBooked'] = ObjectSerializer::toQueryValue($is_booked);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersItemsTransactionsTransactionIdDelete
     *
     * Delete a transaction
     *
     * @param int $transaction_id transaction_id (required)
     *
     * @return PlentyRepositoriesModelsDeleteResponse
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsTransactionsTransactionIdDelete($transaction_id)
    {
        list($response) = $this->restOrdersItemsTransactionsTransactionIdDeleteWithHttpInfo($transaction_id);
        return $response;
    }

    /**
     * Operation restOrdersItemsTransactionsTransactionIdDeleteWithHttpInfo
     *
     * Delete a transaction
     *
     * @param int $transaction_id (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyRepositoriesModelsDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsTransactionsTransactionIdDeleteWithHttpInfo($transaction_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyRepositoriesModelsDeleteResponse';
        $request = $this->restOrdersItemsTransactionsTransactionIdDeleteRequest($transaction_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyRepositoriesModelsDeleteResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersItemsTransactionsTransactionIdDeleteAsync
     *
     * Delete a transaction
     *
     * @param int $transaction_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsTransactionsTransactionIdDeleteAsync($transaction_id)
    {
        return $this->restOrdersItemsTransactionsTransactionIdDeleteAsyncWithHttpInfo($transaction_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersItemsTransactionsTransactionIdDeleteAsyncWithHttpInfo
     *
     * Delete a transaction
     *
     * @param int $transaction_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsTransactionsTransactionIdDeleteAsyncWithHttpInfo($transaction_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyRepositoriesModelsDeleteResponse';
        $request = $this->restOrdersItemsTransactionsTransactionIdDeleteRequest($transaction_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersItemsTransactionsTransactionIdDelete'
     *
     * @param int $transaction_id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersItemsTransactionsTransactionIdDeleteRequest($transaction_id)
    {
        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling restOrdersItemsTransactionsTransactionIdDelete'
            );
        }

        $resourcePath = '/rest/orders/items/transactions/{transactionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionId' . '}',
                ObjectSerializer::toPathValue($transaction_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersItemsTransactionsTransactionIdPut
     *
     * Update a transaction
     *
     * @param int $transaction_id transaction_id (required)
     * @param object $body body (optional)
     *
     * @return PlentyModulesOrderTransactionModelsOrderItemTransaction
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsTransactionsTransactionIdPut($transaction_id, $body = null)
    {
        list($response) = $this->restOrdersItemsTransactionsTransactionIdPutWithHttpInfo($transaction_id, $body);
        return $response;
    }

    /**
     * Operation restOrdersItemsTransactionsTransactionIdPutWithHttpInfo
     *
     * Update a transaction
     *
     * @param int $transaction_id (required)
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderTransactionModelsOrderItemTransaction, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersItemsTransactionsTransactionIdPutWithHttpInfo($transaction_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderTransactionModelsOrderItemTransaction';
        $request = $this->restOrdersItemsTransactionsTransactionIdPutRequest($transaction_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderTransactionModelsOrderItemTransaction',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersItemsTransactionsTransactionIdPutAsync
     *
     * Update a transaction
     *
     * @param int $transaction_id (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsTransactionsTransactionIdPutAsync($transaction_id, $body = null)
    {
        return $this->restOrdersItemsTransactionsTransactionIdPutAsyncWithHttpInfo($transaction_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersItemsTransactionsTransactionIdPutAsyncWithHttpInfo
     *
     * Update a transaction
     *
     * @param int $transaction_id (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersItemsTransactionsTransactionIdPutAsyncWithHttpInfo($transaction_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderTransactionModelsOrderItemTransaction';
        $request = $this->restOrdersItemsTransactionsTransactionIdPutRequest($transaction_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersItemsTransactionsTransactionIdPut'
     *
     * @param int $transaction_id (required)
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersItemsTransactionsTransactionIdPutRequest($transaction_id, $body = null)
    {
        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling restOrdersItemsTransactionsTransactionIdPut'
            );
        }

        $resourcePath = '/rest/orders/items/transactions/{transactionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionId' . '}',
                ObjectSerializer::toPathValue($transaction_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdBookingPost
     *
     * Book an order
     *
     * @param int $order_id The ID of the order. (required)
     * @param int $delivery_note_number The delivery note number. (optional)
     *
     * @return PlentyModulesOrderBookingModelsOrderBooking
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdBookingPost($order_id, $delivery_note_number = null)
    {
        list($response) = $this->restOrdersOrderIdBookingPostWithHttpInfo($order_id, $delivery_note_number);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdBookingPostWithHttpInfo
     *
     * Book an order
     *
     * @param int $order_id The ID of the order. (required)
     * @param int $delivery_note_number The delivery note number. (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderBookingModelsOrderBooking, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdBookingPostWithHttpInfo($order_id, $delivery_note_number = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderBookingModelsOrderBooking';
        $request = $this->restOrdersOrderIdBookingPostRequest($order_id, $delivery_note_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderBookingModelsOrderBooking',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdBookingPostAsync
     *
     * Book an order
     *
     * @param int $order_id The ID of the order. (required)
     * @param int $delivery_note_number The delivery note number. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdBookingPostAsync($order_id, $delivery_note_number = null)
    {
        return $this->restOrdersOrderIdBookingPostAsyncWithHttpInfo($order_id, $delivery_note_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdBookingPostAsyncWithHttpInfo
     *
     * Book an order
     *
     * @param int $order_id The ID of the order. (required)
     * @param int $delivery_note_number The delivery note number. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdBookingPostAsyncWithHttpInfo($order_id, $delivery_note_number = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderBookingModelsOrderBooking';
        $request = $this->restOrdersOrderIdBookingPostRequest($order_id, $delivery_note_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdBookingPost'
     *
     * @param int $order_id The ID of the order. (required)
     * @param int $delivery_note_number The delivery note number. (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdBookingPostRequest($order_id, $delivery_note_number = null)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdBookingPost'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/booking';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($delivery_note_number !== null) {
            $queryParams['deliveryNoteNumber'] = ObjectSerializer::toQueryValue($delivery_note_number);
        }

        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdCancelPut
     *
     * Cancel an order
     *
     * @param int $order_id The ID of the order to be canceled. (required)
     * @param object $body body (optional)
     *
     * @return void
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdCancelPut($order_id, $body = null)
    {
        $this->restOrdersOrderIdCancelPutWithHttpInfo($order_id, $body);
    }

    /**
     * Operation restOrdersOrderIdCancelPutWithHttpInfo
     *
     * Cancel an order
     *
     * @param int $order_id The ID of the order to be canceled. (required)
     * @param object $body (optional)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdCancelPutWithHttpInfo($order_id, $body = null)
    {
        $returnType = '';
        $request = $this->restOrdersOrderIdCancelPutRequest($order_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdCancelPutAsync
     *
     * Cancel an order
     *
     * @param int $order_id The ID of the order to be canceled. (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdCancelPutAsync($order_id, $body = null)
    {
        return $this->restOrdersOrderIdCancelPutAsyncWithHttpInfo($order_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdCancelPutAsyncWithHttpInfo
     *
     * Cancel an order
     *
     * @param int $order_id The ID of the order to be canceled. (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdCancelPutAsyncWithHttpInfo($order_id, $body = null)
    {
        $returnType = '';
        $request = $this->restOrdersOrderIdCancelPutRequest($order_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdCancelPut'
     *
     * @param int $order_id The ID of the order to be canceled. (required)
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdCancelPutRequest($order_id, $body = null)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdCancelPut'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdContactWishGet
     *
     * Get a contact wish
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return PlentyModulesOrderContactWishModelsContactWish
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdContactWishGet($order_id)
    {
        list($response) = $this->restOrdersOrderIdContactWishGetWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdContactWishGetWithHttpInfo
     *
     * Get a contact wish
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderContactWishModelsContactWish, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdContactWishGetWithHttpInfo($order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderContactWishModelsContactWish';
        $request = $this->restOrdersOrderIdContactWishGetRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderContactWishModelsContactWish',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdContactWishGetAsync
     *
     * Get a contact wish
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdContactWishGetAsync($order_id)
    {
        return $this->restOrdersOrderIdContactWishGetAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdContactWishGetAsyncWithHttpInfo
     *
     * Get a contact wish
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdContactWishGetAsyncWithHttpInfo($order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderContactWishModelsContactWish';
        $request = $this->restOrdersOrderIdContactWishGetRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdContactWishGet'
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdContactWishGetRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdContactWishGet'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/contactWish';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdCouponsCouponPost
     *
     * Redeem a coupon code
     *
     * @param int $order_id The ID of the order to redeem the coupon (required)
     * @param string $coupon The coupon code to be redeemed (required)
     *
     * @return PlentyModulesOrderCouponCodeValidationModelsCouponCodeValidation
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdCouponsCouponPost($order_id, $coupon)
    {
        list($response) = $this->restOrdersOrderIdCouponsCouponPostWithHttpInfo($order_id, $coupon);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdCouponsCouponPostWithHttpInfo
     *
     * Redeem a coupon code
     *
     * @param int $order_id The ID of the order to redeem the coupon (required)
     * @param string $coupon The coupon code to be redeemed (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCouponCodeValidationModelsCouponCodeValidation, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdCouponsCouponPostWithHttpInfo($order_id, $coupon)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCouponCodeValidationModelsCouponCodeValidation';
        $request = $this->restOrdersOrderIdCouponsCouponPostRequest($order_id, $coupon);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCouponCodeValidationModelsCouponCodeValidation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdCouponsCouponPostAsync
     *
     * Redeem a coupon code
     *
     * @param int $order_id The ID of the order to redeem the coupon (required)
     * @param string $coupon The coupon code to be redeemed (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdCouponsCouponPostAsync($order_id, $coupon)
    {
        return $this->restOrdersOrderIdCouponsCouponPostAsyncWithHttpInfo($order_id, $coupon)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdCouponsCouponPostAsyncWithHttpInfo
     *
     * Redeem a coupon code
     *
     * @param int $order_id The ID of the order to redeem the coupon (required)
     * @param string $coupon The coupon code to be redeemed (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdCouponsCouponPostAsyncWithHttpInfo($order_id, $coupon)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderCouponCodeValidationModelsCouponCodeValidation';
        $request = $this->restOrdersOrderIdCouponsCouponPostRequest($order_id, $coupon);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdCouponsCouponPost'
     *
     * @param int $order_id The ID of the order to redeem the coupon (required)
     * @param string $coupon The coupon code to be redeemed (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdCouponsCouponPostRequest($order_id, $coupon)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdCouponsCouponPost'
            );
        }
        // verify the required parameter 'coupon' is set
        if ($coupon === null || (is_array($coupon) && count($coupon) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $coupon when calling restOrdersOrderIdCouponsCouponPost'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/coupons/{coupon}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($coupon !== null) {
            $resourcePath = str_replace(
                '{' . 'coupon' . '}',
                ObjectSerializer::toPathValue($coupon),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdDatesGet
     *
     * List dates of an order
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return PlentyModulesOrderDateModelsOrderDate[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdDatesGet($order_id)
    {
        list($response) = $this->restOrdersOrderIdDatesGetWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdDatesGetWithHttpInfo
     *
     * List dates of an order
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderDate[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdDatesGetWithHttpInfo($order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderDate[]';
        $request = $this->restOrdersOrderIdDatesGetRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderDate[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdDatesGetAsync
     *
     * List dates of an order
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdDatesGetAsync($order_id)
    {
        return $this->restOrdersOrderIdDatesGetAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdDatesGetAsyncWithHttpInfo
     *
     * List dates of an order
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdDatesGetAsyncWithHttpInfo($order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderDate[]';
        $request = $this->restOrdersOrderIdDatesGetRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdDatesGet'
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdDatesGetRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdDatesGet'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/dates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdDatesTypeIdGet
     *
     * Get a date
     *
     * @param int $type_id The ID of the order date type to be found (required)
     * @param int $order_id The ID of the order (required)
     *
     * @return PlentyModulesOrderDateModelsOrderDate
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdDatesTypeIdGet($type_id, $order_id)
    {
        list($response) = $this->restOrdersOrderIdDatesTypeIdGetWithHttpInfo($type_id, $order_id);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdDatesTypeIdGetWithHttpInfo
     *
     * Get a date
     *
     * @param int $type_id The ID of the order date type to be found (required)
     * @param int $order_id The ID of the order (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderDate, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdDatesTypeIdGetWithHttpInfo($type_id, $order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderDate';
        $request = $this->restOrdersOrderIdDatesTypeIdGetRequest($type_id, $order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderDate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdDatesTypeIdGetAsync
     *
     * Get a date
     *
     * @param int $type_id The ID of the order date type to be found (required)
     * @param int $order_id The ID of the order (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdDatesTypeIdGetAsync($type_id, $order_id)
    {
        return $this->restOrdersOrderIdDatesTypeIdGetAsyncWithHttpInfo($type_id, $order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdDatesTypeIdGetAsyncWithHttpInfo
     *
     * Get a date
     *
     * @param int $type_id The ID of the order date type to be found (required)
     * @param int $order_id The ID of the order (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdDatesTypeIdGetAsyncWithHttpInfo($type_id, $order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderDateModelsOrderDate';
        $request = $this->restOrdersOrderIdDatesTypeIdGetRequest($type_id, $order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdDatesTypeIdGet'
     *
     * @param int $type_id The ID of the order date type to be found (required)
     * @param int $order_id The ID of the order (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdDatesTypeIdGetRequest($type_id, $order_id)
    {
        // verify the required parameter 'type_id' is set
        if ($type_id === null || (is_array($type_id) && count($type_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $type_id when calling restOrdersOrderIdDatesTypeIdGet'
            );
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdDatesTypeIdGet'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/dates/{typeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'typeId' . '}',
                ObjectSerializer::toPathValue($type_id),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdDelete
     *
     * Delete an order
     *
     * @param int $order_id The ID of the order to be deleted. (required)
     *
     * @return void
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdDelete($order_id)
    {
        $this->restOrdersOrderIdDeleteWithHttpInfo($order_id);
    }

    /**
     * Operation restOrdersOrderIdDeleteWithHttpInfo
     *
     * Delete an order
     *
     * @param int $order_id The ID of the order to be deleted. (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdDeleteWithHttpInfo($order_id)
    {
        $returnType = '';
        $request = $this->restOrdersOrderIdDeleteRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdDeleteAsync
     *
     * Delete an order
     *
     * @param int $order_id The ID of the order to be deleted. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdDeleteAsync($order_id)
    {
        return $this->restOrdersOrderIdDeleteAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdDeleteAsyncWithHttpInfo
     *
     * Delete an order
     *
     * @param int $order_id The ID of the order to be deleted. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdDeleteAsyncWithHttpInfo($order_id)
    {
        $returnType = '';
        $request = $this->restOrdersOrderIdDeleteRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdDelete'
     *
     * @param int $order_id The ID of the order to be deleted. (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdDeleteRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdDelete'
            );
        }

        $resourcePath = '/rest/orders/{orderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdGet
     *
     * Get an order
     *
     * @param int $order_id The ID of the order. (required)
     * @param int $with Load additional relations for an order. Currently possible are:      * &lt;ul&gt;        &lt;li&gt;&#x27;addresses&#x27; &#x3D; The address objects that are associated with the order.&lt;/li&gt;        &lt;li&gt;&#x27;relations&#x27; &#x3D; The order relation reference instances that are associated with the order. These instances contain information such as the the reference type, the ID of the reference and the relation itself.&lt;/li&gt;        &lt;li&gt;&#x27;comments&#x27; &#x3D; The order comments.&lt;/li&gt;        &lt;li&gt;&#x27;location&#x27; &#x3D; The accounting location of the order.&lt;/li&gt;        &lt;li&gt;&#x27;payments&#x27; &#x3D; The payments that are associated with the order.&lt;/li&gt;        &lt;li&gt;&#x27;documents&#x27; &#x3D; The documents that are associated with the order.&lt;/li&gt;        &lt;li&gt;&#x27;contactSender&#x27; &#x3D; The associated contact for the contact-sender relation.&lt;/li&gt;        &lt;li&gt;&#x27;contactReceiver&#x27; &#x3D; The associated contact for the contact-receiver relation.&lt;/li&gt;        &lt;li&gt;&#x27;warehouseSender&#x27; &#x3D; The associated warehouse for the warehouse-sender relation.&lt;/li&gt;        &lt;li&gt;&#x27;warehouseReceiver&#x27; &#x3D; The associated warehouse for the warehouse-receiver relation.&lt;/li&gt;        &lt;li&gt;&#x27;orderItems.variation&#x27; &#x3D; The variation that is associated with the order item.&lt;/li&gt;        &lt;li&gt;&#x27;orderItems.giftCardCodes&#x27; &#x3D; The gift card codes that are associated with the order item.&lt;/li&gt;        &lt;li&gt;&#x27;orderItems.transactions&#x27; &#x3D; The transactions that are associated with the order item.&lt;/li&gt;        &lt;li&gt;&#x27;orderItems.serialNumbers&#x27; &#x3D; The serial numbers that are associated with the order item.&lt;/li&gt;        &lt;li&gt;&#x27;orderItems.variationBarcodes&#x27; &#x3D; The barcodes that are associated with variation of the order item.&lt;/li&gt;        &lt;li&gt;&#x27;orderItems.comments&#x27; &#x3D; The comments that are associated with the order item.&lt;/li&gt;        &lt;li&gt;&lt;b&gt;deprecated&lt;/b&gt; &#x27;orderItems.warehouseLocations&#x27; &#x3D; The warehouse locations that are associated with the order item.&lt;/li&gt;      &lt;/ul&gt;      Example: &lt;code&gt;?with[]&#x3D;addresses&amp;with[]&#x3D;orderItems.variation&lt;/code&gt; (optional)
     *
     * @return PlentyModulesOrderModelsOrder
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdGet($order_id, $with = null)
    {
        list($response) = $this->restOrdersOrderIdGetWithHttpInfo($order_id, $with);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdGetWithHttpInfo
     *
     * Get an order
     *
     * @param int $order_id The ID of the order. (required)
     * @param int $with Load additional relations for an order. Currently possible are:      * &lt;ul&gt;        &lt;li&gt;&#x27;addresses&#x27; &#x3D; The address objects that are associated with the order.&lt;/li&gt;        &lt;li&gt;&#x27;relations&#x27; &#x3D; The order relation reference instances that are associated with the order. These instances contain information such as the the reference type, the ID of the reference and the relation itself.&lt;/li&gt;        &lt;li&gt;&#x27;comments&#x27; &#x3D; The order comments.&lt;/li&gt;        &lt;li&gt;&#x27;location&#x27; &#x3D; The accounting location of the order.&lt;/li&gt;        &lt;li&gt;&#x27;payments&#x27; &#x3D; The payments that are associated with the order.&lt;/li&gt;        &lt;li&gt;&#x27;documents&#x27; &#x3D; The documents that are associated with the order.&lt;/li&gt;        &lt;li&gt;&#x27;contactSender&#x27; &#x3D; The associated contact for the contact-sender relation.&lt;/li&gt;        &lt;li&gt;&#x27;contactReceiver&#x27; &#x3D; The associated contact for the contact-receiver relation.&lt;/li&gt;        &lt;li&gt;&#x27;warehouseSender&#x27; &#x3D; The associated warehouse for the warehouse-sender relation.&lt;/li&gt;        &lt;li&gt;&#x27;warehouseReceiver&#x27; &#x3D; The associated warehouse for the warehouse-receiver relation.&lt;/li&gt;        &lt;li&gt;&#x27;orderItems.variation&#x27; &#x3D; The variation that is associated with the order item.&lt;/li&gt;        &lt;li&gt;&#x27;orderItems.giftCardCodes&#x27; &#x3D; The gift card codes that are associated with the order item.&lt;/li&gt;        &lt;li&gt;&#x27;orderItems.transactions&#x27; &#x3D; The transactions that are associated with the order item.&lt;/li&gt;        &lt;li&gt;&#x27;orderItems.serialNumbers&#x27; &#x3D; The serial numbers that are associated with the order item.&lt;/li&gt;        &lt;li&gt;&#x27;orderItems.variationBarcodes&#x27; &#x3D; The barcodes that are associated with variation of the order item.&lt;/li&gt;        &lt;li&gt;&#x27;orderItems.comments&#x27; &#x3D; The comments that are associated with the order item.&lt;/li&gt;        &lt;li&gt;&lt;b&gt;deprecated&lt;/b&gt; &#x27;orderItems.warehouseLocations&#x27; &#x3D; The warehouse locations that are associated with the order item.&lt;/li&gt;      &lt;/ul&gt;      Example: &lt;code&gt;?with[]&#x3D;addresses&amp;with[]&#x3D;orderItems.variation&lt;/code&gt; (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdGetWithHttpInfo($order_id, $with = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder';
        $request = $this->restOrdersOrderIdGetRequest($order_id, $with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdGetAsync
     *
     * Get an order
     *
     * @param int $order_id The ID of the order. (required)
     * @param int $with Load additional relations for an order. Currently possible are:      * &lt;ul&gt;        &lt;li&gt;&#x27;addresses&#x27; &#x3D; The address objects that are associated with the order.&lt;/li&gt;        &lt;li&gt;&#x27;relations&#x27; &#x3D; The order relation reference instances that are associated with the order. These instances contain information such as the the reference type, the ID of the reference and the relation itself.&lt;/li&gt;        &lt;li&gt;&#x27;comments&#x27; &#x3D; The order comments.&lt;/li&gt;        &lt;li&gt;&#x27;location&#x27; &#x3D; The accounting location of the order.&lt;/li&gt;        &lt;li&gt;&#x27;payments&#x27; &#x3D; The payments that are associated with the order.&lt;/li&gt;        &lt;li&gt;&#x27;documents&#x27; &#x3D; The documents that are associated with the order.&lt;/li&gt;        &lt;li&gt;&#x27;contactSender&#x27; &#x3D; The associated contact for the contact-sender relation.&lt;/li&gt;        &lt;li&gt;&#x27;contactReceiver&#x27; &#x3D; The associated contact for the contact-receiver relation.&lt;/li&gt;        &lt;li&gt;&#x27;warehouseSender&#x27; &#x3D; The associated warehouse for the warehouse-sender relation.&lt;/li&gt;        &lt;li&gt;&#x27;warehouseReceiver&#x27; &#x3D; The associated warehouse for the warehouse-receiver relation.&lt;/li&gt;        &lt;li&gt;&#x27;orderItems.variation&#x27; &#x3D; The variation that is associated with the order item.&lt;/li&gt;        &lt;li&gt;&#x27;orderItems.giftCardCodes&#x27; &#x3D; The gift card codes that are associated with the order item.&lt;/li&gt;        &lt;li&gt;&#x27;orderItems.transactions&#x27; &#x3D; The transactions that are associated with the order item.&lt;/li&gt;        &lt;li&gt;&#x27;orderItems.serialNumbers&#x27; &#x3D; The serial numbers that are associated with the order item.&lt;/li&gt;        &lt;li&gt;&#x27;orderItems.variationBarcodes&#x27; &#x3D; The barcodes that are associated with variation of the order item.&lt;/li&gt;        &lt;li&gt;&#x27;orderItems.comments&#x27; &#x3D; The comments that are associated with the order item.&lt;/li&gt;        &lt;li&gt;&lt;b&gt;deprecated&lt;/b&gt; &#x27;orderItems.warehouseLocations&#x27; &#x3D; The warehouse locations that are associated with the order item.&lt;/li&gt;      &lt;/ul&gt;      Example: &lt;code&gt;?with[]&#x3D;addresses&amp;with[]&#x3D;orderItems.variation&lt;/code&gt; (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdGetAsync($order_id, $with = null)
    {
        return $this->restOrdersOrderIdGetAsyncWithHttpInfo($order_id, $with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdGetAsyncWithHttpInfo
     *
     * Get an order
     *
     * @param int $order_id The ID of the order. (required)
     * @param int $with Load additional relations for an order. Currently possible are:      * &lt;ul&gt;        &lt;li&gt;&#x27;addresses&#x27; &#x3D; The address objects that are associated with the order.&lt;/li&gt;        &lt;li&gt;&#x27;relations&#x27; &#x3D; The order relation reference instances that are associated with the order. These instances contain information such as the the reference type, the ID of the reference and the relation itself.&lt;/li&gt;        &lt;li&gt;&#x27;comments&#x27; &#x3D; The order comments.&lt;/li&gt;        &lt;li&gt;&#x27;location&#x27; &#x3D; The accounting location of the order.&lt;/li&gt;        &lt;li&gt;&#x27;payments&#x27; &#x3D; The payments that are associated with the order.&lt;/li&gt;        &lt;li&gt;&#x27;documents&#x27; &#x3D; The documents that are associated with the order.&lt;/li&gt;        &lt;li&gt;&#x27;contactSender&#x27; &#x3D; The associated contact for the contact-sender relation.&lt;/li&gt;        &lt;li&gt;&#x27;contactReceiver&#x27; &#x3D; The associated contact for the contact-receiver relation.&lt;/li&gt;        &lt;li&gt;&#x27;warehouseSender&#x27; &#x3D; The associated warehouse for the warehouse-sender relation.&lt;/li&gt;        &lt;li&gt;&#x27;warehouseReceiver&#x27; &#x3D; The associated warehouse for the warehouse-receiver relation.&lt;/li&gt;        &lt;li&gt;&#x27;orderItems.variation&#x27; &#x3D; The variation that is associated with the order item.&lt;/li&gt;        &lt;li&gt;&#x27;orderItems.giftCardCodes&#x27; &#x3D; The gift card codes that are associated with the order item.&lt;/li&gt;        &lt;li&gt;&#x27;orderItems.transactions&#x27; &#x3D; The transactions that are associated with the order item.&lt;/li&gt;        &lt;li&gt;&#x27;orderItems.serialNumbers&#x27; &#x3D; The serial numbers that are associated with the order item.&lt;/li&gt;        &lt;li&gt;&#x27;orderItems.variationBarcodes&#x27; &#x3D; The barcodes that are associated with variation of the order item.&lt;/li&gt;        &lt;li&gt;&#x27;orderItems.comments&#x27; &#x3D; The comments that are associated with the order item.&lt;/li&gt;        &lt;li&gt;&lt;b&gt;deprecated&lt;/b&gt; &#x27;orderItems.warehouseLocations&#x27; &#x3D; The warehouse locations that are associated with the order item.&lt;/li&gt;      &lt;/ul&gt;      Example: &lt;code&gt;?with[]&#x3D;addresses&amp;with[]&#x3D;orderItems.variation&lt;/code&gt; (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdGetAsyncWithHttpInfo($order_id, $with = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder';
        $request = $this->restOrdersOrderIdGetRequest($order_id, $with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdGet'
     *
     * @param int $order_id The ID of the order. (required)
     * @param int $with Load additional relations for an order. Currently possible are:      * &lt;ul&gt;        &lt;li&gt;&#x27;addresses&#x27; &#x3D; The address objects that are associated with the order.&lt;/li&gt;        &lt;li&gt;&#x27;relations&#x27; &#x3D; The order relation reference instances that are associated with the order. These instances contain information such as the the reference type, the ID of the reference and the relation itself.&lt;/li&gt;        &lt;li&gt;&#x27;comments&#x27; &#x3D; The order comments.&lt;/li&gt;        &lt;li&gt;&#x27;location&#x27; &#x3D; The accounting location of the order.&lt;/li&gt;        &lt;li&gt;&#x27;payments&#x27; &#x3D; The payments that are associated with the order.&lt;/li&gt;        &lt;li&gt;&#x27;documents&#x27; &#x3D; The documents that are associated with the order.&lt;/li&gt;        &lt;li&gt;&#x27;contactSender&#x27; &#x3D; The associated contact for the contact-sender relation.&lt;/li&gt;        &lt;li&gt;&#x27;contactReceiver&#x27; &#x3D; The associated contact for the contact-receiver relation.&lt;/li&gt;        &lt;li&gt;&#x27;warehouseSender&#x27; &#x3D; The associated warehouse for the warehouse-sender relation.&lt;/li&gt;        &lt;li&gt;&#x27;warehouseReceiver&#x27; &#x3D; The associated warehouse for the warehouse-receiver relation.&lt;/li&gt;        &lt;li&gt;&#x27;orderItems.variation&#x27; &#x3D; The variation that is associated with the order item.&lt;/li&gt;        &lt;li&gt;&#x27;orderItems.giftCardCodes&#x27; &#x3D; The gift card codes that are associated with the order item.&lt;/li&gt;        &lt;li&gt;&#x27;orderItems.transactions&#x27; &#x3D; The transactions that are associated with the order item.&lt;/li&gt;        &lt;li&gt;&#x27;orderItems.serialNumbers&#x27; &#x3D; The serial numbers that are associated with the order item.&lt;/li&gt;        &lt;li&gt;&#x27;orderItems.variationBarcodes&#x27; &#x3D; The barcodes that are associated with variation of the order item.&lt;/li&gt;        &lt;li&gt;&#x27;orderItems.comments&#x27; &#x3D; The comments that are associated with the order item.&lt;/li&gt;        &lt;li&gt;&lt;b&gt;deprecated&lt;/b&gt; &#x27;orderItems.warehouseLocations&#x27; &#x3D; The warehouse locations that are associated with the order item.&lt;/li&gt;      &lt;/ul&gt;      Example: &lt;code&gt;?with[]&#x3D;addresses&amp;with[]&#x3D;orderItems.variation&lt;/code&gt; (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdGetRequest($order_id, $with = null)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdGet'
            );
        }

        $resourcePath = '/rest/orders/{orderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($with !== null) {
            $queryParams['with'] = ObjectSerializer::toQueryValue($with);
        }

        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdItemsGet
     *
     * Search order items
     *
     * @param int $order_id order_id (required)
     * @param int $page The page to get. The default page that will be returned is page 1. (optional)
     * @param int $items_per_page The number of order items to be displayed per page. The default number of order items per page is 50. The maximum number is 250. (optional)
     * @param int $with Load additional relations for an order item. Currently possible are:     &lt;ul&gt;     &lt;li&gt;&#x27;variation&#x27; &#x3D; The variation that is associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;giftCardCodes&#x27; &#x3D; The gift card codes that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;transactions&#x27; &#x3D; The transactions that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;serialNumbers&#x27; &#x3D; The serial numbers that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;variationBarcodes&#x27; &#x3D; The barcodes that are associated with variation of the order item.&lt;/li&gt;     &lt;/ul&gt; (optional)
     *
     * @return object
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdItemsGet($order_id, $page = null, $items_per_page = null, $with = null)
    {
        list($response) = $this->restOrdersOrderIdItemsGetWithHttpInfo($order_id, $page, $items_per_page, $with);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdItemsGetWithHttpInfo
     *
     * Search order items
     *
     * @param int $order_id (required)
     * @param int $page The page to get. The default page that will be returned is page 1. (optional)
     * @param int $items_per_page The number of order items to be displayed per page. The default number of order items per page is 50. The maximum number is 250. (optional)
     * @param int $with Load additional relations for an order item. Currently possible are:     &lt;ul&gt;     &lt;li&gt;&#x27;variation&#x27; &#x3D; The variation that is associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;giftCardCodes&#x27; &#x3D; The gift card codes that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;transactions&#x27; &#x3D; The transactions that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;serialNumbers&#x27; &#x3D; The serial numbers that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;variationBarcodes&#x27; &#x3D; The barcodes that are associated with variation of the order item.&lt;/li&gt;     &lt;/ul&gt; (optional)
     *
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdItemsGetWithHttpInfo($order_id, $page = null, $items_per_page = null, $with = null)
    {
        $returnType = 'object';
        $request = $this->restOrdersOrderIdItemsGetRequest($order_id, $page, $items_per_page, $with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdItemsGetAsync
     *
     * Search order items
     *
     * @param int $order_id (required)
     * @param int $page The page to get. The default page that will be returned is page 1. (optional)
     * @param int $items_per_page The number of order items to be displayed per page. The default number of order items per page is 50. The maximum number is 250. (optional)
     * @param int $with Load additional relations for an order item. Currently possible are:     &lt;ul&gt;     &lt;li&gt;&#x27;variation&#x27; &#x3D; The variation that is associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;giftCardCodes&#x27; &#x3D; The gift card codes that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;transactions&#x27; &#x3D; The transactions that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;serialNumbers&#x27; &#x3D; The serial numbers that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;variationBarcodes&#x27; &#x3D; The barcodes that are associated with variation of the order item.&lt;/li&gt;     &lt;/ul&gt; (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdItemsGetAsync($order_id, $page = null, $items_per_page = null, $with = null)
    {
        return $this->restOrdersOrderIdItemsGetAsyncWithHttpInfo($order_id, $page, $items_per_page, $with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdItemsGetAsyncWithHttpInfo
     *
     * Search order items
     *
     * @param int $order_id (required)
     * @param int $page The page to get. The default page that will be returned is page 1. (optional)
     * @param int $items_per_page The number of order items to be displayed per page. The default number of order items per page is 50. The maximum number is 250. (optional)
     * @param int $with Load additional relations for an order item. Currently possible are:     &lt;ul&gt;     &lt;li&gt;&#x27;variation&#x27; &#x3D; The variation that is associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;giftCardCodes&#x27; &#x3D; The gift card codes that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;transactions&#x27; &#x3D; The transactions that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;serialNumbers&#x27; &#x3D; The serial numbers that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;variationBarcodes&#x27; &#x3D; The barcodes that are associated with variation of the order item.&lt;/li&gt;     &lt;/ul&gt; (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdItemsGetAsyncWithHttpInfo($order_id, $page = null, $items_per_page = null, $with = null)
    {
        $returnType = 'object';
        $request = $this->restOrdersOrderIdItemsGetRequest($order_id, $page, $items_per_page, $with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdItemsGet'
     *
     * @param int $order_id (required)
     * @param int $page The page to get. The default page that will be returned is page 1. (optional)
     * @param int $items_per_page The number of order items to be displayed per page. The default number of order items per page is 50. The maximum number is 250. (optional)
     * @param int $with Load additional relations for an order item. Currently possible are:     &lt;ul&gt;     &lt;li&gt;&#x27;variation&#x27; &#x3D; The variation that is associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;giftCardCodes&#x27; &#x3D; The gift card codes that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;transactions&#x27; &#x3D; The transactions that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;serialNumbers&#x27; &#x3D; The serial numbers that are associated with the order item.&lt;/li&gt;     &lt;li&gt;&#x27;variationBarcodes&#x27; &#x3D; The barcodes that are associated with variation of the order item.&lt;/li&gt;     &lt;/ul&gt; (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdItemsGetRequest($order_id, $page = null, $items_per_page = null, $with = null)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdItemsGet'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($items_per_page !== null) {
            $queryParams['itemsPerPage'] = ObjectSerializer::toQueryValue($items_per_page);
        }
        // query params
        if ($with !== null) {
            $queryParams['with'] = ObjectSerializer::toQueryValue($with);
        }

        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdItemsOrderItemIdDelete
     *
     * Delete an order item
     *
     * @param int $order_id The ID of the order that the item belongs to. (required)
     * @param int $order_item_id The ID of the order item to be deleted. (required)
     *
     * @return void
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdItemsOrderItemIdDelete($order_id, $order_item_id)
    {
        $this->restOrdersOrderIdItemsOrderItemIdDeleteWithHttpInfo($order_id, $order_item_id);
    }

    /**
     * Operation restOrdersOrderIdItemsOrderItemIdDeleteWithHttpInfo
     *
     * Delete an order item
     *
     * @param int $order_id The ID of the order that the item belongs to. (required)
     * @param int $order_item_id The ID of the order item to be deleted. (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdItemsOrderItemIdDeleteWithHttpInfo($order_id, $order_item_id)
    {
        $returnType = '';
        $request = $this->restOrdersOrderIdItemsOrderItemIdDeleteRequest($order_id, $order_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdItemsOrderItemIdDeleteAsync
     *
     * Delete an order item
     *
     * @param int $order_id The ID of the order that the item belongs to. (required)
     * @param int $order_item_id The ID of the order item to be deleted. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdItemsOrderItemIdDeleteAsync($order_id, $order_item_id)
    {
        return $this->restOrdersOrderIdItemsOrderItemIdDeleteAsyncWithHttpInfo($order_id, $order_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdItemsOrderItemIdDeleteAsyncWithHttpInfo
     *
     * Delete an order item
     *
     * @param int $order_id The ID of the order that the item belongs to. (required)
     * @param int $order_item_id The ID of the order item to be deleted. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdItemsOrderItemIdDeleteAsyncWithHttpInfo($order_id, $order_item_id)
    {
        $returnType = '';
        $request = $this->restOrdersOrderIdItemsOrderItemIdDeleteRequest($order_id, $order_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdItemsOrderItemIdDelete'
     *
     * @param int $order_id The ID of the order that the item belongs to. (required)
     * @param int $order_item_id The ID of the order item to be deleted. (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdItemsOrderItemIdDeleteRequest($order_id, $order_item_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdItemsOrderItemIdDelete'
            );
        }
        // verify the required parameter 'order_item_id' is set
        if ($order_item_id === null || (is_array($order_item_id) && count($order_item_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_item_id when calling restOrdersOrderIdItemsOrderItemIdDelete'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/items/{orderItemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($order_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderItemId' . '}',
                ObjectSerializer::toPathValue($order_item_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdItemsOrderItemIdSerialNumbersGet
     *
     * List serial numbers of an order item
     *
     * @param int $order_id The ID of the order (required)
     * @param int $order_item_id The ID of the order item (required)
     *
     * @return PlentyModulesOrderSerialNumberModelsOrderSerialNumber[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdItemsOrderItemIdSerialNumbersGet($order_id, $order_item_id)
    {
        list($response) = $this->restOrdersOrderIdItemsOrderItemIdSerialNumbersGetWithHttpInfo($order_id, $order_item_id);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdItemsOrderItemIdSerialNumbersGetWithHttpInfo
     *
     * List serial numbers of an order item
     *
     * @param int $order_id The ID of the order (required)
     * @param int $order_item_id The ID of the order item (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderSerialNumberModelsOrderSerialNumber[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdItemsOrderItemIdSerialNumbersGetWithHttpInfo($order_id, $order_item_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderSerialNumberModelsOrderSerialNumber[]';
        $request = $this->restOrdersOrderIdItemsOrderItemIdSerialNumbersGetRequest($order_id, $order_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderSerialNumberModelsOrderSerialNumber[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdItemsOrderItemIdSerialNumbersGetAsync
     *
     * List serial numbers of an order item
     *
     * @param int $order_id The ID of the order (required)
     * @param int $order_item_id The ID of the order item (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdItemsOrderItemIdSerialNumbersGetAsync($order_id, $order_item_id)
    {
        return $this->restOrdersOrderIdItemsOrderItemIdSerialNumbersGetAsyncWithHttpInfo($order_id, $order_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdItemsOrderItemIdSerialNumbersGetAsyncWithHttpInfo
     *
     * List serial numbers of an order item
     *
     * @param int $order_id The ID of the order (required)
     * @param int $order_item_id The ID of the order item (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdItemsOrderItemIdSerialNumbersGetAsyncWithHttpInfo($order_id, $order_item_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderSerialNumberModelsOrderSerialNumber[]';
        $request = $this->restOrdersOrderIdItemsOrderItemIdSerialNumbersGetRequest($order_id, $order_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdItemsOrderItemIdSerialNumbersGet'
     *
     * @param int $order_id The ID of the order (required)
     * @param int $order_item_id The ID of the order item (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdItemsOrderItemIdSerialNumbersGetRequest($order_id, $order_item_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdItemsOrderItemIdSerialNumbersGet'
            );
        }
        // verify the required parameter 'order_item_id' is set
        if ($order_item_id === null || (is_array($order_item_id) && count($order_item_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_item_id when calling restOrdersOrderIdItemsOrderItemIdSerialNumbersGet'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/items/{orderItemId}/serialNumbers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($order_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderItemId' . '}',
                ObjectSerializer::toPathValue($order_item_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdItemsSerialNumbersGet
     *
     * List serial numbers of an order
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return PlentyModulesOrderSerialNumberModelsOrderSerialNumber[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdItemsSerialNumbersGet($order_id)
    {
        list($response) = $this->restOrdersOrderIdItemsSerialNumbersGetWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdItemsSerialNumbersGetWithHttpInfo
     *
     * List serial numbers of an order
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderSerialNumberModelsOrderSerialNumber[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdItemsSerialNumbersGetWithHttpInfo($order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderSerialNumberModelsOrderSerialNumber[]';
        $request = $this->restOrdersOrderIdItemsSerialNumbersGetRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderSerialNumberModelsOrderSerialNumber[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdItemsSerialNumbersGetAsync
     *
     * List serial numbers of an order
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdItemsSerialNumbersGetAsync($order_id)
    {
        return $this->restOrdersOrderIdItemsSerialNumbersGetAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdItemsSerialNumbersGetAsyncWithHttpInfo
     *
     * List serial numbers of an order
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdItemsSerialNumbersGetAsyncWithHttpInfo($order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderSerialNumberModelsOrderSerialNumber[]';
        $request = $this->restOrdersOrderIdItemsSerialNumbersGetRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdItemsSerialNumbersGet'
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdItemsSerialNumbersGetRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdItemsSerialNumbersGet'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/items/serialNumbers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdOutgoingStocksDelete
     *
     * Revert outgoing stock
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return void
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdOutgoingStocksDelete($order_id)
    {
        $this->restOrdersOrderIdOutgoingStocksDeleteWithHttpInfo($order_id);
    }

    /**
     * Operation restOrdersOrderIdOutgoingStocksDeleteWithHttpInfo
     *
     * Revert outgoing stock
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdOutgoingStocksDeleteWithHttpInfo($order_id)
    {
        $returnType = '';
        $request = $this->restOrdersOrderIdOutgoingStocksDeleteRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdOutgoingStocksDeleteAsync
     *
     * Revert outgoing stock
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdOutgoingStocksDeleteAsync($order_id)
    {
        return $this->restOrdersOrderIdOutgoingStocksDeleteAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdOutgoingStocksDeleteAsyncWithHttpInfo
     *
     * Revert outgoing stock
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdOutgoingStocksDeleteAsyncWithHttpInfo($order_id)
    {
        $returnType = '';
        $request = $this->restOrdersOrderIdOutgoingStocksDeleteRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdOutgoingStocksDelete'
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdOutgoingStocksDeleteRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdOutgoingStocksDelete'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/outgoing_stocks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdOutgoingStocksPost
     *
     * Book out order items
     *
     * @param int $order_id The ID of the order (required)
     * @param string $date The date that is saved as booking date for the outgoing stock. (optional)
     *
     * @return void
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdOutgoingStocksPost($order_id, $date = null)
    {
        $this->restOrdersOrderIdOutgoingStocksPostWithHttpInfo($order_id, $date);
    }

    /**
     * Operation restOrdersOrderIdOutgoingStocksPostWithHttpInfo
     *
     * Book out order items
     *
     * @param int $order_id The ID of the order (required)
     * @param string $date The date that is saved as booking date for the outgoing stock. (optional)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdOutgoingStocksPostWithHttpInfo($order_id, $date = null)
    {
        $returnType = '';
        $request = $this->restOrdersOrderIdOutgoingStocksPostRequest($order_id, $date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdOutgoingStocksPostAsync
     *
     * Book out order items
     *
     * @param int $order_id The ID of the order (required)
     * @param string $date The date that is saved as booking date for the outgoing stock. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdOutgoingStocksPostAsync($order_id, $date = null)
    {
        return $this->restOrdersOrderIdOutgoingStocksPostAsyncWithHttpInfo($order_id, $date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdOutgoingStocksPostAsyncWithHttpInfo
     *
     * Book out order items
     *
     * @param int $order_id The ID of the order (required)
     * @param string $date The date that is saved as booking date for the outgoing stock. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdOutgoingStocksPostAsyncWithHttpInfo($order_id, $date = null)
    {
        $returnType = '';
        $request = $this->restOrdersOrderIdOutgoingStocksPostRequest($order_id, $date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdOutgoingStocksPost'
     *
     * @param int $order_id The ID of the order (required)
     * @param string $date The date that is saved as booking date for the outgoing stock. (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdOutgoingStocksPostRequest($order_id, $date = null)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdOutgoingStocksPost'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/outgoing_stocks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($date !== null) {
            $queryParams['date'] = ObjectSerializer::toQueryValue($date);
        }

        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdPackagenumbersGet
     *
     * List package numbers of an order
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return string[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdPackagenumbersGet($order_id)
    {
        list($response) = $this->restOrdersOrderIdPackagenumbersGetWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdPackagenumbersGetWithHttpInfo
     *
     * List package numbers of an order
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdPackagenumbersGetWithHttpInfo($order_id)
    {
        $returnType = 'string[]';
        $request = $this->restOrdersOrderIdPackagenumbersGetRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdPackagenumbersGetAsync
     *
     * List package numbers of an order
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdPackagenumbersGetAsync($order_id)
    {
        return $this->restOrdersOrderIdPackagenumbersGetAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdPackagenumbersGetAsyncWithHttpInfo
     *
     * List package numbers of an order
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdPackagenumbersGetAsyncWithHttpInfo($order_id)
    {
        $returnType = 'string[]';
        $request = $this->restOrdersOrderIdPackagenumbersGetRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdPackagenumbersGet'
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdPackagenumbersGetRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdPackagenumbersGet'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/packagenumbers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdPropertiesPost
     *
     * Create a property for an order
     *
     * @param int $order_id order_id (required)
     * @param object $body body (optional)
     *
     * @return PlentyModulesOrderPropertyModelsOrderProperty
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdPropertiesPost($order_id, $body = null)
    {
        list($response) = $this->restOrdersOrderIdPropertiesPostWithHttpInfo($order_id, $body);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdPropertiesPostWithHttpInfo
     *
     * Create a property for an order
     *
     * @param int $order_id (required)
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderProperty, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdPropertiesPostWithHttpInfo($order_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderProperty';
        $request = $this->restOrdersOrderIdPropertiesPostRequest($order_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderProperty',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdPropertiesPostAsync
     *
     * Create a property for an order
     *
     * @param int $order_id (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdPropertiesPostAsync($order_id, $body = null)
    {
        return $this->restOrdersOrderIdPropertiesPostAsyncWithHttpInfo($order_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdPropertiesPostAsyncWithHttpInfo
     *
     * Create a property for an order
     *
     * @param int $order_id (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdPropertiesPostAsyncWithHttpInfo($order_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderProperty';
        $request = $this->restOrdersOrderIdPropertiesPostRequest($order_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdPropertiesPost'
     *
     * @param int $order_id (required)
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdPropertiesPostRequest($order_id, $body = null)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdPropertiesPost'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/properties';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdPropertiesTypeIdDelete
     *
     * Delete a property of an order by order ID and type ID
     *
     * @param int $order_id order_id (required)
     * @param int $type_id type_id (required)
     * @param object $body body (optional)
     *
     * @return PlentyRepositoriesModelsDeleteResponse
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdPropertiesTypeIdDelete($order_id, $type_id, $body = null)
    {
        list($response) = $this->restOrdersOrderIdPropertiesTypeIdDeleteWithHttpInfo($order_id, $type_id, $body);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdPropertiesTypeIdDeleteWithHttpInfo
     *
     * Delete a property of an order by order ID and type ID
     *
     * @param int $order_id (required)
     * @param int $type_id (required)
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyRepositoriesModelsDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdPropertiesTypeIdDeleteWithHttpInfo($order_id, $type_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyRepositoriesModelsDeleteResponse';
        $request = $this->restOrdersOrderIdPropertiesTypeIdDeleteRequest($order_id, $type_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyRepositoriesModelsDeleteResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdPropertiesTypeIdDeleteAsync
     *
     * Delete a property of an order by order ID and type ID
     *
     * @param int $order_id (required)
     * @param int $type_id (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdPropertiesTypeIdDeleteAsync($order_id, $type_id, $body = null)
    {
        return $this->restOrdersOrderIdPropertiesTypeIdDeleteAsyncWithHttpInfo($order_id, $type_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdPropertiesTypeIdDeleteAsyncWithHttpInfo
     *
     * Delete a property of an order by order ID and type ID
     *
     * @param int $order_id (required)
     * @param int $type_id (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdPropertiesTypeIdDeleteAsyncWithHttpInfo($order_id, $type_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyRepositoriesModelsDeleteResponse';
        $request = $this->restOrdersOrderIdPropertiesTypeIdDeleteRequest($order_id, $type_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdPropertiesTypeIdDelete'
     *
     * @param int $order_id (required)
     * @param int $type_id (required)
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdPropertiesTypeIdDeleteRequest($order_id, $type_id, $body = null)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdPropertiesTypeIdDelete'
            );
        }
        // verify the required parameter 'type_id' is set
        if ($type_id === null || (is_array($type_id) && count($type_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $type_id when calling restOrdersOrderIdPropertiesTypeIdDelete'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/properties/{typeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'typeId' . '}',
                ObjectSerializer::toPathValue($type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdPropertiesTypeIdGet
     *
     * List properties of an order
     *
     * @param int $order_id The ID of the order (required)
     * @param int $type_id The property type ID (required)
     *
     * @return PlentyModulesOrderPropertyModelsOrderProperty[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdPropertiesTypeIdGet($order_id, $type_id)
    {
        list($response) = $this->restOrdersOrderIdPropertiesTypeIdGetWithHttpInfo($order_id, $type_id);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdPropertiesTypeIdGetWithHttpInfo
     *
     * List properties of an order
     *
     * @param int $order_id The ID of the order (required)
     * @param int $type_id The property type ID (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderProperty[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdPropertiesTypeIdGetWithHttpInfo($order_id, $type_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderProperty[]';
        $request = $this->restOrdersOrderIdPropertiesTypeIdGetRequest($order_id, $type_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderProperty[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdPropertiesTypeIdGetAsync
     *
     * List properties of an order
     *
     * @param int $order_id The ID of the order (required)
     * @param int $type_id The property type ID (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdPropertiesTypeIdGetAsync($order_id, $type_id)
    {
        return $this->restOrdersOrderIdPropertiesTypeIdGetAsyncWithHttpInfo($order_id, $type_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdPropertiesTypeIdGetAsyncWithHttpInfo
     *
     * List properties of an order
     *
     * @param int $order_id The ID of the order (required)
     * @param int $type_id The property type ID (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdPropertiesTypeIdGetAsyncWithHttpInfo($order_id, $type_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderProperty[]';
        $request = $this->restOrdersOrderIdPropertiesTypeIdGetRequest($order_id, $type_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdPropertiesTypeIdGet'
     *
     * @param int $order_id The ID of the order (required)
     * @param int $type_id The property type ID (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdPropertiesTypeIdGetRequest($order_id, $type_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdPropertiesTypeIdGet'
            );
        }
        // verify the required parameter 'type_id' is set
        if ($type_id === null || (is_array($type_id) && count($type_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $type_id when calling restOrdersOrderIdPropertiesTypeIdGet'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/properties/{typeId?}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'typeId' . '}',
                ObjectSerializer::toPathValue($type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdPropertiesTypeIdPut
     *
     * Update a property of an order by order ID and property ID
     *
     * @param int $order_id order_id (required)
     * @param int $type_id type_id (required)
     * @param object $body body (optional)
     *
     * @return PlentyModulesOrderPropertyModelsOrderProperty
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdPropertiesTypeIdPut($order_id, $type_id, $body = null)
    {
        list($response) = $this->restOrdersOrderIdPropertiesTypeIdPutWithHttpInfo($order_id, $type_id, $body);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdPropertiesTypeIdPutWithHttpInfo
     *
     * Update a property of an order by order ID and property ID
     *
     * @param int $order_id (required)
     * @param int $type_id (required)
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderProperty, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdPropertiesTypeIdPutWithHttpInfo($order_id, $type_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderProperty';
        $request = $this->restOrdersOrderIdPropertiesTypeIdPutRequest($order_id, $type_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderProperty',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdPropertiesTypeIdPutAsync
     *
     * Update a property of an order by order ID and property ID
     *
     * @param int $order_id (required)
     * @param int $type_id (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdPropertiesTypeIdPutAsync($order_id, $type_id, $body = null)
    {
        return $this->restOrdersOrderIdPropertiesTypeIdPutAsyncWithHttpInfo($order_id, $type_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdPropertiesTypeIdPutAsyncWithHttpInfo
     *
     * Update a property of an order by order ID and property ID
     *
     * @param int $order_id (required)
     * @param int $type_id (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdPropertiesTypeIdPutAsyncWithHttpInfo($order_id, $type_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderProperty';
        $request = $this->restOrdersOrderIdPropertiesTypeIdPutRequest($order_id, $type_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdPropertiesTypeIdPut'
     *
     * @param int $order_id (required)
     * @param int $type_id (required)
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdPropertiesTypeIdPutRequest($order_id, $type_id, $body = null)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdPropertiesTypeIdPut'
            );
        }
        // verify the required parameter 'type_id' is set
        if ($type_id === null || (is_array($type_id) && count($type_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $type_id when calling restOrdersOrderIdPropertiesTypeIdPut'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/properties/{typeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'typeId' . '}',
                ObjectSerializer::toPathValue($type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdPut
     *
     * Update an order
     *
     * @param int $order_id The ID of the order (required)
     * @param object $body body (optional)
     *
     * @return PlentyModulesOrderModelsOrder
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdPut($order_id, $body = null)
    {
        list($response) = $this->restOrdersOrderIdPutWithHttpInfo($order_id, $body);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdPutWithHttpInfo
     *
     * Update an order
     *
     * @param int $order_id The ID of the order (required)
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdPutWithHttpInfo($order_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder';
        $request = $this->restOrdersOrderIdPutRequest($order_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdPutAsync
     *
     * Update an order
     *
     * @param int $order_id The ID of the order (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdPutAsync($order_id, $body = null)
    {
        return $this->restOrdersOrderIdPutAsyncWithHttpInfo($order_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdPutAsyncWithHttpInfo
     *
     * Update an order
     *
     * @param int $order_id The ID of the order (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdPutAsyncWithHttpInfo($order_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder';
        $request = $this->restOrdersOrderIdPutRequest($order_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdPut'
     *
     * @param int $order_id The ID of the order (required)
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdPutRequest($order_id, $body = null)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdPut'
            );
        }

        $resourcePath = '/rest/orders/{orderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesDelete
     *
     * Delete all order shipping packages for an order
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return void
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingPackagesDelete($order_id)
    {
        $this->restOrdersOrderIdShippingPackagesDeleteWithHttpInfo($order_id);
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesDeleteWithHttpInfo
     *
     * Delete all order shipping packages for an order
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingPackagesDeleteWithHttpInfo($order_id)
    {
        $returnType = '';
        $request = $this->restOrdersOrderIdShippingPackagesDeleteRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesDeleteAsync
     *
     * Delete all order shipping packages for an order
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingPackagesDeleteAsync($order_id)
    {
        return $this->restOrdersOrderIdShippingPackagesDeleteAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesDeleteAsyncWithHttpInfo
     *
     * Delete all order shipping packages for an order
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingPackagesDeleteAsyncWithHttpInfo($order_id)
    {
        $returnType = '';
        $request = $this->restOrdersOrderIdShippingPackagesDeleteRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdShippingPackagesDelete'
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdShippingPackagesDeleteRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdShippingPackagesDelete'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/shipping/packages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesGet
     *
     * List order shipping packages
     *
     * @param int $order_id The ID of the order (required)
     * @param int $columns The properties to be loaded (optional)
     * @param string $with Possible value is &#x27;labelBase64&#x27; (optional)
     *
     * @return PlentyModulesOrderShippingPackageModelsOrderShippingPackage[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingPackagesGet($order_id, $columns = null, $with = null)
    {
        list($response) = $this->restOrdersOrderIdShippingPackagesGetWithHttpInfo($order_id, $columns, $with);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesGetWithHttpInfo
     *
     * List order shipping packages
     *
     * @param int $order_id The ID of the order (required)
     * @param int $columns The properties to be loaded (optional)
     * @param string $with Possible value is &#x27;labelBase64&#x27; (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackage[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingPackagesGetWithHttpInfo($order_id, $columns = null, $with = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackage[]';
        $request = $this->restOrdersOrderIdShippingPackagesGetRequest($order_id, $columns, $with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackage[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesGetAsync
     *
     * List order shipping packages
     *
     * @param int $order_id The ID of the order (required)
     * @param int $columns The properties to be loaded (optional)
     * @param string $with Possible value is &#x27;labelBase64&#x27; (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingPackagesGetAsync($order_id, $columns = null, $with = null)
    {
        return $this->restOrdersOrderIdShippingPackagesGetAsyncWithHttpInfo($order_id, $columns, $with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesGetAsyncWithHttpInfo
     *
     * List order shipping packages
     *
     * @param int $order_id The ID of the order (required)
     * @param int $columns The properties to be loaded (optional)
     * @param string $with Possible value is &#x27;labelBase64&#x27; (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingPackagesGetAsyncWithHttpInfo($order_id, $columns = null, $with = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackage[]';
        $request = $this->restOrdersOrderIdShippingPackagesGetRequest($order_id, $columns, $with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdShippingPackagesGet'
     *
     * @param int $order_id The ID of the order (required)
     * @param int $columns The properties to be loaded (optional)
     * @param string $with Possible value is &#x27;labelBase64&#x27; (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdShippingPackagesGetRequest($order_id, $columns = null, $with = null)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdShippingPackagesGet'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/shipping/packages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($columns !== null) {
            $queryParams['columns'] = ObjectSerializer::toQueryValue($columns);
        }
        // query params
        if ($with !== null) {
            $queryParams['with'] = ObjectSerializer::toQueryValue($with);
        }

        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesItemsGet
     *
     * @param int $order_id order_id (required)
     *
     * @return PlentyModulesOrderShippingPackageModelsOrderShippingPackageItems
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingPackagesItemsGet($order_id)
    {
        list($response) = $this->restOrdersOrderIdShippingPackagesItemsGetWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesItemsGetWithHttpInfo
     *
     * @param int $order_id (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackageItems, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingPackagesItemsGetWithHttpInfo($order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackageItems';
        $request = $this->restOrdersOrderIdShippingPackagesItemsGetRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackageItems',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesItemsGetAsync
     *
     *
     *
     * @param int $order_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingPackagesItemsGetAsync($order_id)
    {
        return $this->restOrdersOrderIdShippingPackagesItemsGetAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesItemsGetAsyncWithHttpInfo
     *
     *
     *
     * @param int $order_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingPackagesItemsGetAsyncWithHttpInfo($order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackageItems';
        $request = $this->restOrdersOrderIdShippingPackagesItemsGetRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdShippingPackagesItemsGet'
     *
     * @param int $order_id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdShippingPackagesItemsGetRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdShippingPackagesItemsGet'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/shipping/packages/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesOrderShippingPackageIdDelete
     *
     * Delete an order shipping package
     *
     * @param int $order_id The ID of the order (required)
     * @param int $order_shipping_package_id The ID of the order shipping package (required)
     *
     * @return void
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingPackagesOrderShippingPackageIdDelete($order_id, $order_shipping_package_id)
    {
        $this->restOrdersOrderIdShippingPackagesOrderShippingPackageIdDeleteWithHttpInfo($order_id, $order_shipping_package_id);
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesOrderShippingPackageIdDeleteWithHttpInfo
     *
     * Delete an order shipping package
     *
     * @param int $order_id The ID of the order (required)
     * @param int $order_shipping_package_id The ID of the order shipping package (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingPackagesOrderShippingPackageIdDeleteWithHttpInfo($order_id, $order_shipping_package_id)
    {
        $returnType = '';
        $request = $this->restOrdersOrderIdShippingPackagesOrderShippingPackageIdDeleteRequest($order_id, $order_shipping_package_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesOrderShippingPackageIdDeleteAsync
     *
     * Delete an order shipping package
     *
     * @param int $order_id The ID of the order (required)
     * @param int $order_shipping_package_id The ID of the order shipping package (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingPackagesOrderShippingPackageIdDeleteAsync($order_id, $order_shipping_package_id)
    {
        return $this->restOrdersOrderIdShippingPackagesOrderShippingPackageIdDeleteAsyncWithHttpInfo($order_id, $order_shipping_package_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesOrderShippingPackageIdDeleteAsyncWithHttpInfo
     *
     * Delete an order shipping package
     *
     * @param int $order_id The ID of the order (required)
     * @param int $order_shipping_package_id The ID of the order shipping package (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingPackagesOrderShippingPackageIdDeleteAsyncWithHttpInfo($order_id, $order_shipping_package_id)
    {
        $returnType = '';
        $request = $this->restOrdersOrderIdShippingPackagesOrderShippingPackageIdDeleteRequest($order_id, $order_shipping_package_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdShippingPackagesOrderShippingPackageIdDelete'
     *
     * @param int $order_id The ID of the order (required)
     * @param int $order_shipping_package_id The ID of the order shipping package (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdShippingPackagesOrderShippingPackageIdDeleteRequest($order_id, $order_shipping_package_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdShippingPackagesOrderShippingPackageIdDelete'
            );
        }
        // verify the required parameter 'order_shipping_package_id' is set
        if ($order_shipping_package_id === null || (is_array($order_shipping_package_id) && count($order_shipping_package_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_shipping_package_id when calling restOrdersOrderIdShippingPackagesOrderShippingPackageIdDelete'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/shipping/packages/{orderShippingPackageId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($order_shipping_package_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderShippingPackageId' . '}',
                ObjectSerializer::toPathValue($order_shipping_package_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesOrderShippingPackageIdGet
     *
     * Get an order shipping package
     *
     * @param int $order_id The ID of the order (required)
     * @param int $order_shipping_package_id The ID of the order shipping package (required)
     * @param int $columns The properties to be loaded (optional)
     *
     * @return PlentyModulesOrderShippingPackageModelsOrderShippingPackage
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingPackagesOrderShippingPackageIdGet($order_id, $order_shipping_package_id, $columns = null)
    {
        list($response) = $this->restOrdersOrderIdShippingPackagesOrderShippingPackageIdGetWithHttpInfo($order_id, $order_shipping_package_id, $columns);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesOrderShippingPackageIdGetWithHttpInfo
     *
     * Get an order shipping package
     *
     * @param int $order_id The ID of the order (required)
     * @param int $order_shipping_package_id The ID of the order shipping package (required)
     * @param int $columns The properties to be loaded (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackage, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingPackagesOrderShippingPackageIdGetWithHttpInfo($order_id, $order_shipping_package_id, $columns = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackage';
        $request = $this->restOrdersOrderIdShippingPackagesOrderShippingPackageIdGetRequest($order_id, $order_shipping_package_id, $columns);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesOrderShippingPackageIdGetAsync
     *
     * Get an order shipping package
     *
     * @param int $order_id The ID of the order (required)
     * @param int $order_shipping_package_id The ID of the order shipping package (required)
     * @param int $columns The properties to be loaded (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingPackagesOrderShippingPackageIdGetAsync($order_id, $order_shipping_package_id, $columns = null)
    {
        return $this->restOrdersOrderIdShippingPackagesOrderShippingPackageIdGetAsyncWithHttpInfo($order_id, $order_shipping_package_id, $columns)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesOrderShippingPackageIdGetAsyncWithHttpInfo
     *
     * Get an order shipping package
     *
     * @param int $order_id The ID of the order (required)
     * @param int $order_shipping_package_id The ID of the order shipping package (required)
     * @param int $columns The properties to be loaded (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingPackagesOrderShippingPackageIdGetAsyncWithHttpInfo($order_id, $order_shipping_package_id, $columns = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackage';
        $request = $this->restOrdersOrderIdShippingPackagesOrderShippingPackageIdGetRequest($order_id, $order_shipping_package_id, $columns);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdShippingPackagesOrderShippingPackageIdGet'
     *
     * @param int $order_id The ID of the order (required)
     * @param int $order_shipping_package_id The ID of the order shipping package (required)
     * @param int $columns The properties to be loaded (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdShippingPackagesOrderShippingPackageIdGetRequest($order_id, $order_shipping_package_id, $columns = null)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdShippingPackagesOrderShippingPackageIdGet'
            );
        }
        // verify the required parameter 'order_shipping_package_id' is set
        if ($order_shipping_package_id === null || (is_array($order_shipping_package_id) && count($order_shipping_package_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_shipping_package_id when calling restOrdersOrderIdShippingPackagesOrderShippingPackageIdGet'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/shipping/packages/{orderShippingPackageId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($columns !== null) {
            $queryParams['columns'] = ObjectSerializer::toQueryValue($columns);
        }

        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($order_shipping_package_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderShippingPackageId' . '}',
                ObjectSerializer::toPathValue($order_shipping_package_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesOrderShippingPackageIdPut
     *
     * Update an order shipping package
     *
     * @param int $order_id The ID of the order (required)
     * @param int $order_shipping_package_id The ID of the order shipping package (required)
     * @param object $body body (optional)
     *
     * @return PlentyModulesOrderShippingPackageModelsOrderShippingPackage
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingPackagesOrderShippingPackageIdPut($order_id, $order_shipping_package_id, $body = null)
    {
        list($response) = $this->restOrdersOrderIdShippingPackagesOrderShippingPackageIdPutWithHttpInfo($order_id, $order_shipping_package_id, $body);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesOrderShippingPackageIdPutWithHttpInfo
     *
     * Update an order shipping package
     *
     * @param int $order_id The ID of the order (required)
     * @param int $order_shipping_package_id The ID of the order shipping package (required)
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackage, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingPackagesOrderShippingPackageIdPutWithHttpInfo($order_id, $order_shipping_package_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackage';
        $request = $this->restOrdersOrderIdShippingPackagesOrderShippingPackageIdPutRequest($order_id, $order_shipping_package_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesOrderShippingPackageIdPutAsync
     *
     * Update an order shipping package
     *
     * @param int $order_id The ID of the order (required)
     * @param int $order_shipping_package_id The ID of the order shipping package (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingPackagesOrderShippingPackageIdPutAsync($order_id, $order_shipping_package_id, $body = null)
    {
        return $this->restOrdersOrderIdShippingPackagesOrderShippingPackageIdPutAsyncWithHttpInfo($order_id, $order_shipping_package_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesOrderShippingPackageIdPutAsyncWithHttpInfo
     *
     * Update an order shipping package
     *
     * @param int $order_id The ID of the order (required)
     * @param int $order_shipping_package_id The ID of the order shipping package (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingPackagesOrderShippingPackageIdPutAsyncWithHttpInfo($order_id, $order_shipping_package_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackage';
        $request = $this->restOrdersOrderIdShippingPackagesOrderShippingPackageIdPutRequest($order_id, $order_shipping_package_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdShippingPackagesOrderShippingPackageIdPut'
     *
     * @param int $order_id The ID of the order (required)
     * @param int $order_shipping_package_id The ID of the order shipping package (required)
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdShippingPackagesOrderShippingPackageIdPutRequest($order_id, $order_shipping_package_id, $body = null)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdShippingPackagesOrderShippingPackageIdPut'
            );
        }
        // verify the required parameter 'order_shipping_package_id' is set
        if ($order_shipping_package_id === null || (is_array($order_shipping_package_id) && count($order_shipping_package_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_shipping_package_id when calling restOrdersOrderIdShippingPackagesOrderShippingPackageIdPut'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/shipping/packages/{orderShippingPackageId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($order_shipping_package_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderShippingPackageId' . '}',
                ObjectSerializer::toPathValue($order_shipping_package_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesPackedItemsGet
     *
     * @param int $order_id order_id (required)
     *
     * @return Mixed[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingPackagesPackedItemsGet($order_id)
    {
        list($response) = $this->restOrdersOrderIdShippingPackagesPackedItemsGetWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesPackedItemsGetWithHttpInfo
     *
     * @param int $order_id (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\Mixed[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingPackagesPackedItemsGetWithHttpInfo($order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\Mixed[]';
        $request = $this->restOrdersOrderIdShippingPackagesPackedItemsGetRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\Mixed[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesPackedItemsGetAsync
     *
     *
     *
     * @param int $order_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingPackagesPackedItemsGetAsync($order_id)
    {
        return $this->restOrdersOrderIdShippingPackagesPackedItemsGetAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesPackedItemsGetAsyncWithHttpInfo
     *
     *
     *
     * @param int $order_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingPackagesPackedItemsGetAsyncWithHttpInfo($order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\Mixed[]';
        $request = $this->restOrdersOrderIdShippingPackagesPackedItemsGetRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdShippingPackagesPackedItemsGet'
     *
     * @param int $order_id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdShippingPackagesPackedItemsGetRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdShippingPackagesPackedItemsGet'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/shipping/packages/packed_items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesPost
     *
     * Create an order shipping package
     *
     * @param int $order_id The ID of the order (required)
     * @param object $body body (optional)
     *
     * @return PlentyModulesOrderShippingPackageModelsOrderShippingPackage
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingPackagesPost($order_id, $body = null)
    {
        list($response) = $this->restOrdersOrderIdShippingPackagesPostWithHttpInfo($order_id, $body);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesPostWithHttpInfo
     *
     * Create an order shipping package
     *
     * @param int $order_id The ID of the order (required)
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackage, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingPackagesPostWithHttpInfo($order_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackage';
        $request = $this->restOrdersOrderIdShippingPackagesPostRequest($order_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesPostAsync
     *
     * Create an order shipping package
     *
     * @param int $order_id The ID of the order (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingPackagesPostAsync($order_id, $body = null)
    {
        return $this->restOrdersOrderIdShippingPackagesPostAsyncWithHttpInfo($order_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesPostAsyncWithHttpInfo
     *
     * Create an order shipping package
     *
     * @param int $order_id The ID of the order (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingPackagesPostAsyncWithHttpInfo($order_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackage';
        $request = $this->restOrdersOrderIdShippingPackagesPostRequest($order_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdShippingPackagesPost'
     *
     * @param int $order_id The ID of the order (required)
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdShippingPackagesPostRequest($order_id, $body = null)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdShippingPackagesPost'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/shipping/packages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesUnpackedItemsGet
     *
     * @param int $order_id order_id (required)
     *
     * @return Mixed[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingPackagesUnpackedItemsGet($order_id)
    {
        list($response) = $this->restOrdersOrderIdShippingPackagesUnpackedItemsGetWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesUnpackedItemsGetWithHttpInfo
     *
     * @param int $order_id (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\Mixed[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingPackagesUnpackedItemsGetWithHttpInfo($order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\Mixed[]';
        $request = $this->restOrdersOrderIdShippingPackagesUnpackedItemsGetRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\Mixed[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesUnpackedItemsGetAsync
     *
     *
     *
     * @param int $order_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingPackagesUnpackedItemsGetAsync($order_id)
    {
        return $this->restOrdersOrderIdShippingPackagesUnpackedItemsGetAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdShippingPackagesUnpackedItemsGetAsyncWithHttpInfo
     *
     *
     *
     * @param int $order_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingPackagesUnpackedItemsGetAsyncWithHttpInfo($order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\Mixed[]';
        $request = $this->restOrdersOrderIdShippingPackagesUnpackedItemsGetRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdShippingPackagesUnpackedItemsGet'
     *
     * @param int $order_id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdShippingPackagesUnpackedItemsGetRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdShippingPackagesUnpackedItemsGet'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/shipping/packages/unpacked_items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdShippingPalletsPackagesItemsGet
     *
     * @param int $order_id order_id (required)
     *
     * @return PlentyModulesOrderShippingPackageModelsOrderShippingPackageItems
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingPalletsPackagesItemsGet($order_id)
    {
        list($response) = $this->restOrdersOrderIdShippingPalletsPackagesItemsGetWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdShippingPalletsPackagesItemsGetWithHttpInfo
     *
     * @param int $order_id (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackageItems, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingPalletsPackagesItemsGetWithHttpInfo($order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackageItems';
        $request = $this->restOrdersOrderIdShippingPalletsPackagesItemsGetRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackageItems',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdShippingPalletsPackagesItemsGetAsync
     *
     *
     *
     * @param int $order_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingPalletsPackagesItemsGetAsync($order_id)
    {
        return $this->restOrdersOrderIdShippingPalletsPackagesItemsGetAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdShippingPalletsPackagesItemsGetAsyncWithHttpInfo
     *
     *
     *
     * @param int $order_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingPalletsPackagesItemsGetAsyncWithHttpInfo($order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackageItems';
        $request = $this->restOrdersOrderIdShippingPalletsPackagesItemsGetRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdShippingPalletsPackagesItemsGet'
     *
     * @param int $order_id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdShippingPalletsPackagesItemsGetRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdShippingPalletsPackagesItemsGet'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/shipping/pallets/packages/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdShippingPalletsPalletIdPackagesDelete
     *
     * /_**      * Delete all order shipping packages in a pallet      *      * Deletes all order shipping packages in a pallet. The ID of the order and the ID of the pallet must be specified.      *      * @param OrderShippingPackageRepositoryContract $orderShippingPackageRepository * @param int $orderId      * @param int$palletId      *      * @return DeleteResponse      * @throws \\Exception      *      * @Call()      *      * @CallParam(name=\"orderId\", type=\"Int\", description=\"The ID of the order\", isRequired=\"true\")      * @CallParam(name=\"palletId\", type=\"Int\", description=\"The ID of the pallet\", isRequired=\"true\")      *_/
     *
     * @param int $order_id The ID of the order (required)
     * @param int $pallet_id The ID of the pallet (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return void
     */
    public function restOrdersOrderIdShippingPalletsPalletIdPackagesDelete($order_id, $pallet_id)
    {
        $this->restOrdersOrderIdShippingPalletsPalletIdPackagesDeleteWithHttpInfo($order_id, $pallet_id);
    }

    /**
     * Operation restOrdersOrderIdShippingPalletsPalletIdPackagesDeleteWithHttpInfo
     *
     * /_**      * Delete all order shipping packages in a pallet      *      * Deletes all order shipping packages in a pallet. The ID of the order and the ID of the pallet must be specified.      *      * @param OrderShippingPackageRepositoryContract $orderShippingPackageRepository * @param int $orderId      * @param int$palletId      *      * @return DeleteResponse      * @throws \\Exception      *      * @Call()      *      * @CallParam(name=\"orderId\", type=\"Int\", description=\"The ID of the order\", isRequired=\"true\")      * @CallParam(name=\"palletId\", type=\"Int\", description=\"The ID of the pallet\", isRequired=\"true\")      *_/
     *
     * @param int $order_id The ID of the order (required)
     * @param int $pallet_id The ID of the pallet (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restOrdersOrderIdShippingPalletsPalletIdPackagesDeleteWithHttpInfo($order_id, $pallet_id)
    {
        $returnType = '';
        $request = $this->restOrdersOrderIdShippingPalletsPalletIdPackagesDeleteRequest($order_id, $pallet_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdShippingPalletsPalletIdPackagesDeleteAsync
     *
     * /_**      * Delete all order shipping packages in a pallet      *      * Deletes all order shipping packages in a pallet. The ID of the order and the ID of the pallet must be specified.      *      * @param OrderShippingPackageRepositoryContract $orderShippingPackageRepository * @param int $orderId      * @param int$palletId      *      * @return DeleteResponse      * @throws \\Exception      *      * @Call()      *      * @CallParam(name=\"orderId\", type=\"Int\", description=\"The ID of the order\", isRequired=\"true\")      * @CallParam(name=\"palletId\", type=\"Int\", description=\"The ID of the pallet\", isRequired=\"true\")      *_/
     *
     * @param int $order_id The ID of the order (required)
     * @param int $pallet_id The ID of the pallet (required)
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restOrdersOrderIdShippingPalletsPalletIdPackagesDeleteAsync($order_id, $pallet_id)
    {
        return $this->restOrdersOrderIdShippingPalletsPalletIdPackagesDeleteAsyncWithHttpInfo($order_id, $pallet_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdShippingPalletsPalletIdPackagesDeleteAsyncWithHttpInfo
     *
     * /_**      * Delete all order shipping packages in a pallet      *      * Deletes all order shipping packages in a pallet. The ID of the order and the ID of the pallet must be specified.      *      * @param OrderShippingPackageRepositoryContract $orderShippingPackageRepository * @param int $orderId      * @param int$palletId      *      * @return DeleteResponse      * @throws \\Exception      *      * @Call()      *      * @CallParam(name=\"orderId\", type=\"Int\", description=\"The ID of the order\", isRequired=\"true\")      * @CallParam(name=\"palletId\", type=\"Int\", description=\"The ID of the pallet\", isRequired=\"true\")      *_/
     *
     * @param int $order_id The ID of the order (required)
     * @param int $pallet_id The ID of the pallet (required)
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restOrdersOrderIdShippingPalletsPalletIdPackagesDeleteAsyncWithHttpInfo($order_id, $pallet_id)
    {
        $returnType = '';
        $request = $this->restOrdersOrderIdShippingPalletsPalletIdPackagesDeleteRequest($order_id, $pallet_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdShippingPalletsPalletIdPackagesDelete'
     *
     * @param int $order_id The ID of the order (required)
     * @param int $pallet_id The ID of the pallet (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdShippingPalletsPalletIdPackagesDeleteRequest($order_id, $pallet_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdShippingPalletsPalletIdPackagesDelete'
            );
        }
        // verify the required parameter 'pallet_id' is set
        if ($pallet_id === null || (is_array($pallet_id) && count($pallet_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $pallet_id when calling restOrdersOrderIdShippingPalletsPalletIdPackagesDelete'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/shipping/pallets/{palletId}/packages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($pallet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'palletId' . '}',
                ObjectSerializer::toPathValue($pallet_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdShippingPalletsPalletIdPackagesGet
     *
     * @param int $order_id order_id (required)
     * @param int $pallet_id pallet_id (required)
     *
     * @return PlentyModulesOrderShippingPackageModelsOrderShippingPackage[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingPalletsPalletIdPackagesGet($order_id, $pallet_id)
    {
        list($response) = $this->restOrdersOrderIdShippingPalletsPalletIdPackagesGetWithHttpInfo($order_id, $pallet_id);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdShippingPalletsPalletIdPackagesGetWithHttpInfo
     *
     * @param int $order_id (required)
     * @param int $pallet_id (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackage[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingPalletsPalletIdPackagesGetWithHttpInfo($order_id, $pallet_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackage[]';
        $request = $this->restOrdersOrderIdShippingPalletsPalletIdPackagesGetRequest($order_id, $pallet_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackage[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdShippingPalletsPalletIdPackagesGetAsync
     *
     *
     *
     * @param int $order_id (required)
     * @param int $pallet_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingPalletsPalletIdPackagesGetAsync($order_id, $pallet_id)
    {
        return $this->restOrdersOrderIdShippingPalletsPalletIdPackagesGetAsyncWithHttpInfo($order_id, $pallet_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdShippingPalletsPalletIdPackagesGetAsyncWithHttpInfo
     *
     *
     *
     * @param int $order_id (required)
     * @param int $pallet_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingPalletsPalletIdPackagesGetAsyncWithHttpInfo($order_id, $pallet_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackage[]';
        $request = $this->restOrdersOrderIdShippingPalletsPalletIdPackagesGetRequest($order_id, $pallet_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdShippingPalletsPalletIdPackagesGet'
     *
     * @param int $order_id (required)
     * @param int $pallet_id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdShippingPalletsPalletIdPackagesGetRequest($order_id, $pallet_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdShippingPalletsPalletIdPackagesGet'
            );
        }
        // verify the required parameter 'pallet_id' is set
        if ($pallet_id === null || (is_array($pallet_id) && count($pallet_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $pallet_id when calling restOrdersOrderIdShippingPalletsPalletIdPackagesGet'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/shipping/pallets/{palletId}/packages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($pallet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'palletId' . '}',
                ObjectSerializer::toPathValue($pallet_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdShippingPalletsPalletIdPackagesPut
     *
     * Update all the packages in a pallet.
     *
     * @param int $order_id The ID of the order (required)
     * @param int $pallet_id The ID of the pallet (required)
     *
     * @return PlentyDataSimpleRestResponse
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingPalletsPalletIdPackagesPut($order_id, $pallet_id)
    {
        list($response) = $this->restOrdersOrderIdShippingPalletsPalletIdPackagesPutWithHttpInfo($order_id, $pallet_id);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdShippingPalletsPalletIdPackagesPutWithHttpInfo
     *
     * Update all the packages in a pallet.
     *
     * @param int $order_id The ID of the order (required)
     * @param int $pallet_id The ID of the pallet (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyDataSimpleRestResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingPalletsPalletIdPackagesPutWithHttpInfo($order_id, $pallet_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyDataSimpleRestResponse';
        $request = $this->restOrdersOrderIdShippingPalletsPalletIdPackagesPutRequest($order_id, $pallet_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyDataSimpleRestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdShippingPalletsPalletIdPackagesPutAsync
     *
     * Update all the packages in a pallet.
     *
     * @param int $order_id The ID of the order (required)
     * @param int $pallet_id The ID of the pallet (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingPalletsPalletIdPackagesPutAsync($order_id, $pallet_id)
    {
        return $this->restOrdersOrderIdShippingPalletsPalletIdPackagesPutAsyncWithHttpInfo($order_id, $pallet_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdShippingPalletsPalletIdPackagesPutAsyncWithHttpInfo
     *
     * Update all the packages in a pallet.
     *
     * @param int $order_id The ID of the order (required)
     * @param int $pallet_id The ID of the pallet (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingPalletsPalletIdPackagesPutAsyncWithHttpInfo($order_id, $pallet_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyDataSimpleRestResponse';
        $request = $this->restOrdersOrderIdShippingPalletsPalletIdPackagesPutRequest($order_id, $pallet_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdShippingPalletsPalletIdPackagesPut'
     *
     * @param int $order_id The ID of the order (required)
     * @param int $pallet_id The ID of the pallet (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdShippingPalletsPalletIdPackagesPutRequest($order_id, $pallet_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdShippingPalletsPalletIdPackagesPut'
            );
        }
        // verify the required parameter 'pallet_id' is set
        if ($pallet_id === null || (is_array($pallet_id) && count($pallet_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $pallet_id when calling restOrdersOrderIdShippingPalletsPalletIdPackagesPut'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/shipping/pallets/{palletId}/packages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($pallet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'palletId' . '}',
                ObjectSerializer::toPathValue($pallet_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdShippingShippingInformationAdditionalDataPut
     *
     * Update additional data of the shipping information
     *
     * @param int $order_id order_id (required)
     *
     * @return PlentyModulesOrderShippingInformationModelsShippingInformation
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingShippingInformationAdditionalDataPut($order_id)
    {
        list($response) = $this->restOrdersOrderIdShippingShippingInformationAdditionalDataPutWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdShippingShippingInformationAdditionalDataPutWithHttpInfo
     *
     * Update additional data of the shipping information
     *
     * @param int $order_id (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingInformationModelsShippingInformation, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingShippingInformationAdditionalDataPutWithHttpInfo($order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingInformationModelsShippingInformation';
        $request = $this->restOrdersOrderIdShippingShippingInformationAdditionalDataPutRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingInformationModelsShippingInformation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdShippingShippingInformationAdditionalDataPutAsync
     *
     * Update additional data of the shipping information
     *
     * @param int $order_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingShippingInformationAdditionalDataPutAsync($order_id)
    {
        return $this->restOrdersOrderIdShippingShippingInformationAdditionalDataPutAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdShippingShippingInformationAdditionalDataPutAsyncWithHttpInfo
     *
     * Update additional data of the shipping information
     *
     * @param int $order_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingShippingInformationAdditionalDataPutAsyncWithHttpInfo($order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingInformationModelsShippingInformation';
        $request = $this->restOrdersOrderIdShippingShippingInformationAdditionalDataPutRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdShippingShippingInformationAdditionalDataPut'
     *
     * @param int $order_id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdShippingShippingInformationAdditionalDataPutRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdShippingShippingInformationAdditionalDataPut'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/shipping/shipping_information/additional_data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdShippingShippingInformationDelete
     *
     * Delete shipping information
     *
     * @param int $order_id order_id (required)
     *
     * @return PlentyModulesOrderShippingInformationModelsShippingInformation
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingShippingInformationDelete($order_id)
    {
        list($response) = $this->restOrdersOrderIdShippingShippingInformationDeleteWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdShippingShippingInformationDeleteWithHttpInfo
     *
     * Delete shipping information
     *
     * @param int $order_id (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingInformationModelsShippingInformation, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingShippingInformationDeleteWithHttpInfo($order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingInformationModelsShippingInformation';
        $request = $this->restOrdersOrderIdShippingShippingInformationDeleteRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingInformationModelsShippingInformation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdShippingShippingInformationDeleteAsync
     *
     * Delete shipping information
     *
     * @param int $order_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingShippingInformationDeleteAsync($order_id)
    {
        return $this->restOrdersOrderIdShippingShippingInformationDeleteAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdShippingShippingInformationDeleteAsyncWithHttpInfo
     *
     * Delete shipping information
     *
     * @param int $order_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingShippingInformationDeleteAsyncWithHttpInfo($order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingInformationModelsShippingInformation';
        $request = $this->restOrdersOrderIdShippingShippingInformationDeleteRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdShippingShippingInformationDelete'
     *
     * @param int $order_id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdShippingShippingInformationDeleteRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdShippingShippingInformationDelete'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/shipping/shipping_information';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdShippingShippingInformationGet
     *
     * Get shipping information
     *
     * @param int $order_id order_id (required)
     *
     * @return PlentyModulesOrderShippingInformationModelsShippingInformation
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingShippingInformationGet($order_id)
    {
        list($response) = $this->restOrdersOrderIdShippingShippingInformationGetWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdShippingShippingInformationGetWithHttpInfo
     *
     * Get shipping information
     *
     * @param int $order_id (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingInformationModelsShippingInformation, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingShippingInformationGetWithHttpInfo($order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingInformationModelsShippingInformation';
        $request = $this->restOrdersOrderIdShippingShippingInformationGetRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingInformationModelsShippingInformation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdShippingShippingInformationGetAsync
     *
     * Get shipping information
     *
     * @param int $order_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingShippingInformationGetAsync($order_id)
    {
        return $this->restOrdersOrderIdShippingShippingInformationGetAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdShippingShippingInformationGetAsyncWithHttpInfo
     *
     * Get shipping information
     *
     * @param int $order_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingShippingInformationGetAsyncWithHttpInfo($order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingInformationModelsShippingInformation';
        $request = $this->restOrdersOrderIdShippingShippingInformationGetRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdShippingShippingInformationGet'
     *
     * @param int $order_id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdShippingShippingInformationGetRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdShippingShippingInformationGet'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/shipping/shipping_information';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdShippingShippingInformationStatusPut
     *
     * Update the shipping status of the shipping information
     *
     * @param int $order_id order_id (required)
     *
     * @return PlentyModulesOrderShippingInformationModelsShippingInformation
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingShippingInformationStatusPut($order_id)
    {
        list($response) = $this->restOrdersOrderIdShippingShippingInformationStatusPutWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdShippingShippingInformationStatusPutWithHttpInfo
     *
     * Update the shipping status of the shipping information
     *
     * @param int $order_id (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingInformationModelsShippingInformation, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingShippingInformationStatusPutWithHttpInfo($order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingInformationModelsShippingInformation';
        $request = $this->restOrdersOrderIdShippingShippingInformationStatusPutRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingInformationModelsShippingInformation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdShippingShippingInformationStatusPutAsync
     *
     * Update the shipping status of the shipping information
     *
     * @param int $order_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingShippingInformationStatusPutAsync($order_id)
    {
        return $this->restOrdersOrderIdShippingShippingInformationStatusPutAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdShippingShippingInformationStatusPutAsyncWithHttpInfo
     *
     * Update the shipping status of the shipping information
     *
     * @param int $order_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingShippingInformationStatusPutAsyncWithHttpInfo($order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingInformationModelsShippingInformation';
        $request = $this->restOrdersOrderIdShippingShippingInformationStatusPutRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdShippingShippingInformationStatusPut'
     *
     * @param int $order_id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdShippingShippingInformationStatusPutRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdShippingShippingInformationStatusPut'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/shipping/shipping_information/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdStatusHistoryGet
     *
     * Get the status history of an order
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return PlentyModulesOrderStatusHistoryModelsStatusHistoryEntry[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdStatusHistoryGet($order_id)
    {
        list($response) = $this->restOrdersOrderIdStatusHistoryGetWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdStatusHistoryGetWithHttpInfo
     *
     * Get the status history of an order
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderStatusHistoryModelsStatusHistoryEntry[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdStatusHistoryGetWithHttpInfo($order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderStatusHistoryModelsStatusHistoryEntry[]';
        $request = $this->restOrdersOrderIdStatusHistoryGetRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderStatusHistoryModelsStatusHistoryEntry[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdStatusHistoryGetAsync
     *
     * Get the status history of an order
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdStatusHistoryGetAsync($order_id)
    {
        return $this->restOrdersOrderIdStatusHistoryGetAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdStatusHistoryGetAsyncWithHttpInfo
     *
     * Get the status history of an order
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdStatusHistoryGetAsyncWithHttpInfo($order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderStatusHistoryModelsStatusHistoryEntry[]';
        $request = $this->restOrdersOrderIdStatusHistoryGetRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdStatusHistoryGet'
     *
     * @param int $order_id The ID of the order (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdStatusHistoryGetRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdStatusHistoryGet'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/status-history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdTransactionsPost
     *
     * Create transactions for order
     *
     * @param int $order_id The ID of the order (required)
     * @param object $body body (optional)
     *
     * @return IlluminateSupportCollection
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdTransactionsPost($order_id, $body = null)
    {
        list($response) = $this->restOrdersOrderIdTransactionsPostWithHttpInfo($order_id, $body);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdTransactionsPostWithHttpInfo
     *
     * Create transactions for order
     *
     * @param int $order_id The ID of the order (required)
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\IlluminateSupportCollection, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdTransactionsPostWithHttpInfo($order_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\IlluminateSupportCollection';
        $request = $this->restOrdersOrderIdTransactionsPostRequest($order_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\IlluminateSupportCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdTransactionsPostAsync
     *
     * Create transactions for order
     *
     * @param int $order_id The ID of the order (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdTransactionsPostAsync($order_id, $body = null)
    {
        return $this->restOrdersOrderIdTransactionsPostAsyncWithHttpInfo($order_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdTransactionsPostAsyncWithHttpInfo
     *
     * Create transactions for order
     *
     * @param int $order_id The ID of the order (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdTransactionsPostAsyncWithHttpInfo($order_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\IlluminateSupportCollection';
        $request = $this->restOrdersOrderIdTransactionsPostRequest($order_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdTransactionsPost'
     *
     * @param int $order_id The ID of the order (required)
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdTransactionsPostRequest($order_id, $body = null)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdTransactionsPost'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersPost
     *
     * Create an order
     *
     * @param object $body body (optional)
     * @param int $coupon One or multiple coupon code to be redeemed with order creation (optional)
     *
     * @return PlentyModulesOrderModelsOrder
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersPost($body = null, $coupon = null)
    {
        list($response) = $this->restOrdersPostWithHttpInfo($body, $coupon);
        return $response;
    }

    /**
     * Operation restOrdersPostWithHttpInfo
     *
     * Create an order
     *
     * @param object $body (optional)
     * @param int $coupon One or multiple coupon code to be redeemed with order creation (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersPostWithHttpInfo($body = null, $coupon = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder';
        $request = $this->restOrdersPostRequest($body, $coupon);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersPostAsync
     *
     * Create an order
     *
     * @param object $body (optional)
     * @param int $coupon One or multiple coupon code to be redeemed with order creation (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersPostAsync($body = null, $coupon = null)
    {
        return $this->restOrdersPostAsyncWithHttpInfo($body, $coupon)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersPostAsyncWithHttpInfo
     *
     * Create an order
     *
     * @param object $body (optional)
     * @param int $coupon One or multiple coupon code to be redeemed with order creation (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersPostAsyncWithHttpInfo($body = null, $coupon = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder';
        $request = $this->restOrdersPostRequest($body, $coupon);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersPost'
     *
     * @param object $body (optional)
     * @param int $coupon One or multiple coupon code to be redeemed with order creation (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersPostRequest($body = null, $coupon = null)
    {

        $resourcePath = '/rest/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($coupon !== null) {
            $queryParams['coupon'] = ObjectSerializer::toQueryValue($coupon);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersPropertiesIdDelete
     *
     * Delete a property of an order by property ID
     *
     * @param int $id The ID of the property to be deleted. (required)
     *
     * @return PlentyRepositoriesModelsDeleteResponse
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersPropertiesIdDelete($id)
    {
        list($response) = $this->restOrdersPropertiesIdDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation restOrdersPropertiesIdDeleteWithHttpInfo
     *
     * Delete a property of an order by property ID
     *
     * @param int $id The ID of the property to be deleted. (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyRepositoriesModelsDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersPropertiesIdDeleteWithHttpInfo($id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyRepositoriesModelsDeleteResponse';
        $request = $this->restOrdersPropertiesIdDeleteRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyRepositoriesModelsDeleteResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersPropertiesIdDeleteAsync
     *
     * Delete a property of an order by property ID
     *
     * @param int $id The ID of the property to be deleted. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersPropertiesIdDeleteAsync($id)
    {
        return $this->restOrdersPropertiesIdDeleteAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersPropertiesIdDeleteAsyncWithHttpInfo
     *
     * Delete a property of an order by property ID
     *
     * @param int $id The ID of the property to be deleted. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersPropertiesIdDeleteAsyncWithHttpInfo($id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyRepositoriesModelsDeleteResponse';
        $request = $this->restOrdersPropertiesIdDeleteRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersPropertiesIdDelete'
     *
     * @param int $id The ID of the property to be deleted. (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersPropertiesIdDeleteRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling restOrdersPropertiesIdDelete'
            );
        }

        $resourcePath = '/rest/orders/properties/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersPropertiesIdPut
     *
     * Update a property of an order by property ID
     *
     * @param int $id id (required)
     * @param object $body body (optional)
     *
     * @return PlentyModulesOrderPropertyModelsOrderProperty
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersPropertiesIdPut($id, $body = null)
    {
        list($response) = $this->restOrdersPropertiesIdPutWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation restOrdersPropertiesIdPutWithHttpInfo
     *
     * Update a property of an order by property ID
     *
     * @param int $id (required)
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderProperty, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersPropertiesIdPutWithHttpInfo($id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderProperty';
        $request = $this->restOrdersPropertiesIdPutRequest($id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderProperty',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersPropertiesIdPutAsync
     *
     * Update a property of an order by property ID
     *
     * @param int $id (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersPropertiesIdPutAsync($id, $body = null)
    {
        return $this->restOrdersPropertiesIdPutAsyncWithHttpInfo($id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersPropertiesIdPutAsyncWithHttpInfo
     *
     * Update a property of an order by property ID
     *
     * @param int $id (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersPropertiesIdPutAsyncWithHttpInfo($id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderProperty';
        $request = $this->restOrdersPropertiesIdPutRequest($id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersPropertiesIdPut'
     *
     * @param int $id (required)
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersPropertiesIdPutRequest($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling restOrdersPropertiesIdPut'
            );
        }

        $resourcePath = '/rest/orders/properties/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersPropertiesTypesGet
     *
     * List order property types
     *
     * @param int $lang Languages to be loaded with the type model. Defaults to all. (optional)
     *
     * @return PlentyModulesOrderPropertyModelsOrderPropertyType[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersPropertiesTypesGet($lang = null)
    {
        list($response) = $this->restOrdersPropertiesTypesGetWithHttpInfo($lang);
        return $response;
    }

    /**
     * Operation restOrdersPropertiesTypesGetWithHttpInfo
     *
     * List order property types
     *
     * @param int $lang Languages to be loaded with the type model. Defaults to all. (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderPropertyType[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersPropertiesTypesGetWithHttpInfo($lang = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderPropertyType[]';
        $request = $this->restOrdersPropertiesTypesGetRequest($lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderPropertyType[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersPropertiesTypesGetAsync
     *
     * List order property types
     *
     * @param int $lang Languages to be loaded with the type model. Defaults to all. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersPropertiesTypesGetAsync($lang = null)
    {
        return $this->restOrdersPropertiesTypesGetAsyncWithHttpInfo($lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersPropertiesTypesGetAsyncWithHttpInfo
     *
     * List order property types
     *
     * @param int $lang Languages to be loaded with the type model. Defaults to all. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersPropertiesTypesGetAsyncWithHttpInfo($lang = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderPropertyType[]';
        $request = $this->restOrdersPropertiesTypesGetRequest($lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersPropertiesTypesGet'
     *
     * @param int $lang Languages to be loaded with the type model. Defaults to all. (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersPropertiesTypesGetRequest($lang = null)
    {

        $resourcePath = '/rest/orders/properties/types';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($lang !== null) {
            $queryParams['lang'] = ObjectSerializer::toQueryValue($lang);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersPropertiesTypesPost
     *
     * Create an order property type
     *
     * @param object $body body (optional)
     *
     * @return PlentyModulesOrderPropertyModelsOrderPropertyType
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersPropertiesTypesPost($body = null)
    {
        list($response) = $this->restOrdersPropertiesTypesPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation restOrdersPropertiesTypesPostWithHttpInfo
     *
     * Create an order property type
     *
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderPropertyType, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersPropertiesTypesPostWithHttpInfo($body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderPropertyType';
        $request = $this->restOrdersPropertiesTypesPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderPropertyType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersPropertiesTypesPostAsync
     *
     * Create an order property type
     *
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersPropertiesTypesPostAsync($body = null)
    {
        return $this->restOrdersPropertiesTypesPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersPropertiesTypesPostAsyncWithHttpInfo
     *
     * Create an order property type
     *
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersPropertiesTypesPostAsyncWithHttpInfo($body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderPropertyType';
        $request = $this->restOrdersPropertiesTypesPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersPropertiesTypesPost'
     *
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersPropertiesTypesPostRequest($body = null)
    {

        $resourcePath = '/rest/orders/properties/types';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersPropertiesTypesTypeIdDelete
     *
     * Delete a property type.
     *
     * @param int $type_id The ID of the property type (required)
     *
     * @return void
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersPropertiesTypesTypeIdDelete($type_id)
    {
        $this->restOrdersPropertiesTypesTypeIdDeleteWithHttpInfo($type_id);
    }

    /**
     * Operation restOrdersPropertiesTypesTypeIdDeleteWithHttpInfo
     *
     * Delete a property type.
     *
     * @param int $type_id The ID of the property type (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersPropertiesTypesTypeIdDeleteWithHttpInfo($type_id)
    {
        $returnType = '';
        $request = $this->restOrdersPropertiesTypesTypeIdDeleteRequest($type_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersPropertiesTypesTypeIdDeleteAsync
     *
     * Delete a property type.
     *
     * @param int $type_id The ID of the property type (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersPropertiesTypesTypeIdDeleteAsync($type_id)
    {
        return $this->restOrdersPropertiesTypesTypeIdDeleteAsyncWithHttpInfo($type_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersPropertiesTypesTypeIdDeleteAsyncWithHttpInfo
     *
     * Delete a property type.
     *
     * @param int $type_id The ID of the property type (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersPropertiesTypesTypeIdDeleteAsyncWithHttpInfo($type_id)
    {
        $returnType = '';
        $request = $this->restOrdersPropertiesTypesTypeIdDeleteRequest($type_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersPropertiesTypesTypeIdDelete'
     *
     * @param int $type_id The ID of the property type (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersPropertiesTypesTypeIdDeleteRequest($type_id)
    {
        // verify the required parameter 'type_id' is set
        if ($type_id === null || (is_array($type_id) && count($type_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $type_id when calling restOrdersPropertiesTypesTypeIdDelete'
            );
        }

        $resourcePath = '/rest/orders/properties/types/{typeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'typeId' . '}',
                ObjectSerializer::toPathValue($type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersPropertiesTypesTypeIdGet
     *
     * Get a property type
     *
     * @param int $type_id The ID of the type. (required)
     * @param int $lang Languages to be loaded with the type model. Defaults to all. (optional)
     *
     * @return PlentyModulesOrderPropertyModelsOrderPropertyType
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersPropertiesTypesTypeIdGet($type_id, $lang = null)
    {
        list($response) = $this->restOrdersPropertiesTypesTypeIdGetWithHttpInfo($type_id, $lang);
        return $response;
    }

    /**
     * Operation restOrdersPropertiesTypesTypeIdGetWithHttpInfo
     *
     * Get a property type
     *
     * @param int $type_id The ID of the type. (required)
     * @param int $lang Languages to be loaded with the type model. Defaults to all. (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderPropertyType, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersPropertiesTypesTypeIdGetWithHttpInfo($type_id, $lang = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderPropertyType';
        $request = $this->restOrdersPropertiesTypesTypeIdGetRequest($type_id, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderPropertyType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersPropertiesTypesTypeIdGetAsync
     *
     * Get a property type
     *
     * @param int $type_id The ID of the type. (required)
     * @param int $lang Languages to be loaded with the type model. Defaults to all. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersPropertiesTypesTypeIdGetAsync($type_id, $lang = null)
    {
        return $this->restOrdersPropertiesTypesTypeIdGetAsyncWithHttpInfo($type_id, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersPropertiesTypesTypeIdGetAsyncWithHttpInfo
     *
     * Get a property type
     *
     * @param int $type_id The ID of the type. (required)
     * @param int $lang Languages to be loaded with the type model. Defaults to all. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersPropertiesTypesTypeIdGetAsyncWithHttpInfo($type_id, $lang = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderPropertyType';
        $request = $this->restOrdersPropertiesTypesTypeIdGetRequest($type_id, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersPropertiesTypesTypeIdGet'
     *
     * @param int $type_id The ID of the type. (required)
     * @param int $lang Languages to be loaded with the type model. Defaults to all. (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersPropertiesTypesTypeIdGetRequest($type_id, $lang = null)
    {
        // verify the required parameter 'type_id' is set
        if ($type_id === null || (is_array($type_id) && count($type_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $type_id when calling restOrdersPropertiesTypesTypeIdGet'
            );
        }

        $resourcePath = '/rest/orders/properties/types/{typeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($lang !== null) {
            $queryParams['lang'] = ObjectSerializer::toQueryValue($lang);
        }

        // path params
        if ($type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'typeId' . '}',
                ObjectSerializer::toPathValue($type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersPropertiesTypesTypeIdPut
     *
     * Update a property type.
     *
     * @param int $type_id type_id (required)
     * @param object $body body (optional)
     *
     * @return PlentyModulesOrderPropertyModelsOrderPropertyType
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersPropertiesTypesTypeIdPut($type_id, $body = null)
    {
        list($response) = $this->restOrdersPropertiesTypesTypeIdPutWithHttpInfo($type_id, $body);
        return $response;
    }

    /**
     * Operation restOrdersPropertiesTypesTypeIdPutWithHttpInfo
     *
     * Update a property type.
     *
     * @param int $type_id (required)
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderPropertyType, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersPropertiesTypesTypeIdPutWithHttpInfo($type_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderPropertyType';
        $request = $this->restOrdersPropertiesTypesTypeIdPutRequest($type_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderPropertyType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersPropertiesTypesTypeIdPutAsync
     *
     * Update a property type.
     *
     * @param int $type_id (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersPropertiesTypesTypeIdPutAsync($type_id, $body = null)
    {
        return $this->restOrdersPropertiesTypesTypeIdPutAsyncWithHttpInfo($type_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersPropertiesTypesTypeIdPutAsyncWithHttpInfo
     *
     * Update a property type.
     *
     * @param int $type_id (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersPropertiesTypesTypeIdPutAsyncWithHttpInfo($type_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderPropertyModelsOrderPropertyType';
        $request = $this->restOrdersPropertiesTypesTypeIdPutRequest($type_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersPropertiesTypesTypeIdPut'
     *
     * @param int $type_id (required)
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersPropertiesTypesTypeIdPutRequest($type_id, $body = null)
    {
        // verify the required parameter 'type_id' is set
        if ($type_id === null || (is_array($type_id) && count($type_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $type_id when calling restOrdersPropertiesTypesTypeIdPut'
            );
        }

        $resourcePath = '/rest/orders/properties/types/{typeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'typeId' . '}',
                ObjectSerializer::toPathValue($type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersReferrersGet
     *
     * List referrers
     *
     * @param int $columns The desired columns/attributes of the order referrer to be loaded. (optional)
     *
     * @return PlentyModulesOrderReferrerModelsOrderReferrer[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersReferrersGet($columns = null)
    {
        list($response) = $this->restOrdersReferrersGetWithHttpInfo($columns);
        return $response;
    }

    /**
     * Operation restOrdersReferrersGetWithHttpInfo
     *
     * List referrers
     *
     * @param int $columns The desired columns/attributes of the order referrer to be loaded. (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderReferrerModelsOrderReferrer[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersReferrersGetWithHttpInfo($columns = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderReferrerModelsOrderReferrer[]';
        $request = $this->restOrdersReferrersGetRequest($columns);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderReferrerModelsOrderReferrer[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersReferrersGetAsync
     *
     * List referrers
     *
     * @param int $columns The desired columns/attributes of the order referrer to be loaded. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersReferrersGetAsync($columns = null)
    {
        return $this->restOrdersReferrersGetAsyncWithHttpInfo($columns)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersReferrersGetAsyncWithHttpInfo
     *
     * List referrers
     *
     * @param int $columns The desired columns/attributes of the order referrer to be loaded. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersReferrersGetAsyncWithHttpInfo($columns = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderReferrerModelsOrderReferrer[]';
        $request = $this->restOrdersReferrersGetRequest($columns);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersReferrersGet'
     *
     * @param int $columns The desired columns/attributes of the order referrer to be loaded. (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersReferrersGetRequest($columns = null)
    {

        $resourcePath = '/rest/orders/referrers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($columns !== null) {
            $queryParams['columns'] = ObjectSerializer::toQueryValue($columns);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersReferrersParentReferrerIdPost
     *
     * Create an order referrer
     *
     * @param int $data The attributes of the order referrer to be created. (required)
     * @param int $parent_referrer_id parent_referrer_id (required)
     *
     * @return PlentyModulesOrderReferrerModelsOrderReferrer
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersReferrersParentReferrerIdPost($data, $parent_referrer_id)
    {
        list($response) = $this->restOrdersReferrersParentReferrerIdPostWithHttpInfo($data, $parent_referrer_id);
        return $response;
    }

    /**
     * Operation restOrdersReferrersParentReferrerIdPostWithHttpInfo
     *
     * Create an order referrer
     *
     * @param int $data The attributes of the order referrer to be created. (required)
     * @param int $parent_referrer_id (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderReferrerModelsOrderReferrer, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersReferrersParentReferrerIdPostWithHttpInfo($data, $parent_referrer_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderReferrerModelsOrderReferrer';
        $request = $this->restOrdersReferrersParentReferrerIdPostRequest($data, $parent_referrer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderReferrerModelsOrderReferrer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersReferrersParentReferrerIdPostAsync
     *
     * Create an order referrer
     *
     * @param int $data The attributes of the order referrer to be created. (required)
     * @param int $parent_referrer_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersReferrersParentReferrerIdPostAsync($data, $parent_referrer_id)
    {
        return $this->restOrdersReferrersParentReferrerIdPostAsyncWithHttpInfo($data, $parent_referrer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersReferrersParentReferrerIdPostAsyncWithHttpInfo
     *
     * Create an order referrer
     *
     * @param int $data The attributes of the order referrer to be created. (required)
     * @param int $parent_referrer_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersReferrersParentReferrerIdPostAsyncWithHttpInfo($data, $parent_referrer_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderReferrerModelsOrderReferrer';
        $request = $this->restOrdersReferrersParentReferrerIdPostRequest($data, $parent_referrer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersReferrersParentReferrerIdPost'
     *
     * @param int $data The attributes of the order referrer to be created. (required)
     * @param int $parent_referrer_id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersReferrersParentReferrerIdPostRequest($data, $parent_referrer_id)
    {
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $data when calling restOrdersReferrersParentReferrerIdPost'
            );
        }
        // verify the required parameter 'parent_referrer_id' is set
        if ($parent_referrer_id === null || (is_array($parent_referrer_id) && count($parent_referrer_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $parent_referrer_id when calling restOrdersReferrersParentReferrerIdPost'
            );
        }

        $resourcePath = '/rest/orders/referrers/{parentReferrerId?}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($data !== null) {
            $queryParams['data'] = ObjectSerializer::toQueryValue($data);
        }

        // path params
        if ($parent_referrer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parentReferrerId?' . '}',
                ObjectSerializer::toPathValue($parent_referrer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersShippingCountriesGet
     *
     * List shipping countries
     *
     * @param int $active Returns only the active shipping countries. (optional)
     * @param int $with The relations to be loaded. Possible values are &#x27;states&#x27; and &#x27;names&#x27;. (optional)
     *
     * @return IlluminateSupportCollection
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingCountriesGet($active = null, $with = null)
    {
        list($response) = $this->restOrdersShippingCountriesGetWithHttpInfo($active, $with);
        return $response;
    }

    /**
     * Operation restOrdersShippingCountriesGetWithHttpInfo
     *
     * List shipping countries
     *
     * @param int $active Returns only the active shipping countries. (optional)
     * @param int $with The relations to be loaded. Possible values are &#x27;states&#x27; and &#x27;names&#x27;. (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\IlluminateSupportCollection, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingCountriesGetWithHttpInfo($active = null, $with = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\IlluminateSupportCollection';
        $request = $this->restOrdersShippingCountriesGetRequest($active, $with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\IlluminateSupportCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersShippingCountriesGetAsync
     *
     * List shipping countries
     *
     * @param int $active Returns only the active shipping countries. (optional)
     * @param int $with The relations to be loaded. Possible values are &#x27;states&#x27; and &#x27;names&#x27;. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingCountriesGetAsync($active = null, $with = null)
    {
        return $this->restOrdersShippingCountriesGetAsyncWithHttpInfo($active, $with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersShippingCountriesGetAsyncWithHttpInfo
     *
     * List shipping countries
     *
     * @param int $active Returns only the active shipping countries. (optional)
     * @param int $with The relations to be loaded. Possible values are &#x27;states&#x27; and &#x27;names&#x27;. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingCountriesGetAsyncWithHttpInfo($active = null, $with = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\IlluminateSupportCollection';
        $request = $this->restOrdersShippingCountriesGetRequest($active, $with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersShippingCountriesGet'
     *
     * @param int $active Returns only the active shipping countries. (optional)
     * @param int $with The relations to be loaded. Possible values are &#x27;states&#x27; and &#x27;names&#x27;. (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersShippingCountriesGetRequest($active = null, $with = null)
    {

        $resourcePath = '/rest/orders/shipping/countries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($active !== null) {
            $queryParams['active'] = ObjectSerializer::toQueryValue($active);
        }
        // query params
        if ($with !== null) {
            $queryParams['with'] = ObjectSerializer::toQueryValue($with);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersShippingPackageTypesGet
     *
     * List shipping package types
     *
     *
     * @return PlentyModulesOrderShippingPackageTypeModelsShippingPackageType[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPackageTypesGet()
    {
        list($response) = $this->restOrdersShippingPackageTypesGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation restOrdersShippingPackageTypesGetWithHttpInfo
     *
     * List shipping package types
     *
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageTypeModelsShippingPackageType[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPackageTypesGetWithHttpInfo()
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageTypeModelsShippingPackageType[]';
        $request = $this->restOrdersShippingPackageTypesGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageTypeModelsShippingPackageType[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersShippingPackageTypesGetAsync
     *
     * List shipping package types
     *
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPackageTypesGetAsync()
    {
        return $this->restOrdersShippingPackageTypesGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersShippingPackageTypesGetAsyncWithHttpInfo
     *
     * List shipping package types
     *
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPackageTypesGetAsyncWithHttpInfo()
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageTypeModelsShippingPackageType[]';
        $request = $this->restOrdersShippingPackageTypesGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersShippingPackageTypesGet'
     *
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersShippingPackageTypesGetRequest()
    {

        $resourcePath = '/rest/orders/shipping/package_types';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersShippingPackageTypesShippingPackageTypeIdGet
     *
     * Get a shipping package type
     *
     * @param int $shipping_package_type_id shipping_package_type_id (required)
     *
     * @return PlentyModulesOrderShippingPackageTypeModelsShippingPackageType
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPackageTypesShippingPackageTypeIdGet($shipping_package_type_id)
    {
        list($response) = $this->restOrdersShippingPackageTypesShippingPackageTypeIdGetWithHttpInfo($shipping_package_type_id);
        return $response;
    }

    /**
     * Operation restOrdersShippingPackageTypesShippingPackageTypeIdGetWithHttpInfo
     *
     * Get a shipping package type
     *
     * @param int $shipping_package_type_id (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageTypeModelsShippingPackageType, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPackageTypesShippingPackageTypeIdGetWithHttpInfo($shipping_package_type_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageTypeModelsShippingPackageType';
        $request = $this->restOrdersShippingPackageTypesShippingPackageTypeIdGetRequest($shipping_package_type_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageTypeModelsShippingPackageType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersShippingPackageTypesShippingPackageTypeIdGetAsync
     *
     * Get a shipping package type
     *
     * @param int $shipping_package_type_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPackageTypesShippingPackageTypeIdGetAsync($shipping_package_type_id)
    {
        return $this->restOrdersShippingPackageTypesShippingPackageTypeIdGetAsyncWithHttpInfo($shipping_package_type_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersShippingPackageTypesShippingPackageTypeIdGetAsyncWithHttpInfo
     *
     * Get a shipping package type
     *
     * @param int $shipping_package_type_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPackageTypesShippingPackageTypeIdGetAsyncWithHttpInfo($shipping_package_type_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageTypeModelsShippingPackageType';
        $request = $this->restOrdersShippingPackageTypesShippingPackageTypeIdGetRequest($shipping_package_type_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersShippingPackageTypesShippingPackageTypeIdGet'
     *
     * @param int $shipping_package_type_id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersShippingPackageTypesShippingPackageTypeIdGetRequest($shipping_package_type_id)
    {
        // verify the required parameter 'shipping_package_type_id' is set
        if ($shipping_package_type_id === null || (is_array($shipping_package_type_id) && count($shipping_package_type_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipping_package_type_id when calling restOrdersShippingPackageTypesShippingPackageTypeIdGet'
            );
        }

        $resourcePath = '/rest/orders/shipping/package_types/{shippingPackageTypeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($shipping_package_type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shippingPackageTypeId' . '}',
                ObjectSerializer::toPathValue($shipping_package_type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersShippingPackagesItemsIdDelete
     *
     * @param int $id id (required)
     *
     * @return PlentyRepositoriesModelsDeleteResponse
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPackagesItemsIdDelete($id)
    {
        list($response) = $this->restOrdersShippingPackagesItemsIdDeleteWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation restOrdersShippingPackagesItemsIdDeleteWithHttpInfo
     *
     * @param int $id (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyRepositoriesModelsDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPackagesItemsIdDeleteWithHttpInfo($id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyRepositoriesModelsDeleteResponse';
        $request = $this->restOrdersShippingPackagesItemsIdDeleteRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyRepositoriesModelsDeleteResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersShippingPackagesItemsIdDeleteAsync
     *
     *
     *
     * @param int $id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPackagesItemsIdDeleteAsync($id)
    {
        return $this->restOrdersShippingPackagesItemsIdDeleteAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersShippingPackagesItemsIdDeleteAsyncWithHttpInfo
     *
     *
     *
     * @param int $id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPackagesItemsIdDeleteAsyncWithHttpInfo($id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyRepositoriesModelsDeleteResponse';
        $request = $this->restOrdersShippingPackagesItemsIdDeleteRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersShippingPackagesItemsIdDelete'
     *
     * @param int $id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersShippingPackagesItemsIdDeleteRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling restOrdersShippingPackagesItemsIdDelete'
            );
        }

        $resourcePath = '/rest/orders/shipping/packages/items/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersShippingPackagesItemsIdPut
     *
     * @param int $id id (required)
     *
     * @return PlentyDataSimpleRestResponse
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPackagesItemsIdPut($id)
    {
        list($response) = $this->restOrdersShippingPackagesItemsIdPutWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation restOrdersShippingPackagesItemsIdPutWithHttpInfo
     *
     * @param int $id (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyDataSimpleRestResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPackagesItemsIdPutWithHttpInfo($id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyDataSimpleRestResponse';
        $request = $this->restOrdersShippingPackagesItemsIdPutRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyDataSimpleRestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersShippingPackagesItemsIdPutAsync
     *
     *
     *
     * @param int $id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPackagesItemsIdPutAsync($id)
    {
        return $this->restOrdersShippingPackagesItemsIdPutAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersShippingPackagesItemsIdPutAsyncWithHttpInfo
     *
     *
     *
     * @param int $id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPackagesItemsIdPutAsyncWithHttpInfo($id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyDataSimpleRestResponse';
        $request = $this->restOrdersShippingPackagesItemsIdPutRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersShippingPackagesItemsIdPut'
     *
     * @param int $id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersShippingPackagesItemsIdPutRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling restOrdersShippingPackagesItemsIdPut'
            );
        }

        $resourcePath = '/rest/orders/shipping/packages/items/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersShippingPackagesItemsPackageIdItemIdVariationIdDelete
     *
     * @param int $package_id package_id (required)
     * @param int $item_id item_id (required)
     * @param int $variation_id variation_id (required)
     *
     * @return PlentyRepositoriesModelsDeleteResponse
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPackagesItemsPackageIdItemIdVariationIdDelete($package_id, $item_id, $variation_id)
    {
        list($response) = $this->restOrdersShippingPackagesItemsPackageIdItemIdVariationIdDeleteWithHttpInfo($package_id, $item_id, $variation_id);
        return $response;
    }

    /**
     * Operation restOrdersShippingPackagesItemsPackageIdItemIdVariationIdDeleteWithHttpInfo
     *
     * @param int $package_id (required)
     * @param int $item_id (required)
     * @param int $variation_id (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyRepositoriesModelsDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPackagesItemsPackageIdItemIdVariationIdDeleteWithHttpInfo($package_id, $item_id, $variation_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyRepositoriesModelsDeleteResponse';
        $request = $this->restOrdersShippingPackagesItemsPackageIdItemIdVariationIdDeleteRequest($package_id, $item_id, $variation_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyRepositoriesModelsDeleteResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersShippingPackagesItemsPackageIdItemIdVariationIdDeleteAsync
     *
     *
     *
     * @param int $package_id (required)
     * @param int $item_id (required)
     * @param int $variation_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPackagesItemsPackageIdItemIdVariationIdDeleteAsync($package_id, $item_id, $variation_id)
    {
        return $this->restOrdersShippingPackagesItemsPackageIdItemIdVariationIdDeleteAsyncWithHttpInfo($package_id, $item_id, $variation_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersShippingPackagesItemsPackageIdItemIdVariationIdDeleteAsyncWithHttpInfo
     *
     *
     *
     * @param int $package_id (required)
     * @param int $item_id (required)
     * @param int $variation_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPackagesItemsPackageIdItemIdVariationIdDeleteAsyncWithHttpInfo($package_id, $item_id, $variation_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyRepositoriesModelsDeleteResponse';
        $request = $this->restOrdersShippingPackagesItemsPackageIdItemIdVariationIdDeleteRequest($package_id, $item_id, $variation_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersShippingPackagesItemsPackageIdItemIdVariationIdDelete'
     *
     * @param int $package_id (required)
     * @param int $item_id (required)
     * @param int $variation_id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersShippingPackagesItemsPackageIdItemIdVariationIdDeleteRequest($package_id, $item_id, $variation_id)
    {
        // verify the required parameter 'package_id' is set
        if ($package_id === null || (is_array($package_id) && count($package_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $package_id when calling restOrdersShippingPackagesItemsPackageIdItemIdVariationIdDelete'
            );
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $item_id when calling restOrdersShippingPackagesItemsPackageIdItemIdVariationIdDelete'
            );
        }
        // verify the required parameter 'variation_id' is set
        if ($variation_id === null || (is_array($variation_id) && count($variation_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $variation_id when calling restOrdersShippingPackagesItemsPackageIdItemIdVariationIdDelete'
            );
        }

        $resourcePath = '/rest/orders/shipping/packages/items/{packageId}/{itemId}/{variationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($package_id !== null) {
            $resourcePath = str_replace(
                '{' . 'packageId' . '}',
                ObjectSerializer::toPathValue($package_id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itemId' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }
        // path params
        if ($variation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'variationId' . '}',
                ObjectSerializer::toPathValue($variation_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersShippingPackagesItemsPackageIdItemIdVariationIdPut
     *
     * @param int $package_id package_id (required)
     * @param int $item_id item_id (required)
     * @param int $variation_id variation_id (required)
     *
     * @return PlentyDataSimpleRestResponse
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPackagesItemsPackageIdItemIdVariationIdPut($package_id, $item_id, $variation_id)
    {
        list($response) = $this->restOrdersShippingPackagesItemsPackageIdItemIdVariationIdPutWithHttpInfo($package_id, $item_id, $variation_id);
        return $response;
    }

    /**
     * Operation restOrdersShippingPackagesItemsPackageIdItemIdVariationIdPutWithHttpInfo
     *
     * @param int $package_id (required)
     * @param int $item_id (required)
     * @param int $variation_id (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyDataSimpleRestResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPackagesItemsPackageIdItemIdVariationIdPutWithHttpInfo($package_id, $item_id, $variation_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyDataSimpleRestResponse';
        $request = $this->restOrdersShippingPackagesItemsPackageIdItemIdVariationIdPutRequest($package_id, $item_id, $variation_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyDataSimpleRestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersShippingPackagesItemsPackageIdItemIdVariationIdPutAsync
     *
     *
     *
     * @param int $package_id (required)
     * @param int $item_id (required)
     * @param int $variation_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPackagesItemsPackageIdItemIdVariationIdPutAsync($package_id, $item_id, $variation_id)
    {
        return $this->restOrdersShippingPackagesItemsPackageIdItemIdVariationIdPutAsyncWithHttpInfo($package_id, $item_id, $variation_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersShippingPackagesItemsPackageIdItemIdVariationIdPutAsyncWithHttpInfo
     *
     *
     *
     * @param int $package_id (required)
     * @param int $item_id (required)
     * @param int $variation_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPackagesItemsPackageIdItemIdVariationIdPutAsyncWithHttpInfo($package_id, $item_id, $variation_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyDataSimpleRestResponse';
        $request = $this->restOrdersShippingPackagesItemsPackageIdItemIdVariationIdPutRequest($package_id, $item_id, $variation_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersShippingPackagesItemsPackageIdItemIdVariationIdPut'
     *
     * @param int $package_id (required)
     * @param int $item_id (required)
     * @param int $variation_id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersShippingPackagesItemsPackageIdItemIdVariationIdPutRequest($package_id, $item_id, $variation_id)
    {
        // verify the required parameter 'package_id' is set
        if ($package_id === null || (is_array($package_id) && count($package_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $package_id when calling restOrdersShippingPackagesItemsPackageIdItemIdVariationIdPut'
            );
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $item_id when calling restOrdersShippingPackagesItemsPackageIdItemIdVariationIdPut'
            );
        }
        // verify the required parameter 'variation_id' is set
        if ($variation_id === null || (is_array($variation_id) && count($variation_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $variation_id when calling restOrdersShippingPackagesItemsPackageIdItemIdVariationIdPut'
            );
        }

        $resourcePath = '/rest/orders/shipping/packages/items/{packageId}/{itemId}/{variationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($package_id !== null) {
            $resourcePath = str_replace(
                '{' . 'packageId' . '}',
                ObjectSerializer::toPathValue($package_id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itemId' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }
        // path params
        if ($variation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'variationId' . '}',
                ObjectSerializer::toPathValue($variation_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersShippingPackagesPackageIdItemsGet
     *
     * @param int $package_id package_id (required)
     *
     * @return PlentyModulesOrderShippingPackageModelsOrderShippingPackageItems
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPackagesPackageIdItemsGet($package_id)
    {
        list($response) = $this->restOrdersShippingPackagesPackageIdItemsGetWithHttpInfo($package_id);
        return $response;
    }

    /**
     * Operation restOrdersShippingPackagesPackageIdItemsGetWithHttpInfo
     *
     * @param int $package_id (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackageItems, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPackagesPackageIdItemsGetWithHttpInfo($package_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackageItems';
        $request = $this->restOrdersShippingPackagesPackageIdItemsGetRequest($package_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackageItems',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersShippingPackagesPackageIdItemsGetAsync
     *
     *
     *
     * @param int $package_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPackagesPackageIdItemsGetAsync($package_id)
    {
        return $this->restOrdersShippingPackagesPackageIdItemsGetAsyncWithHttpInfo($package_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersShippingPackagesPackageIdItemsGetAsyncWithHttpInfo
     *
     *
     *
     * @param int $package_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPackagesPackageIdItemsGetAsyncWithHttpInfo($package_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPackageModelsOrderShippingPackageItems';
        $request = $this->restOrdersShippingPackagesPackageIdItemsGetRequest($package_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersShippingPackagesPackageIdItemsGet'
     *
     * @param int $package_id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersShippingPackagesPackageIdItemsGetRequest($package_id)
    {
        // verify the required parameter 'package_id' is set
        if ($package_id === null || (is_array($package_id) && count($package_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $package_id when calling restOrdersShippingPackagesPackageIdItemsGet'
            );
        }

        $resourcePath = '/rest/orders/shipping/packages/{packageId}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($package_id !== null) {
            $resourcePath = str_replace(
                '{' . 'packageId' . '}',
                ObjectSerializer::toPathValue($package_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersShippingPackagesPackageIdItemsPost
     *
     * @param int $package_id package_id (required)
     *
     * @return Mixed[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPackagesPackageIdItemsPost($package_id)
    {
        list($response) = $this->restOrdersShippingPackagesPackageIdItemsPostWithHttpInfo($package_id);
        return $response;
    }

    /**
     * Operation restOrdersShippingPackagesPackageIdItemsPostWithHttpInfo
     *
     * @param int $package_id (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\Mixed[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPackagesPackageIdItemsPostWithHttpInfo($package_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\Mixed[]';
        $request = $this->restOrdersShippingPackagesPackageIdItemsPostRequest($package_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\Mixed[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersShippingPackagesPackageIdItemsPostAsync
     *
     *
     *
     * @param int $package_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPackagesPackageIdItemsPostAsync($package_id)
    {
        return $this->restOrdersShippingPackagesPackageIdItemsPostAsyncWithHttpInfo($package_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersShippingPackagesPackageIdItemsPostAsyncWithHttpInfo
     *
     *
     *
     * @param int $package_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPackagesPackageIdItemsPostAsyncWithHttpInfo($package_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\Mixed[]';
        $request = $this->restOrdersShippingPackagesPackageIdItemsPostRequest($package_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersShippingPackagesPackageIdItemsPost'
     *
     * @param int $package_id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersShippingPackagesPackageIdItemsPostRequest($package_id)
    {
        // verify the required parameter 'package_id' is set
        if ($package_id === null || (is_array($package_id) && count($package_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $package_id when calling restOrdersShippingPackagesPackageIdItemsPost'
            );
        }

        $resourcePath = '/rest/orders/shipping/packages/{packageId}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($package_id !== null) {
            $resourcePath = str_replace(
                '{' . 'packageId' . '}',
                ObjectSerializer::toPathValue($package_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersShippingPalletsGet
     *
     * @param string $order_id Filter that shows pallets from a specific order. (required)
     *
     * @return PlentyModulesOrderShippingPalletModelsOrderShippingPallet[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPalletsGet($order_id)
    {
        list($response) = $this->restOrdersShippingPalletsGetWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation restOrdersShippingPalletsGetWithHttpInfo
     *
     * @param string $order_id Filter that shows pallets from a specific order. (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPalletModelsOrderShippingPallet[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPalletsGetWithHttpInfo($order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPalletModelsOrderShippingPallet[]';
        $request = $this->restOrdersShippingPalletsGetRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPalletModelsOrderShippingPallet[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersShippingPalletsGetAsync
     *
     *
     *
     * @param string $order_id Filter that shows pallets from a specific order. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPalletsGetAsync($order_id)
    {
        return $this->restOrdersShippingPalletsGetAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersShippingPalletsGetAsyncWithHttpInfo
     *
     *
     *
     * @param string $order_id Filter that shows pallets from a specific order. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPalletsGetAsyncWithHttpInfo($order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPalletModelsOrderShippingPallet[]';
        $request = $this->restOrdersShippingPalletsGetRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersShippingPalletsGet'
     *
     * @param string $order_id Filter that shows pallets from a specific order. (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersShippingPalletsGetRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersShippingPalletsGet'
            );
        }

        $resourcePath = '/rest/orders/shipping/pallets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($order_id !== null) {
            $queryParams['orderId'] = ObjectSerializer::toQueryValue($order_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersShippingPalletsPalletIdDelete
     *
     * @param int $pallet_id pallet_id (required)
     * @param object $body body (optional)
     *
     * @return PlentyModulesOrderShippingPalletModelsOrderShippingPallet
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPalletsPalletIdDelete($pallet_id, $body = null)
    {
        list($response) = $this->restOrdersShippingPalletsPalletIdDeleteWithHttpInfo($pallet_id, $body);
        return $response;
    }

    /**
     * Operation restOrdersShippingPalletsPalletIdDeleteWithHttpInfo
     *
     * @param int $pallet_id (required)
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPalletModelsOrderShippingPallet, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPalletsPalletIdDeleteWithHttpInfo($pallet_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPalletModelsOrderShippingPallet';
        $request = $this->restOrdersShippingPalletsPalletIdDeleteRequest($pallet_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPalletModelsOrderShippingPallet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersShippingPalletsPalletIdDeleteAsync
     *
     *
     *
     * @param int $pallet_id (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPalletsPalletIdDeleteAsync($pallet_id, $body = null)
    {
        return $this->restOrdersShippingPalletsPalletIdDeleteAsyncWithHttpInfo($pallet_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersShippingPalletsPalletIdDeleteAsyncWithHttpInfo
     *
     *
     *
     * @param int $pallet_id (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPalletsPalletIdDeleteAsyncWithHttpInfo($pallet_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPalletModelsOrderShippingPallet';
        $request = $this->restOrdersShippingPalletsPalletIdDeleteRequest($pallet_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersShippingPalletsPalletIdDelete'
     *
     * @param int $pallet_id (required)
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersShippingPalletsPalletIdDeleteRequest($pallet_id, $body = null)
    {
        // verify the required parameter 'pallet_id' is set
        if ($pallet_id === null || (is_array($pallet_id) && count($pallet_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $pallet_id when calling restOrdersShippingPalletsPalletIdDelete'
            );
        }

        $resourcePath = '/rest/orders/shipping/pallets/{palletId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($pallet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'palletId' . '}',
                ObjectSerializer::toPathValue($pallet_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersShippingPalletsPalletIdGet
     *
     * @param int $pallet_id The ID of the pallet (required)
     * @param int $pallet_id2 pallet_id2 (required)
     *
     * @return PlentyModulesOrderShippingPalletModelsOrderShippingPallet
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPalletsPalletIdGet($pallet_id, $pallet_id2)
    {
        list($response) = $this->restOrdersShippingPalletsPalletIdGetWithHttpInfo($pallet_id, $pallet_id2);
        return $response;
    }

    /**
     * Operation restOrdersShippingPalletsPalletIdGetWithHttpInfo
     *
     * @param int $pallet_id The ID of the pallet (required)
     * @param int $pallet_id2 (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPalletModelsOrderShippingPallet, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPalletsPalletIdGetWithHttpInfo($pallet_id, $pallet_id2)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPalletModelsOrderShippingPallet';
        $request = $this->restOrdersShippingPalletsPalletIdGetRequest($pallet_id, $pallet_id2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPalletModelsOrderShippingPallet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersShippingPalletsPalletIdGetAsync
     *
     *
     *
     * @param int $pallet_id The ID of the pallet (required)
     * @param int $pallet_id2 (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPalletsPalletIdGetAsync($pallet_id, $pallet_id2)
    {
        return $this->restOrdersShippingPalletsPalletIdGetAsyncWithHttpInfo($pallet_id, $pallet_id2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersShippingPalletsPalletIdGetAsyncWithHttpInfo
     *
     *
     *
     * @param int $pallet_id The ID of the pallet (required)
     * @param int $pallet_id2 (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPalletsPalletIdGetAsyncWithHttpInfo($pallet_id, $pallet_id2)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPalletModelsOrderShippingPallet';
        $request = $this->restOrdersShippingPalletsPalletIdGetRequest($pallet_id, $pallet_id2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersShippingPalletsPalletIdGet'
     *
     * @param int $pallet_id The ID of the pallet (required)
     * @param int $pallet_id2 (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersShippingPalletsPalletIdGetRequest($pallet_id, $pallet_id2)
    {
        // verify the required parameter 'pallet_id' is set
        if ($pallet_id === null || (is_array($pallet_id) && count($pallet_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $pallet_id when calling restOrdersShippingPalletsPalletIdGet'
            );
        }
        // verify the required parameter 'pallet_id2' is set
        if ($pallet_id2 === null || (is_array($pallet_id2) && count($pallet_id2) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $pallet_id2 when calling restOrdersShippingPalletsPalletIdGet'
            );
        }

        $resourcePath = '/rest/orders/shipping/pallets/{palletId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pallet_id !== null) {
            $queryParams['$palletId'] = ObjectSerializer::toQueryValue($pallet_id);
        }

        // path params
        if ($pallet_id2 !== null) {
            $resourcePath = str_replace(
                '{' . 'palletId' . '}',
                ObjectSerializer::toPathValue($pallet_id2),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersShippingPalletsPalletIdPut
     *
     * @param int $pallet_id pallet_id (required)
     * @param object $body body (optional)
     *
     * @return PlentyModulesOrderShippingPalletModelsOrderShippingPallet
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPalletsPalletIdPut($pallet_id, $body = null)
    {
        list($response) = $this->restOrdersShippingPalletsPalletIdPutWithHttpInfo($pallet_id, $body);
        return $response;
    }

    /**
     * Operation restOrdersShippingPalletsPalletIdPutWithHttpInfo
     *
     * @param int $pallet_id (required)
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPalletModelsOrderShippingPallet, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPalletsPalletIdPutWithHttpInfo($pallet_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPalletModelsOrderShippingPallet';
        $request = $this->restOrdersShippingPalletsPalletIdPutRequest($pallet_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPalletModelsOrderShippingPallet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersShippingPalletsPalletIdPutAsync
     *
     *
     *
     * @param int $pallet_id (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPalletsPalletIdPutAsync($pallet_id, $body = null)
    {
        return $this->restOrdersShippingPalletsPalletIdPutAsyncWithHttpInfo($pallet_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersShippingPalletsPalletIdPutAsyncWithHttpInfo
     *
     *
     *
     * @param int $pallet_id (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPalletsPalletIdPutAsyncWithHttpInfo($pallet_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPalletModelsOrderShippingPallet';
        $request = $this->restOrdersShippingPalletsPalletIdPutRequest($pallet_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersShippingPalletsPalletIdPut'
     *
     * @param int $pallet_id (required)
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersShippingPalletsPalletIdPutRequest($pallet_id, $body = null)
    {
        // verify the required parameter 'pallet_id' is set
        if ($pallet_id === null || (is_array($pallet_id) && count($pallet_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $pallet_id when calling restOrdersShippingPalletsPalletIdPut'
            );
        }

        $resourcePath = '/rest/orders/shipping/pallets/{palletId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($pallet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'palletId' . '}',
                ObjectSerializer::toPathValue($pallet_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersShippingPalletsPost
     *
     * @param object $body body (optional)
     *
     * @return PlentyModulesOrderShippingPalletModelsOrderShippingPallet
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPalletsPost($body = null)
    {
        list($response) = $this->restOrdersShippingPalletsPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation restOrdersShippingPalletsPostWithHttpInfo
     *
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPalletModelsOrderShippingPallet, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPalletsPostWithHttpInfo($body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPalletModelsOrderShippingPallet';
        $request = $this->restOrdersShippingPalletsPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPalletModelsOrderShippingPallet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersShippingPalletsPostAsync
     *
     *
     *
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPalletsPostAsync($body = null)
    {
        return $this->restOrdersShippingPalletsPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersShippingPalletsPostAsyncWithHttpInfo
     *
     *
     *
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPalletsPostAsyncWithHttpInfo($body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingPalletModelsOrderShippingPallet';
        $request = $this->restOrdersShippingPalletsPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersShippingPalletsPost'
     *
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersShippingPalletsPostRequest($body = null)
    {

        $resourcePath = '/rest/orders/shipping/pallets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersShippingParcelServiceRegionsParcelServiceRegionIdGet
     *
     * Get an  order parcel service region
     *
     * @param int $parcel_service_region_id The ID of the parcel service region (required)
     * @param int $parcel_service_region_id2 parcel_service_region_id2 (required)
     * @param int $columns The properties to be loaded (optional)
     *
     * @return PlentyModulesOrderShippingParcelServiceRegionModelsParcelServiceRegion
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingParcelServiceRegionsParcelServiceRegionIdGet($parcel_service_region_id, $parcel_service_region_id2, $columns = null)
    {
        list($response) = $this->restOrdersShippingParcelServiceRegionsParcelServiceRegionIdGetWithHttpInfo($parcel_service_region_id, $parcel_service_region_id2, $columns);
        return $response;
    }

    /**
     * Operation restOrdersShippingParcelServiceRegionsParcelServiceRegionIdGetWithHttpInfo
     *
     * Get an  order parcel service region
     *
     * @param int $parcel_service_region_id The ID of the parcel service region (required)
     * @param int $parcel_service_region_id2 (required)
     * @param int $columns The properties to be loaded (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingParcelServiceRegionModelsParcelServiceRegion, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingParcelServiceRegionsParcelServiceRegionIdGetWithHttpInfo($parcel_service_region_id, $parcel_service_region_id2, $columns = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingParcelServiceRegionModelsParcelServiceRegion';
        $request = $this->restOrdersShippingParcelServiceRegionsParcelServiceRegionIdGetRequest($parcel_service_region_id, $parcel_service_region_id2, $columns);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingParcelServiceRegionModelsParcelServiceRegion',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersShippingParcelServiceRegionsParcelServiceRegionIdGetAsync
     *
     * Get an  order parcel service region
     *
     * @param int $parcel_service_region_id The ID of the parcel service region (required)
     * @param int $parcel_service_region_id2 (required)
     * @param int $columns The properties to be loaded (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingParcelServiceRegionsParcelServiceRegionIdGetAsync($parcel_service_region_id, $parcel_service_region_id2, $columns = null)
    {
        return $this->restOrdersShippingParcelServiceRegionsParcelServiceRegionIdGetAsyncWithHttpInfo($parcel_service_region_id, $parcel_service_region_id2, $columns)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersShippingParcelServiceRegionsParcelServiceRegionIdGetAsyncWithHttpInfo
     *
     * Get an  order parcel service region
     *
     * @param int $parcel_service_region_id The ID of the parcel service region (required)
     * @param int $parcel_service_region_id2 (required)
     * @param int $columns The properties to be loaded (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingParcelServiceRegionsParcelServiceRegionIdGetAsyncWithHttpInfo($parcel_service_region_id, $parcel_service_region_id2, $columns = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingParcelServiceRegionModelsParcelServiceRegion';
        $request = $this->restOrdersShippingParcelServiceRegionsParcelServiceRegionIdGetRequest($parcel_service_region_id, $parcel_service_region_id2, $columns);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersShippingParcelServiceRegionsParcelServiceRegionIdGet'
     *
     * @param int $parcel_service_region_id The ID of the parcel service region (required)
     * @param int $parcel_service_region_id2 (required)
     * @param int $columns The properties to be loaded (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersShippingParcelServiceRegionsParcelServiceRegionIdGetRequest($parcel_service_region_id, $parcel_service_region_id2, $columns = null)
    {
        // verify the required parameter 'parcel_service_region_id' is set
        if ($parcel_service_region_id === null || (is_array($parcel_service_region_id) && count($parcel_service_region_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $parcel_service_region_id when calling restOrdersShippingParcelServiceRegionsParcelServiceRegionIdGet'
            );
        }
        // verify the required parameter 'parcel_service_region_id2' is set
        if ($parcel_service_region_id2 === null || (is_array($parcel_service_region_id2) && count($parcel_service_region_id2) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $parcel_service_region_id2 when calling restOrdersShippingParcelServiceRegionsParcelServiceRegionIdGet'
            );
        }

        $resourcePath = '/rest/orders/shipping/parcel_service_regions/{parcelServiceRegionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($parcel_service_region_id !== null) {
            $queryParams['$parcelServiceRegionId'] = ObjectSerializer::toQueryValue($parcel_service_region_id);
        }
        // query params
        if ($columns !== null) {
            $queryParams['columns'] = ObjectSerializer::toQueryValue($columns);
        }

        // path params
        if ($parcel_service_region_id2 !== null) {
            $resourcePath = str_replace(
                '{' . 'parcelServiceRegionId' . '}',
                ObjectSerializer::toPathValue($parcel_service_region_id2),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersShippingParcelsPreviewLanguageGet
     *
     * Get a preview list for parcel services.
     *
     * @param string $language language (required)
     *
     * @return Mixed[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingParcelsPreviewLanguageGet($language)
    {
        list($response) = $this->restOrdersShippingParcelsPreviewLanguageGetWithHttpInfo($language);
        return $response;
    }

    /**
     * Operation restOrdersShippingParcelsPreviewLanguageGetWithHttpInfo
     *
     * Get a preview list for parcel services.
     *
     * @param string $language (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\Mixed[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingParcelsPreviewLanguageGetWithHttpInfo($language)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\Mixed[]';
        $request = $this->restOrdersShippingParcelsPreviewLanguageGetRequest($language);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\Mixed[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersShippingParcelsPreviewLanguageGetAsync
     *
     * Get a preview list for parcel services.
     *
     * @param string $language (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingParcelsPreviewLanguageGetAsync($language)
    {
        return $this->restOrdersShippingParcelsPreviewLanguageGetAsyncWithHttpInfo($language)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersShippingParcelsPreviewLanguageGetAsyncWithHttpInfo
     *
     * Get a preview list for parcel services.
     *
     * @param string $language (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingParcelsPreviewLanguageGetAsyncWithHttpInfo($language)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\Mixed[]';
        $request = $this->restOrdersShippingParcelsPreviewLanguageGetRequest($language);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersShippingParcelsPreviewLanguageGet'
     *
     * @param string $language (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersShippingParcelsPreviewLanguageGetRequest($language)
    {
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $language when calling restOrdersShippingParcelsPreviewLanguageGet'
            );
        }

        $resourcePath = '/rest/orders/shipping/parcels/preview/{language?}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersShippingPresetsGet
     *
     * List shipping profiles
     *
     * @param int $columns The attributes to be loaded in the shipping profile (optional)
     * @param string $parcel_service_name Filter that restricts the search result to parcel service presets with a specified service name (e.g. &#x27;DHL&#x27; for DHL) (optional)
     * @param string $shipping_service_provider Filter that restricts the search result to a shipping service provider (optional)
     * @param string $with The name of an relation to the preset. The following parameter is available: parcelServiceRegion, parcelServiceRegionConstraint, parcelServicePresetNames and parcelServiceNames. (optional)
     * @param string $updated_at_before Filter that restricts the search result to presets that were updated before a specific date. Possible formats: yyyy-mm-dd or yyyy-mm-dd hh:mm:ss (optional)
     * @param string $updated_at_after Filter that restricts the search result to presets that were updated after a specific date. Possible formats: yyyy-mm-dd or yyyy-mm-dd hh:mm:ss (optional)
     *
     * @return PlentyModulesOrderShippingParcelServiceModelsParcelServicePreset[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPresetsGet($columns = null, $parcel_service_name = null, $shipping_service_provider = null, $with = null, $updated_at_before = null, $updated_at_after = null)
    {
        list($response) = $this->restOrdersShippingPresetsGetWithHttpInfo($columns, $parcel_service_name, $shipping_service_provider, $with, $updated_at_before, $updated_at_after);
        return $response;
    }

    /**
     * Operation restOrdersShippingPresetsGetWithHttpInfo
     *
     * List shipping profiles
     *
     * @param int $columns The attributes to be loaded in the shipping profile (optional)
     * @param string $parcel_service_name Filter that restricts the search result to parcel service presets with a specified service name (e.g. &#x27;DHL&#x27; for DHL) (optional)
     * @param string $shipping_service_provider Filter that restricts the search result to a shipping service provider (optional)
     * @param string $with The name of an relation to the preset. The following parameter is available: parcelServiceRegion, parcelServiceRegionConstraint, parcelServicePresetNames and parcelServiceNames. (optional)
     * @param string $updated_at_before Filter that restricts the search result to presets that were updated before a specific date. Possible formats: yyyy-mm-dd or yyyy-mm-dd hh:mm:ss (optional)
     * @param string $updated_at_after Filter that restricts the search result to presets that were updated after a specific date. Possible formats: yyyy-mm-dd or yyyy-mm-dd hh:mm:ss (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingParcelServiceModelsParcelServicePreset[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPresetsGetWithHttpInfo($columns = null, $parcel_service_name = null, $shipping_service_provider = null, $with = null, $updated_at_before = null, $updated_at_after = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingParcelServiceModelsParcelServicePreset[]';
        $request = $this->restOrdersShippingPresetsGetRequest($columns, $parcel_service_name, $shipping_service_provider, $with, $updated_at_before, $updated_at_after);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingParcelServiceModelsParcelServicePreset[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersShippingPresetsGetAsync
     *
     * List shipping profiles
     *
     * @param int $columns The attributes to be loaded in the shipping profile (optional)
     * @param string $parcel_service_name Filter that restricts the search result to parcel service presets with a specified service name (e.g. &#x27;DHL&#x27; for DHL) (optional)
     * @param string $shipping_service_provider Filter that restricts the search result to a shipping service provider (optional)
     * @param string $with The name of an relation to the preset. The following parameter is available: parcelServiceRegion, parcelServiceRegionConstraint, parcelServicePresetNames and parcelServiceNames. (optional)
     * @param string $updated_at_before Filter that restricts the search result to presets that were updated before a specific date. Possible formats: yyyy-mm-dd or yyyy-mm-dd hh:mm:ss (optional)
     * @param string $updated_at_after Filter that restricts the search result to presets that were updated after a specific date. Possible formats: yyyy-mm-dd or yyyy-mm-dd hh:mm:ss (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPresetsGetAsync($columns = null, $parcel_service_name = null, $shipping_service_provider = null, $with = null, $updated_at_before = null, $updated_at_after = null)
    {
        return $this->restOrdersShippingPresetsGetAsyncWithHttpInfo($columns, $parcel_service_name, $shipping_service_provider, $with, $updated_at_before, $updated_at_after)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersShippingPresetsGetAsyncWithHttpInfo
     *
     * List shipping profiles
     *
     * @param int $columns The attributes to be loaded in the shipping profile (optional)
     * @param string $parcel_service_name Filter that restricts the search result to parcel service presets with a specified service name (e.g. &#x27;DHL&#x27; for DHL) (optional)
     * @param string $shipping_service_provider Filter that restricts the search result to a shipping service provider (optional)
     * @param string $with The name of an relation to the preset. The following parameter is available: parcelServiceRegion, parcelServiceRegionConstraint, parcelServicePresetNames and parcelServiceNames. (optional)
     * @param string $updated_at_before Filter that restricts the search result to presets that were updated before a specific date. Possible formats: yyyy-mm-dd or yyyy-mm-dd hh:mm:ss (optional)
     * @param string $updated_at_after Filter that restricts the search result to presets that were updated after a specific date. Possible formats: yyyy-mm-dd or yyyy-mm-dd hh:mm:ss (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPresetsGetAsyncWithHttpInfo($columns = null, $parcel_service_name = null, $shipping_service_provider = null, $with = null, $updated_at_before = null, $updated_at_after = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingParcelServiceModelsParcelServicePreset[]';
        $request = $this->restOrdersShippingPresetsGetRequest($columns, $parcel_service_name, $shipping_service_provider, $with, $updated_at_before, $updated_at_after);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersShippingPresetsGet'
     *
     * @param int $columns The attributes to be loaded in the shipping profile (optional)
     * @param string $parcel_service_name Filter that restricts the search result to parcel service presets with a specified service name (e.g. &#x27;DHL&#x27; for DHL) (optional)
     * @param string $shipping_service_provider Filter that restricts the search result to a shipping service provider (optional)
     * @param string $with The name of an relation to the preset. The following parameter is available: parcelServiceRegion, parcelServiceRegionConstraint, parcelServicePresetNames and parcelServiceNames. (optional)
     * @param string $updated_at_before Filter that restricts the search result to presets that were updated before a specific date. Possible formats: yyyy-mm-dd or yyyy-mm-dd hh:mm:ss (optional)
     * @param string $updated_at_after Filter that restricts the search result to presets that were updated after a specific date. Possible formats: yyyy-mm-dd or yyyy-mm-dd hh:mm:ss (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersShippingPresetsGetRequest($columns = null, $parcel_service_name = null, $shipping_service_provider = null, $with = null, $updated_at_before = null, $updated_at_after = null)
    {

        $resourcePath = '/rest/orders/shipping/presets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($columns !== null) {
            $queryParams['columns'] = ObjectSerializer::toQueryValue($columns);
        }
        // query params
        if ($parcel_service_name !== null) {
            $queryParams['parcelServiceName'] = ObjectSerializer::toQueryValue($parcel_service_name);
        }
        // query params
        if ($shipping_service_provider !== null) {
            $queryParams['shippingServiceProvider'] = ObjectSerializer::toQueryValue($shipping_service_provider);
        }
        // query params
        if ($with !== null) {
            $queryParams['with'] = ObjectSerializer::toQueryValue($with);
        }
        // query params
        if ($updated_at_before !== null) {
            $queryParams['updatedAtBefore'] = ObjectSerializer::toQueryValue($updated_at_before);
        }
        // query params
        if ($updated_at_after !== null) {
            $queryParams['updatedAtAfter'] = ObjectSerializer::toQueryValue($updated_at_after);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersShippingPresetsPresetIdGet
     *
     * Get a shipping profile
     *
     * @param int $preset_id The ID of the shipping profile (required)
     * @param int $columns The attributes to be loaded in the shipping profile (optional)
     *
     * @return PlentyModulesOrderShippingParcelServiceModelsParcelServicePreset
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPresetsPresetIdGet($preset_id, $columns = null)
    {
        list($response) = $this->restOrdersShippingPresetsPresetIdGetWithHttpInfo($preset_id, $columns);
        return $response;
    }

    /**
     * Operation restOrdersShippingPresetsPresetIdGetWithHttpInfo
     *
     * Get a shipping profile
     *
     * @param int $preset_id The ID of the shipping profile (required)
     * @param int $columns The attributes to be loaded in the shipping profile (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingParcelServiceModelsParcelServicePreset, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPresetsPresetIdGetWithHttpInfo($preset_id, $columns = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingParcelServiceModelsParcelServicePreset';
        $request = $this->restOrdersShippingPresetsPresetIdGetRequest($preset_id, $columns);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingParcelServiceModelsParcelServicePreset',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersShippingPresetsPresetIdGetAsync
     *
     * Get a shipping profile
     *
     * @param int $preset_id The ID of the shipping profile (required)
     * @param int $columns The attributes to be loaded in the shipping profile (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPresetsPresetIdGetAsync($preset_id, $columns = null)
    {
        return $this->restOrdersShippingPresetsPresetIdGetAsyncWithHttpInfo($preset_id, $columns)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersShippingPresetsPresetIdGetAsyncWithHttpInfo
     *
     * Get a shipping profile
     *
     * @param int $preset_id The ID of the shipping profile (required)
     * @param int $columns The attributes to be loaded in the shipping profile (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPresetsPresetIdGetAsyncWithHttpInfo($preset_id, $columns = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingParcelServiceModelsParcelServicePreset';
        $request = $this->restOrdersShippingPresetsPresetIdGetRequest($preset_id, $columns);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersShippingPresetsPresetIdGet'
     *
     * @param int $preset_id The ID of the shipping profile (required)
     * @param int $columns The attributes to be loaded in the shipping profile (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersShippingPresetsPresetIdGetRequest($preset_id, $columns = null)
    {
        // verify the required parameter 'preset_id' is set
        if ($preset_id === null || (is_array($preset_id) && count($preset_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $preset_id when calling restOrdersShippingPresetsPresetIdGet'
            );
        }

        $resourcePath = '/rest/orders/shipping/presets/{presetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($columns !== null) {
            $queryParams['columns'] = ObjectSerializer::toQueryValue($columns);
        }

        // path params
        if ($preset_id !== null) {
            $resourcePath = str_replace(
                '{' . 'presetId' . '}',
                ObjectSerializer::toPathValue($preset_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersShippingPresetsPresetIdParcelServiceRegionsGet
     *
     * Lists parcel service regions by parcel service preset id.
     *
     * @param int $parcel_service_preset_id The ID of the parcel service preset (required)
     * @param int $preset_id preset_id (required)
     * @param int $columns The properties to be loaded (optional)
     *
     * @return PlentyModulesOrderShippingParcelServiceRegionModelsParcelServiceRegion[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPresetsPresetIdParcelServiceRegionsGet($parcel_service_preset_id, $preset_id, $columns = null)
    {
        list($response) = $this->restOrdersShippingPresetsPresetIdParcelServiceRegionsGetWithHttpInfo($parcel_service_preset_id, $preset_id, $columns);
        return $response;
    }

    /**
     * Operation restOrdersShippingPresetsPresetIdParcelServiceRegionsGetWithHttpInfo
     *
     * Lists parcel service regions by parcel service preset id.
     *
     * @param int $parcel_service_preset_id The ID of the parcel service preset (required)
     * @param int $preset_id (required)
     * @param int $columns The properties to be loaded (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingParcelServiceRegionModelsParcelServiceRegion[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPresetsPresetIdParcelServiceRegionsGetWithHttpInfo($parcel_service_preset_id, $preset_id, $columns = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingParcelServiceRegionModelsParcelServiceRegion[]';
        $request = $this->restOrdersShippingPresetsPresetIdParcelServiceRegionsGetRequest($parcel_service_preset_id, $preset_id, $columns);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingParcelServiceRegionModelsParcelServiceRegion[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersShippingPresetsPresetIdParcelServiceRegionsGetAsync
     *
     * Lists parcel service regions by parcel service preset id.
     *
     * @param int $parcel_service_preset_id The ID of the parcel service preset (required)
     * @param int $preset_id (required)
     * @param int $columns The properties to be loaded (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPresetsPresetIdParcelServiceRegionsGetAsync($parcel_service_preset_id, $preset_id, $columns = null)
    {
        return $this->restOrdersShippingPresetsPresetIdParcelServiceRegionsGetAsyncWithHttpInfo($parcel_service_preset_id, $preset_id, $columns)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersShippingPresetsPresetIdParcelServiceRegionsGetAsyncWithHttpInfo
     *
     * Lists parcel service regions by parcel service preset id.
     *
     * @param int $parcel_service_preset_id The ID of the parcel service preset (required)
     * @param int $preset_id (required)
     * @param int $columns The properties to be loaded (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPresetsPresetIdParcelServiceRegionsGetAsyncWithHttpInfo($parcel_service_preset_id, $preset_id, $columns = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingParcelServiceRegionModelsParcelServiceRegion[]';
        $request = $this->restOrdersShippingPresetsPresetIdParcelServiceRegionsGetRequest($parcel_service_preset_id, $preset_id, $columns);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersShippingPresetsPresetIdParcelServiceRegionsGet'
     *
     * @param int $parcel_service_preset_id The ID of the parcel service preset (required)
     * @param int $preset_id (required)
     * @param int $columns The properties to be loaded (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersShippingPresetsPresetIdParcelServiceRegionsGetRequest($parcel_service_preset_id, $preset_id, $columns = null)
    {
        // verify the required parameter 'parcel_service_preset_id' is set
        if ($parcel_service_preset_id === null || (is_array($parcel_service_preset_id) && count($parcel_service_preset_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $parcel_service_preset_id when calling restOrdersShippingPresetsPresetIdParcelServiceRegionsGet'
            );
        }
        // verify the required parameter 'preset_id' is set
        if ($preset_id === null || (is_array($preset_id) && count($preset_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $preset_id when calling restOrdersShippingPresetsPresetIdParcelServiceRegionsGet'
            );
        }

        $resourcePath = '/rest/orders/shipping/presets/{presetId}/parcel_service_regions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($parcel_service_preset_id !== null) {
            $queryParams['$parcelServicePresetId'] = ObjectSerializer::toQueryValue($parcel_service_preset_id);
        }
        // query params
        if ($columns !== null) {
            $queryParams['columns'] = ObjectSerializer::toQueryValue($columns);
        }

        // path params
        if ($preset_id !== null) {
            $resourcePath = str_replace(
                '{' . 'presetId' . '}',
                ObjectSerializer::toPathValue($preset_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersShippingPresetsPreviewLanguageGet
     *
     * Get a preview list for parcel service presets.
     *
     * @param string $language language (required)
     *
     * @return Mixed[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPresetsPreviewLanguageGet($language)
    {
        list($response) = $this->restOrdersShippingPresetsPreviewLanguageGetWithHttpInfo($language);
        return $response;
    }

    /**
     * Operation restOrdersShippingPresetsPreviewLanguageGetWithHttpInfo
     *
     * Get a preview list for parcel service presets.
     *
     * @param string $language (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\Mixed[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingPresetsPreviewLanguageGetWithHttpInfo($language)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\Mixed[]';
        $request = $this->restOrdersShippingPresetsPreviewLanguageGetRequest($language);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\Mixed[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersShippingPresetsPreviewLanguageGetAsync
     *
     * Get a preview list for parcel service presets.
     *
     * @param string $language (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPresetsPreviewLanguageGetAsync($language)
    {
        return $this->restOrdersShippingPresetsPreviewLanguageGetAsyncWithHttpInfo($language)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersShippingPresetsPreviewLanguageGetAsyncWithHttpInfo
     *
     * Get a preview list for parcel service presets.
     *
     * @param string $language (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingPresetsPreviewLanguageGetAsyncWithHttpInfo($language)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\Mixed[]';
        $request = $this->restOrdersShippingPresetsPreviewLanguageGetRequest($language);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersShippingPresetsPreviewLanguageGet'
     *
     * @param string $language (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersShippingPresetsPreviewLanguageGetRequest($language)
    {
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $language when calling restOrdersShippingPresetsPreviewLanguageGet'
            );
        }

        $resourcePath = '/rest/orders/shipping/presets/preview/{language?}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersShippingReturnsReturnsServiceProvidersGet
     *
     * @param int $is_plugin Possible values are 1 (true), 0 (false) (optional)
     * @param int $plugin_id The id of the plugin. (optional)
     *
     * @return object
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingReturnsReturnsServiceProvidersGet($is_plugin = null, $plugin_id = null)
    {
        list($response) = $this->restOrdersShippingReturnsReturnsServiceProvidersGetWithHttpInfo($is_plugin, $plugin_id);
        return $response;
    }

    /**
     * Operation restOrdersShippingReturnsReturnsServiceProvidersGetWithHttpInfo
     *
     * @param int $is_plugin Possible values are 1 (true), 0 (false) (optional)
     * @param int $plugin_id The id of the plugin. (optional)
     *
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingReturnsReturnsServiceProvidersGetWithHttpInfo($is_plugin = null, $plugin_id = null)
    {
        $returnType = 'object';
        $request = $this->restOrdersShippingReturnsReturnsServiceProvidersGetRequest($is_plugin, $plugin_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersShippingReturnsReturnsServiceProvidersGetAsync
     *
     *
     *
     * @param int $is_plugin Possible values are 1 (true), 0 (false) (optional)
     * @param int $plugin_id The id of the plugin. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingReturnsReturnsServiceProvidersGetAsync($is_plugin = null, $plugin_id = null)
    {
        return $this->restOrdersShippingReturnsReturnsServiceProvidersGetAsyncWithHttpInfo($is_plugin, $plugin_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersShippingReturnsReturnsServiceProvidersGetAsyncWithHttpInfo
     *
     *
     *
     * @param int $is_plugin Possible values are 1 (true), 0 (false) (optional)
     * @param int $plugin_id The id of the plugin. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingReturnsReturnsServiceProvidersGetAsyncWithHttpInfo($is_plugin = null, $plugin_id = null)
    {
        $returnType = 'object';
        $request = $this->restOrdersShippingReturnsReturnsServiceProvidersGetRequest($is_plugin, $plugin_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersShippingReturnsReturnsServiceProvidersGet'
     *
     * @param int $is_plugin Possible values are 1 (true), 0 (false) (optional)
     * @param int $plugin_id The id of the plugin. (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersShippingReturnsReturnsServiceProvidersGetRequest($is_plugin = null, $plugin_id = null)
    {

        $resourcePath = '/rest/orders/shipping/returns/returns_service_providers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($is_plugin !== null) {
            $queryParams['isPlugin'] = ObjectSerializer::toQueryValue($is_plugin);
        }
        // query params
        if ($plugin_id !== null) {
            $queryParams['pluginId'] = ObjectSerializer::toQueryValue($plugin_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersShippingReturnsReturnsServiceProvidersPluginsGet
     *
     * List shipping service provider plugins
     *
     *
     * @return Mixed[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingReturnsReturnsServiceProvidersPluginsGet()
    {
        list($response) = $this->restOrdersShippingReturnsReturnsServiceProvidersPluginsGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation restOrdersShippingReturnsReturnsServiceProvidersPluginsGetWithHttpInfo
     *
     * List shipping service provider plugins
     *
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\Mixed[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingReturnsReturnsServiceProvidersPluginsGetWithHttpInfo()
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\Mixed[]';
        $request = $this->restOrdersShippingReturnsReturnsServiceProvidersPluginsGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\Mixed[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersShippingReturnsReturnsServiceProvidersPluginsGetAsync
     *
     * List shipping service provider plugins
     *
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingReturnsReturnsServiceProvidersPluginsGetAsync()
    {
        return $this->restOrdersShippingReturnsReturnsServiceProvidersPluginsGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersShippingReturnsReturnsServiceProvidersPluginsGetAsyncWithHttpInfo
     *
     * List shipping service provider plugins
     *
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingReturnsReturnsServiceProvidersPluginsGetAsyncWithHttpInfo()
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\Mixed[]';
        $request = $this->restOrdersShippingReturnsReturnsServiceProvidersPluginsGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersShippingReturnsReturnsServiceProvidersPluginsGet'
     *
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersShippingReturnsReturnsServiceProvidersPluginsGetRequest()
    {

        $resourcePath = '/rest/orders/shipping/returns/returns_service_providers/plugins';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersShippingReturnsReturnsServiceProvidersProviderIdGet
     *
     * @param int $provider_id The returns service provider id. (required)
     * @param int $provider_id2 provider_id2 (required)
     *
     * @return PlentyModulesOrderShippingReturnsModelsReturnsServiceProvider
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingReturnsReturnsServiceProvidersProviderIdGet($provider_id, $provider_id2)
    {
        list($response) = $this->restOrdersShippingReturnsReturnsServiceProvidersProviderIdGetWithHttpInfo($provider_id, $provider_id2);
        return $response;
    }

    /**
     * Operation restOrdersShippingReturnsReturnsServiceProvidersProviderIdGetWithHttpInfo
     *
     * @param int $provider_id The returns service provider id. (required)
     * @param int $provider_id2 (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingReturnsModelsReturnsServiceProvider, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingReturnsReturnsServiceProvidersProviderIdGetWithHttpInfo($provider_id, $provider_id2)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingReturnsModelsReturnsServiceProvider';
        $request = $this->restOrdersShippingReturnsReturnsServiceProvidersProviderIdGetRequest($provider_id, $provider_id2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingReturnsModelsReturnsServiceProvider',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersShippingReturnsReturnsServiceProvidersProviderIdGetAsync
     *
     *
     *
     * @param int $provider_id The returns service provider id. (required)
     * @param int $provider_id2 (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingReturnsReturnsServiceProvidersProviderIdGetAsync($provider_id, $provider_id2)
    {
        return $this->restOrdersShippingReturnsReturnsServiceProvidersProviderIdGetAsyncWithHttpInfo($provider_id, $provider_id2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersShippingReturnsReturnsServiceProvidersProviderIdGetAsyncWithHttpInfo
     *
     *
     *
     * @param int $provider_id The returns service provider id. (required)
     * @param int $provider_id2 (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingReturnsReturnsServiceProvidersProviderIdGetAsyncWithHttpInfo($provider_id, $provider_id2)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingReturnsModelsReturnsServiceProvider';
        $request = $this->restOrdersShippingReturnsReturnsServiceProvidersProviderIdGetRequest($provider_id, $provider_id2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersShippingReturnsReturnsServiceProvidersProviderIdGet'
     *
     * @param int $provider_id The returns service provider id. (required)
     * @param int $provider_id2 (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersShippingReturnsReturnsServiceProvidersProviderIdGetRequest($provider_id, $provider_id2)
    {
        // verify the required parameter 'provider_id' is set
        if ($provider_id === null || (is_array($provider_id) && count($provider_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $provider_id when calling restOrdersShippingReturnsReturnsServiceProvidersProviderIdGet'
            );
        }
        // verify the required parameter 'provider_id2' is set
        if ($provider_id2 === null || (is_array($provider_id2) && count($provider_id2) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $provider_id2 when calling restOrdersShippingReturnsReturnsServiceProvidersProviderIdGet'
            );
        }

        $resourcePath = '/rest/orders/shipping/returns/returns_service_providers/{providerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($provider_id !== null) {
            $queryParams['$providerId'] = ObjectSerializer::toQueryValue($provider_id);
        }

        // path params
        if ($provider_id2 !== null) {
            $resourcePath = str_replace(
                '{' . 'providerId' . '}',
                ObjectSerializer::toPathValue($provider_id2),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersShippingShippingInformationGet
     *
     * Get orders with shipping information
     *
     *
     * @return Mixed[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingShippingInformationGet()
    {
        list($response) = $this->restOrdersShippingShippingInformationGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation restOrdersShippingShippingInformationGetWithHttpInfo
     *
     * Get orders with shipping information
     *
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\Mixed[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingShippingInformationGetWithHttpInfo()
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\Mixed[]';
        $request = $this->restOrdersShippingShippingInformationGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\Mixed[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersShippingShippingInformationGetAsync
     *
     * Get orders with shipping information
     *
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingShippingInformationGetAsync()
    {
        return $this->restOrdersShippingShippingInformationGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersShippingShippingInformationGetAsyncWithHttpInfo
     *
     * Get orders with shipping information
     *
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingShippingInformationGetAsyncWithHttpInfo()
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\Mixed[]';
        $request = $this->restOrdersShippingShippingInformationGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersShippingShippingInformationGet'
     *
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersShippingShippingInformationGetRequest()
    {

        $resourcePath = '/rest/orders/shipping/shipping_information';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersShippingShippingInformationPost
     *
     * Create shipping information
     *
     *
     * @return PlentyModulesOrderShippingInformationModelsShippingInformation
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingShippingInformationPost()
    {
        list($response) = $this->restOrdersShippingShippingInformationPostWithHttpInfo();
        return $response;
    }

    /**
     * Operation restOrdersShippingShippingInformationPostWithHttpInfo
     *
     * Create shipping information
     *
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingInformationModelsShippingInformation, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingShippingInformationPostWithHttpInfo()
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingInformationModelsShippingInformation';
        $request = $this->restOrdersShippingShippingInformationPostRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingInformationModelsShippingInformation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersShippingShippingInformationPostAsync
     *
     * Create shipping information
     *
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingShippingInformationPostAsync()
    {
        return $this->restOrdersShippingShippingInformationPostAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersShippingShippingInformationPostAsyncWithHttpInfo
     *
     * Create shipping information
     *
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingShippingInformationPostAsyncWithHttpInfo()
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingInformationModelsShippingInformation';
        $request = $this->restOrdersShippingShippingInformationPostRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersShippingShippingInformationPost'
     *
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersShippingShippingInformationPostRequest()
    {

        $resourcePath = '/rest/orders/shipping/shipping_information';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersShippingShippingServiceProvidersGet
     *
     * List shipping service providers
     *
     * @param string $updated_at_before Filter that restricts the search result to shipping providers that were updated before a specific date. Possible formats: yyyy-mm-dd or yyyy-mm-dd hh:mm:ss (optional)
     * @param string $updated_at_after Filter that restricts the search result to shipping providers that were updated after a specific date. Possible formats: yyyy-mm-dd or yyyy-mm-dd hh:mm:ss (optional)
     * @param string $with The name of an relation to the shipping provider. The following parameter is available: ownShippingServiceProviders. (optional)
     *
     * @return object
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingShippingServiceProvidersGet($updated_at_before = null, $updated_at_after = null, $with = null)
    {
        list($response) = $this->restOrdersShippingShippingServiceProvidersGetWithHttpInfo($updated_at_before, $updated_at_after, $with);
        return $response;
    }

    /**
     * Operation restOrdersShippingShippingServiceProvidersGetWithHttpInfo
     *
     * List shipping service providers
     *
     * @param string $updated_at_before Filter that restricts the search result to shipping providers that were updated before a specific date. Possible formats: yyyy-mm-dd or yyyy-mm-dd hh:mm:ss (optional)
     * @param string $updated_at_after Filter that restricts the search result to shipping providers that were updated after a specific date. Possible formats: yyyy-mm-dd or yyyy-mm-dd hh:mm:ss (optional)
     * @param string $with The name of an relation to the shipping provider. The following parameter is available: ownShippingServiceProviders. (optional)
     *
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingShippingServiceProvidersGetWithHttpInfo($updated_at_before = null, $updated_at_after = null, $with = null)
    {
        $returnType = 'object';
        $request = $this->restOrdersShippingShippingServiceProvidersGetRequest($updated_at_before, $updated_at_after, $with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersShippingShippingServiceProvidersGetAsync
     *
     * List shipping service providers
     *
     * @param string $updated_at_before Filter that restricts the search result to shipping providers that were updated before a specific date. Possible formats: yyyy-mm-dd or yyyy-mm-dd hh:mm:ss (optional)
     * @param string $updated_at_after Filter that restricts the search result to shipping providers that were updated after a specific date. Possible formats: yyyy-mm-dd or yyyy-mm-dd hh:mm:ss (optional)
     * @param string $with The name of an relation to the shipping provider. The following parameter is available: ownShippingServiceProviders. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingShippingServiceProvidersGetAsync($updated_at_before = null, $updated_at_after = null, $with = null)
    {
        return $this->restOrdersShippingShippingServiceProvidersGetAsyncWithHttpInfo($updated_at_before, $updated_at_after, $with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersShippingShippingServiceProvidersGetAsyncWithHttpInfo
     *
     * List shipping service providers
     *
     * @param string $updated_at_before Filter that restricts the search result to shipping providers that were updated before a specific date. Possible formats: yyyy-mm-dd or yyyy-mm-dd hh:mm:ss (optional)
     * @param string $updated_at_after Filter that restricts the search result to shipping providers that were updated after a specific date. Possible formats: yyyy-mm-dd or yyyy-mm-dd hh:mm:ss (optional)
     * @param string $with The name of an relation to the shipping provider. The following parameter is available: ownShippingServiceProviders. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingShippingServiceProvidersGetAsyncWithHttpInfo($updated_at_before = null, $updated_at_after = null, $with = null)
    {
        $returnType = 'object';
        $request = $this->restOrdersShippingShippingServiceProvidersGetRequest($updated_at_before, $updated_at_after, $with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersShippingShippingServiceProvidersGet'
     *
     * @param string $updated_at_before Filter that restricts the search result to shipping providers that were updated before a specific date. Possible formats: yyyy-mm-dd or yyyy-mm-dd hh:mm:ss (optional)
     * @param string $updated_at_after Filter that restricts the search result to shipping providers that were updated after a specific date. Possible formats: yyyy-mm-dd or yyyy-mm-dd hh:mm:ss (optional)
     * @param string $with The name of an relation to the shipping provider. The following parameter is available: ownShippingServiceProviders. (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersShippingShippingServiceProvidersGetRequest($updated_at_before = null, $updated_at_after = null, $with = null)
    {

        $resourcePath = '/rest/orders/shipping/shipping_service_providers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($updated_at_before !== null) {
            $queryParams['updatedAtBefore'] = ObjectSerializer::toQueryValue($updated_at_before);
        }
        // query params
        if ($updated_at_after !== null) {
            $queryParams['updatedAtAfter'] = ObjectSerializer::toQueryValue($updated_at_after);
        }
        // query params
        if ($with !== null) {
            $queryParams['with'] = ObjectSerializer::toQueryValue($with);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersShippingShippingServiceProvidersPluginsGet
     *
     * List shipping service provider plugins
     *
     *
     * @return Mixed[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingShippingServiceProvidersPluginsGet()
    {
        list($response) = $this->restOrdersShippingShippingServiceProvidersPluginsGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation restOrdersShippingShippingServiceProvidersPluginsGetWithHttpInfo
     *
     * List shipping service provider plugins
     *
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\Mixed[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingShippingServiceProvidersPluginsGetWithHttpInfo()
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\Mixed[]';
        $request = $this->restOrdersShippingShippingServiceProvidersPluginsGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\Mixed[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersShippingShippingServiceProvidersPluginsGetAsync
     *
     * List shipping service provider plugins
     *
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingShippingServiceProvidersPluginsGetAsync()
    {
        return $this->restOrdersShippingShippingServiceProvidersPluginsGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersShippingShippingServiceProvidersPluginsGetAsyncWithHttpInfo
     *
     * List shipping service provider plugins
     *
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingShippingServiceProvidersPluginsGetAsyncWithHttpInfo()
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\Mixed[]';
        $request = $this->restOrdersShippingShippingServiceProvidersPluginsGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersShippingShippingServiceProvidersPluginsGet'
     *
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersShippingShippingServiceProvidersPluginsGetRequest()
    {

        $resourcePath = '/rest/orders/shipping/shipping_service_providers/plugins';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersShippingShippingServiceProvidersPost
     *
     * Save a shipping service provider
     *
     *
     * @return PlentyModulesOrderShippingServiceProviderModelsShippingServiceProvider
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingShippingServiceProvidersPost()
    {
        list($response) = $this->restOrdersShippingShippingServiceProvidersPostWithHttpInfo();
        return $response;
    }

    /**
     * Operation restOrdersShippingShippingServiceProvidersPostWithHttpInfo
     *
     * Save a shipping service provider
     *
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingServiceProviderModelsShippingServiceProvider, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingShippingServiceProvidersPostWithHttpInfo()
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingServiceProviderModelsShippingServiceProvider';
        $request = $this->restOrdersShippingShippingServiceProvidersPostRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingServiceProviderModelsShippingServiceProvider',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersShippingShippingServiceProvidersPostAsync
     *
     * Save a shipping service provider
     *
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingShippingServiceProvidersPostAsync()
    {
        return $this->restOrdersShippingShippingServiceProvidersPostAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersShippingShippingServiceProvidersPostAsyncWithHttpInfo
     *
     * Save a shipping service provider
     *
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingShippingServiceProvidersPostAsyncWithHttpInfo()
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingServiceProviderModelsShippingServiceProvider';
        $request = $this->restOrdersShippingShippingServiceProvidersPostRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersShippingShippingServiceProvidersPost'
     *
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersShippingShippingServiceProvidersPostRequest()
    {

        $resourcePath = '/rest/orders/shipping/shipping_service_providers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersShippingShippingServiceProvidersShippingServiceProviderIdGet
     *
     * Get a shipping service provider
     *
     * @param int $shipping_service_provider_id shipping_service_provider_id (required)
     *
     * @return PlentyModulesOrderShippingServiceProviderModelsShippingServiceProvider
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingShippingServiceProvidersShippingServiceProviderIdGet($shipping_service_provider_id)
    {
        list($response) = $this->restOrdersShippingShippingServiceProvidersShippingServiceProviderIdGetWithHttpInfo($shipping_service_provider_id);
        return $response;
    }

    /**
     * Operation restOrdersShippingShippingServiceProvidersShippingServiceProviderIdGetWithHttpInfo
     *
     * Get a shipping service provider
     *
     * @param int $shipping_service_provider_id (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingServiceProviderModelsShippingServiceProvider, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingShippingServiceProvidersShippingServiceProviderIdGetWithHttpInfo($shipping_service_provider_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingServiceProviderModelsShippingServiceProvider';
        $request = $this->restOrdersShippingShippingServiceProvidersShippingServiceProviderIdGetRequest($shipping_service_provider_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingServiceProviderModelsShippingServiceProvider',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersShippingShippingServiceProvidersShippingServiceProviderIdGetAsync
     *
     * Get a shipping service provider
     *
     * @param int $shipping_service_provider_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingShippingServiceProvidersShippingServiceProviderIdGetAsync($shipping_service_provider_id)
    {
        return $this->restOrdersShippingShippingServiceProvidersShippingServiceProviderIdGetAsyncWithHttpInfo($shipping_service_provider_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersShippingShippingServiceProvidersShippingServiceProviderIdGetAsyncWithHttpInfo
     *
     * Get a shipping service provider
     *
     * @param int $shipping_service_provider_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingShippingServiceProvidersShippingServiceProviderIdGetAsyncWithHttpInfo($shipping_service_provider_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingServiceProviderModelsShippingServiceProvider';
        $request = $this->restOrdersShippingShippingServiceProvidersShippingServiceProviderIdGetRequest($shipping_service_provider_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersShippingShippingServiceProvidersShippingServiceProviderIdGet'
     *
     * @param int $shipping_service_provider_id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersShippingShippingServiceProvidersShippingServiceProviderIdGetRequest($shipping_service_provider_id)
    {
        // verify the required parameter 'shipping_service_provider_id' is set
        if ($shipping_service_provider_id === null || (is_array($shipping_service_provider_id) && count($shipping_service_provider_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipping_service_provider_id when calling restOrdersShippingShippingServiceProvidersShippingServiceProviderIdGet'
            );
        }

        $resourcePath = '/rest/orders/shipping/shipping_service_providers/{shipping_service_provider_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($shipping_service_provider_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipping_service_provider_id' . '}',
                ObjectSerializer::toPathValue($shipping_service_provider_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersStatusHistoryGet
     *
     * List status histories of orders
     *
     * @param int $order_id The ID of the order (optional)
     * @param float $status_id The ID of the status (optional)
     * @param string $created_at_from Get entries with createdAt date after this date (optional)
     * @param string $created_at_to Get entries with createdAt date before this date (optional)
     * @param string $user_id The ID of the user (optional)
     *
     * @return object
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersStatusHistoryGet($order_id = null, $status_id = null, $created_at_from = null, $created_at_to = null, $user_id = null)
    {
        list($response) = $this->restOrdersStatusHistoryGetWithHttpInfo($order_id, $status_id, $created_at_from, $created_at_to, $user_id);
        return $response;
    }

    /**
     * Operation restOrdersStatusHistoryGetWithHttpInfo
     *
     * List status histories of orders
     *
     * @param int $order_id The ID of the order (optional)
     * @param float $status_id The ID of the status (optional)
     * @param string $created_at_from Get entries with createdAt date after this date (optional)
     * @param string $created_at_to Get entries with createdAt date before this date (optional)
     * @param string $user_id The ID of the user (optional)
     *
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersStatusHistoryGetWithHttpInfo($order_id = null, $status_id = null, $created_at_from = null, $created_at_to = null, $user_id = null)
    {
        $returnType = 'object';
        $request = $this->restOrdersStatusHistoryGetRequest($order_id, $status_id, $created_at_from, $created_at_to, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersStatusHistoryGetAsync
     *
     * List status histories of orders
     *
     * @param int $order_id The ID of the order (optional)
     * @param float $status_id The ID of the status (optional)
     * @param string $created_at_from Get entries with createdAt date after this date (optional)
     * @param string $created_at_to Get entries with createdAt date before this date (optional)
     * @param string $user_id The ID of the user (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersStatusHistoryGetAsync($order_id = null, $status_id = null, $created_at_from = null, $created_at_to = null, $user_id = null)
    {
        return $this->restOrdersStatusHistoryGetAsyncWithHttpInfo($order_id, $status_id, $created_at_from, $created_at_to, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersStatusHistoryGetAsyncWithHttpInfo
     *
     * List status histories of orders
     *
     * @param int $order_id The ID of the order (optional)
     * @param float $status_id The ID of the status (optional)
     * @param string $created_at_from Get entries with createdAt date after this date (optional)
     * @param string $created_at_to Get entries with createdAt date before this date (optional)
     * @param string $user_id The ID of the user (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersStatusHistoryGetAsyncWithHttpInfo($order_id = null, $status_id = null, $created_at_from = null, $created_at_to = null, $user_id = null)
    {
        $returnType = 'object';
        $request = $this->restOrdersStatusHistoryGetRequest($order_id, $status_id, $created_at_from, $created_at_to, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersStatusHistoryGet'
     *
     * @param int $order_id The ID of the order (optional)
     * @param float $status_id The ID of the status (optional)
     * @param string $created_at_from Get entries with createdAt date after this date (optional)
     * @param string $created_at_to Get entries with createdAt date before this date (optional)
     * @param string $user_id The ID of the user (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersStatusHistoryGetRequest($order_id = null, $status_id = null, $created_at_from = null, $created_at_to = null, $user_id = null)
    {

        $resourcePath = '/rest/orders/status-history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($order_id !== null) {
            $queryParams['orderId'] = ObjectSerializer::toQueryValue($order_id);
        }
        // query params
        if ($status_id !== null) {
            $queryParams['statusId'] = ObjectSerializer::toQueryValue($status_id);
        }
        // query params
        if ($created_at_from !== null) {
            $queryParams['createdAtFrom'] = ObjectSerializer::toQueryValue($created_at_from);
        }
        // query params
        if ($created_at_to !== null) {
            $queryParams['createdAtTo'] = ObjectSerializer::toQueryValue($created_at_to);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersStatusesAllGet
     *
     *
     * @return IlluminateDatabaseEloquentCollection
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersStatusesAllGet()
    {
        list($response) = $this->restOrdersStatusesAllGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation restOrdersStatusesAllGetWithHttpInfo
     *
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\IlluminateDatabaseEloquentCollection, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersStatusesAllGetWithHttpInfo()
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\IlluminateDatabaseEloquentCollection';
        $request = $this->restOrdersStatusesAllGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\IlluminateDatabaseEloquentCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersStatusesAllGetAsync
     *
     *
     *
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersStatusesAllGetAsync()
    {
        return $this->restOrdersStatusesAllGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersStatusesAllGetAsyncWithHttpInfo
     *
     *
     *
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersStatusesAllGetAsyncWithHttpInfo()
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\IlluminateDatabaseEloquentCollection';
        $request = $this->restOrdersStatusesAllGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersStatusesAllGet'
     *
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersStatusesAllGetRequest()
    {

        $resourcePath = '/rest/orders/statuses/all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersStatusesGet
     *
     * Searches order statuses.
     *
     * @param float $status_id_from Filter that restricts the search for order statuses to IDs from a defined value. (optional)
     * @param float $status_id_to Filter that restricts the search for order statuses to IDs to a defined value. (optional)
     *
     * @return object
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersStatusesGet($status_id_from = null, $status_id_to = null)
    {
        list($response) = $this->restOrdersStatusesGetWithHttpInfo($status_id_from, $status_id_to);
        return $response;
    }

    /**
     * Operation restOrdersStatusesGetWithHttpInfo
     *
     * Searches order statuses.
     *
     * @param float $status_id_from Filter that restricts the search for order statuses to IDs from a defined value. (optional)
     * @param float $status_id_to Filter that restricts the search for order statuses to IDs to a defined value. (optional)
     *
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersStatusesGetWithHttpInfo($status_id_from = null, $status_id_to = null)
    {
        $returnType = 'object';
        $request = $this->restOrdersStatusesGetRequest($status_id_from, $status_id_to);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersStatusesGetAsync
     *
     * Searches order statuses.
     *
     * @param float $status_id_from Filter that restricts the search for order statuses to IDs from a defined value. (optional)
     * @param float $status_id_to Filter that restricts the search for order statuses to IDs to a defined value. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersStatusesGetAsync($status_id_from = null, $status_id_to = null)
    {
        return $this->restOrdersStatusesGetAsyncWithHttpInfo($status_id_from, $status_id_to)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersStatusesGetAsyncWithHttpInfo
     *
     * Searches order statuses.
     *
     * @param float $status_id_from Filter that restricts the search for order statuses to IDs from a defined value. (optional)
     * @param float $status_id_to Filter that restricts the search for order statuses to IDs to a defined value. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersStatusesGetAsyncWithHttpInfo($status_id_from = null, $status_id_to = null)
    {
        $returnType = 'object';
        $request = $this->restOrdersStatusesGetRequest($status_id_from, $status_id_to);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersStatusesGet'
     *
     * @param float $status_id_from Filter that restricts the search for order statuses to IDs from a defined value. (optional)
     * @param float $status_id_to Filter that restricts the search for order statuses to IDs to a defined value. (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersStatusesGetRequest($status_id_from = null, $status_id_to = null)
    {

        $resourcePath = '/rest/orders/statuses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($status_id_from !== null) {
            $queryParams['statusIdFrom'] = ObjectSerializer::toQueryValue($status_id_from);
        }
        // query params
        if ($status_id_to !== null) {
            $queryParams['statusIdTo'] = ObjectSerializer::toQueryValue($status_id_to);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersStatusesGroupFunctionsPost
     *
     * Changes various properties for a status
     *
     *
     * @return void
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersStatusesGroupFunctionsPost()
    {
        $this->restOrdersStatusesGroupFunctionsPostWithHttpInfo();
    }

    /**
     * Operation restOrdersStatusesGroupFunctionsPostWithHttpInfo
     *
     * Changes various properties for a status
     *
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersStatusesGroupFunctionsPostWithHttpInfo()
    {
        $returnType = '';
        $request = $this->restOrdersStatusesGroupFunctionsPostRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersStatusesGroupFunctionsPostAsync
     *
     * Changes various properties for a status
     *
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersStatusesGroupFunctionsPostAsync()
    {
        return $this->restOrdersStatusesGroupFunctionsPostAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersStatusesGroupFunctionsPostAsyncWithHttpInfo
     *
     * Changes various properties for a status
     *
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersStatusesGroupFunctionsPostAsyncWithHttpInfo()
    {
        $returnType = '';
        $request = $this->restOrdersStatusesGroupFunctionsPostRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersStatusesGroupFunctionsPost'
     *
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersStatusesGroupFunctionsPostRequest()
    {

        $resourcePath = '/rest/orders/statuses/group_functions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersStatusesPost
     *
     * Creates an order status.
     *
     * @param object $body body (optional)
     *
     * @return PlentyModulesOrderStatusModelsOrderStatus
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersStatusesPost($body = null)
    {
        list($response) = $this->restOrdersStatusesPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation restOrdersStatusesPostWithHttpInfo
     *
     * Creates an order status.
     *
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderStatusModelsOrderStatus, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersStatusesPostWithHttpInfo($body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderStatusModelsOrderStatus';
        $request = $this->restOrdersStatusesPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderStatusModelsOrderStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersStatusesPostAsync
     *
     * Creates an order status.
     *
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersStatusesPostAsync($body = null)
    {
        return $this->restOrdersStatusesPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersStatusesPostAsyncWithHttpInfo
     *
     * Creates an order status.
     *
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersStatusesPostAsyncWithHttpInfo($body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderStatusModelsOrderStatus';
        $request = $this->restOrdersStatusesPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersStatusesPost'
     *
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersStatusesPostRequest($body = null)
    {

        $resourcePath = '/rest/orders/statuses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersStatusesStatusIdDelete
     *
     * Delete an order status.
     *
     * @param float $status_id The ID of the status, which shall be deleted. (required)
     *
     * @return void
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersStatusesStatusIdDelete($status_id)
    {
        $this->restOrdersStatusesStatusIdDeleteWithHttpInfo($status_id);
    }

    /**
     * Operation restOrdersStatusesStatusIdDeleteWithHttpInfo
     *
     * Delete an order status.
     *
     * @param float $status_id The ID of the status, which shall be deleted. (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersStatusesStatusIdDeleteWithHttpInfo($status_id)
    {
        $returnType = '';
        $request = $this->restOrdersStatusesStatusIdDeleteRequest($status_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersStatusesStatusIdDeleteAsync
     *
     * Delete an order status.
     *
     * @param float $status_id The ID of the status, which shall be deleted. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersStatusesStatusIdDeleteAsync($status_id)
    {
        return $this->restOrdersStatusesStatusIdDeleteAsyncWithHttpInfo($status_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersStatusesStatusIdDeleteAsyncWithHttpInfo
     *
     * Delete an order status.
     *
     * @param float $status_id The ID of the status, which shall be deleted. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersStatusesStatusIdDeleteAsyncWithHttpInfo($status_id)
    {
        $returnType = '';
        $request = $this->restOrdersStatusesStatusIdDeleteRequest($status_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersStatusesStatusIdDelete'
     *
     * @param float $status_id The ID of the status, which shall be deleted. (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersStatusesStatusIdDeleteRequest($status_id)
    {
        // verify the required parameter 'status_id' is set
        if ($status_id === null || (is_array($status_id) && count($status_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $status_id when calling restOrdersStatusesStatusIdDelete'
            );
        }

        $resourcePath = '/rest/orders/statuses/{statusId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($status_id !== null) {
            $resourcePath = str_replace(
                '{' . 'statusId' . '}',
                ObjectSerializer::toPathValue($status_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersStatusesStatusIdGet
     *
     * Get an order status.
     *
     * @param float $status_id The ID of the order status. (required)
     *
     * @return PlentyModulesOrderStatusModelsOrderStatus
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersStatusesStatusIdGet($status_id)
    {
        list($response) = $this->restOrdersStatusesStatusIdGetWithHttpInfo($status_id);
        return $response;
    }

    /**
     * Operation restOrdersStatusesStatusIdGetWithHttpInfo
     *
     * Get an order status.
     *
     * @param float $status_id The ID of the order status. (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderStatusModelsOrderStatus, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersStatusesStatusIdGetWithHttpInfo($status_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderStatusModelsOrderStatus';
        $request = $this->restOrdersStatusesStatusIdGetRequest($status_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderStatusModelsOrderStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersStatusesStatusIdGetAsync
     *
     * Get an order status.
     *
     * @param float $status_id The ID of the order status. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersStatusesStatusIdGetAsync($status_id)
    {
        return $this->restOrdersStatusesStatusIdGetAsyncWithHttpInfo($status_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersStatusesStatusIdGetAsyncWithHttpInfo
     *
     * Get an order status.
     *
     * @param float $status_id The ID of the order status. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersStatusesStatusIdGetAsyncWithHttpInfo($status_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderStatusModelsOrderStatus';
        $request = $this->restOrdersStatusesStatusIdGetRequest($status_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersStatusesStatusIdGet'
     *
     * @param float $status_id The ID of the order status. (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersStatusesStatusIdGetRequest($status_id)
    {
        // verify the required parameter 'status_id' is set
        if ($status_id === null || (is_array($status_id) && count($status_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $status_id when calling restOrdersStatusesStatusIdGet'
            );
        }

        $resourcePath = '/rest/orders/statuses/{statusId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($status_id !== null) {
            $resourcePath = str_replace(
                '{' . 'statusId' . '}',
                ObjectSerializer::toPathValue($status_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersStatusesStatusIdPut
     *
     * Update an order status.
     *
     * @param float $status_id The ID of the status, which shall be updated. (required)
     * @param object $body body (optional)
     *
     * @return PlentyModulesOrderStatusModelsOrderStatus
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersStatusesStatusIdPut($status_id, $body = null)
    {
        list($response) = $this->restOrdersStatusesStatusIdPutWithHttpInfo($status_id, $body);
        return $response;
    }

    /**
     * Operation restOrdersStatusesStatusIdPutWithHttpInfo
     *
     * Update an order status.
     *
     * @param float $status_id The ID of the status, which shall be updated. (required)
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderStatusModelsOrderStatus, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersStatusesStatusIdPutWithHttpInfo($status_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderStatusModelsOrderStatus';
        $request = $this->restOrdersStatusesStatusIdPutRequest($status_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderStatusModelsOrderStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersStatusesStatusIdPutAsync
     *
     * Update an order status.
     *
     * @param float $status_id The ID of the status, which shall be updated. (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersStatusesStatusIdPutAsync($status_id, $body = null)
    {
        return $this->restOrdersStatusesStatusIdPutAsyncWithHttpInfo($status_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersStatusesStatusIdPutAsyncWithHttpInfo
     *
     * Update an order status.
     *
     * @param float $status_id The ID of the status, which shall be updated. (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersStatusesStatusIdPutAsyncWithHttpInfo($status_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderStatusModelsOrderStatus';
        $request = $this->restOrdersStatusesStatusIdPutRequest($status_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersStatusesStatusIdPut'
     *
     * @param float $status_id The ID of the status, which shall be updated. (required)
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersStatusesStatusIdPutRequest($status_id, $body = null)
    {
        // verify the required parameter 'status_id' is set
        if ($status_id === null || (is_array($status_id) && count($status_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $status_id when calling restOrdersStatusesStatusIdPut'
            );
        }

        $resourcePath = '/rest/orders/statuses/{statusId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($status_id !== null) {
            $resourcePath = str_replace(
                '{' . 'statusId' . '}',
                ObjectSerializer::toPathValue($status_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restRedistributionsOrderIdPut
     *
     * Update a redistribution
     *
     * @param int $order_id The ID of the order. (required)
     * @param object $body body (optional)
     *
     * @return PlentyModulesOrderModelsOrder
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restRedistributionsOrderIdPut($order_id, $body = null)
    {
        list($response) = $this->restRedistributionsOrderIdPutWithHttpInfo($order_id, $body);
        return $response;
    }

    /**
     * Operation restRedistributionsOrderIdPutWithHttpInfo
     *
     * Update a redistribution
     *
     * @param int $order_id The ID of the order. (required)
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restRedistributionsOrderIdPutWithHttpInfo($order_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder';
        $request = $this->restRedistributionsOrderIdPutRequest($order_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restRedistributionsOrderIdPutAsync
     *
     * Update a redistribution
     *
     * @param int $order_id The ID of the order. (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restRedistributionsOrderIdPutAsync($order_id, $body = null)
    {
        return $this->restRedistributionsOrderIdPutAsyncWithHttpInfo($order_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restRedistributionsOrderIdPutAsyncWithHttpInfo
     *
     * Update a redistribution
     *
     * @param int $order_id The ID of the order. (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restRedistributionsOrderIdPutAsyncWithHttpInfo($order_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder';
        $request = $this->restRedistributionsOrderIdPutRequest($order_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restRedistributionsOrderIdPut'
     *
     * @param int $order_id The ID of the order. (required)
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restRedistributionsOrderIdPutRequest($order_id, $body = null)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restRedistributionsOrderIdPut'
            );
        }

        $resourcePath = '/rest/redistributions/{orderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restRedistributionsPost
     *
     * Create a redistribution
     *
     * @param object $body body (optional)
     *
     * @return PlentyModulesOrderModelsOrder
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restRedistributionsPost($body = null)
    {
        list($response) = $this->restRedistributionsPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation restRedistributionsPostWithHttpInfo
     *
     * Create a redistribution
     *
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restRedistributionsPostWithHttpInfo($body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder';
        $request = $this->restRedistributionsPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restRedistributionsPostAsync
     *
     * Create a redistribution
     *
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restRedistributionsPostAsync($body = null)
    {
        return $this->restRedistributionsPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restRedistributionsPostAsyncWithHttpInfo
     *
     * Create a redistribution
     *
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restRedistributionsPostAsyncWithHttpInfo($body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder';
        $request = $this->restRedistributionsPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restRedistributionsPost'
     *
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restRedistributionsPostRequest($body = null)
    {

        $resourcePath = '/rest/redistributions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restReordersOrderIdCurrencyPut
     *
     * @param int $order_id order_id (required)
     *
     * @return PlentyModulesOrderModelsOrder
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restReordersOrderIdCurrencyPut($order_id)
    {
        list($response) = $this->restReordersOrderIdCurrencyPutWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation restReordersOrderIdCurrencyPutWithHttpInfo
     *
     * @param int $order_id (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restReordersOrderIdCurrencyPutWithHttpInfo($order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder';
        $request = $this->restReordersOrderIdCurrencyPutRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restReordersOrderIdCurrencyPutAsync
     *
     *
     *
     * @param int $order_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restReordersOrderIdCurrencyPutAsync($order_id)
    {
        return $this->restReordersOrderIdCurrencyPutAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restReordersOrderIdCurrencyPutAsyncWithHttpInfo
     *
     *
     *
     * @param int $order_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restReordersOrderIdCurrencyPutAsyncWithHttpInfo($order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder';
        $request = $this->restReordersOrderIdCurrencyPutRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restReordersOrderIdCurrencyPut'
     *
     * @param int $order_id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restReordersOrderIdCurrencyPutRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restReordersOrderIdCurrencyPut'
            );
        }

        $resourcePath = '/rest/reorders/{orderId}/currency';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restReordersOrderIdDeliveryDateGet
     *
     * @param int $order_id order_id (required)
     *
     * @return PlentyDataSimpleRestResponse
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restReordersOrderIdDeliveryDateGet($order_id)
    {
        list($response) = $this->restReordersOrderIdDeliveryDateGetWithHttpInfo($order_id);
        return $response;
    }

    /**
     * Operation restReordersOrderIdDeliveryDateGetWithHttpInfo
     *
     * @param int $order_id (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyDataSimpleRestResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restReordersOrderIdDeliveryDateGetWithHttpInfo($order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyDataSimpleRestResponse';
        $request = $this->restReordersOrderIdDeliveryDateGetRequest($order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyDataSimpleRestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restReordersOrderIdDeliveryDateGetAsync
     *
     *
     *
     * @param int $order_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restReordersOrderIdDeliveryDateGetAsync($order_id)
    {
        return $this->restReordersOrderIdDeliveryDateGetAsyncWithHttpInfo($order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restReordersOrderIdDeliveryDateGetAsyncWithHttpInfo
     *
     *
     *
     * @param int $order_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restReordersOrderIdDeliveryDateGetAsyncWithHttpInfo($order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyDataSimpleRestResponse';
        $request = $this->restReordersOrderIdDeliveryDateGetRequest($order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restReordersOrderIdDeliveryDateGet'
     *
     * @param int $order_id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restReordersOrderIdDeliveryDateGetRequest($order_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restReordersOrderIdDeliveryDateGet'
            );
        }

        $resourcePath = '/rest/reorders/{orderId}/delivery_date';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restReordersOrderIdPut
     *
     * Update a reorder
     *
     * @param int $order_id The ID of the order. (required)
     * @param object $body body (optional)
     *
     * @return PlentyModulesOrderModelsOrder
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restReordersOrderIdPut($order_id, $body = null)
    {
        list($response) = $this->restReordersOrderIdPutWithHttpInfo($order_id, $body);
        return $response;
    }

    /**
     * Operation restReordersOrderIdPutWithHttpInfo
     *
     * Update a reorder
     *
     * @param int $order_id The ID of the order. (required)
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restReordersOrderIdPutWithHttpInfo($order_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder';
        $request = $this->restReordersOrderIdPutRequest($order_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restReordersOrderIdPutAsync
     *
     * Update a reorder
     *
     * @param int $order_id The ID of the order. (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restReordersOrderIdPutAsync($order_id, $body = null)
    {
        return $this->restReordersOrderIdPutAsyncWithHttpInfo($order_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restReordersOrderIdPutAsyncWithHttpInfo
     *
     * Update a reorder
     *
     * @param int $order_id The ID of the order. (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restReordersOrderIdPutAsyncWithHttpInfo($order_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder';
        $request = $this->restReordersOrderIdPutRequest($order_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restReordersOrderIdPut'
     *
     * @param int $order_id The ID of the order. (required)
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restReordersOrderIdPutRequest($order_id, $body = null)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restReordersOrderIdPut'
            );
        }

        $resourcePath = '/rest/reorders/{orderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restReordersPost
     *
     * Create a reorder
     *
     * @param object $body body (optional)
     *
     * @return PlentyModulesOrderModelsOrder
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restReordersPost($body = null)
    {
        list($response) = $this->restReordersPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation restReordersPostWithHttpInfo
     *
     * Create a reorder
     *
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restReordersPostWithHttpInfo($body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder';
        $request = $this->restReordersPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restReordersPostAsync
     *
     * Create a reorder
     *
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restReordersPostAsync($body = null)
    {
        return $this->restReordersPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restReordersPostAsyncWithHttpInfo
     *
     * Create a reorder
     *
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restReordersPostAsyncWithHttpInfo($body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderModelsOrder';
        $request = $this->restReordersPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restReordersPost'
     *
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restReordersPostRequest($body = null)
    {

        $resourcePath = '/rest/reorders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @return array of http client options
     * @throws RuntimeException on file opening failure
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

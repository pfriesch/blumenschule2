<?php
/**
 * MessengerApi
 * PHP version 5
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BSApp\Service\plentymarketsAPI\Api;

use BSApp\Service\plentymarketsAPI\Model\Mixed;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesMessengerModelsMessage;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use function GuzzleHttp\Psr7\build_query;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BSApp\Service\plentymarketsAPI\ApiException;
use BSApp\Service\plentymarketsAPI\Configuration;
use BSApp\Service\plentymarketsAPI\HeaderSelector;
use BSApp\Service\plentymarketsAPI\ObjectSerializer;
use InvalidArgumentException;
use RuntimeException;
use stdClass;

/**
 * MessengerApi Class Doc Comment
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MessengerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    )
    {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation restMessagesGet
     *
     * List the amount following/preceeding messages begining by the message with the given UUID5 (exclusive).
     *
     * @param string $uuid The reference UUID5 of the message to start from (excluding). (optional)
     * @param bool $successors If set to FALSE, the messages older than the referenced message will be returned. (optional)
     * @param int $amount The amount of messages to list (defaults to 50) (optional)
     *
     * @return PlentyModulesMessengerModelsMessage[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restMessagesGet($uuid = null, $successors = null, $amount = null)
    {
        list($response) = $this->restMessagesGetWithHttpInfo($uuid, $successors, $amount);
        return $response;
    }

    /**
     * Operation restMessagesGetWithHttpInfo
     *
     * List the amount following/preceeding messages begining by the message with the given UUID5 (exclusive).
     *
     * @param string $uuid The reference UUID5 of the message to start from (excluding). (optional)
     * @param bool $successors If set to FALSE, the messages older than the referenced message will be returned. (optional)
     * @param int $amount The amount of messages to list (defaults to 50) (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesMessengerModelsMessage[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restMessagesGetWithHttpInfo($uuid = null, $successors = null, $amount = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesMessengerModelsMessage[]';
        $request = $this->restMessagesGetRequest($uuid, $successors, $amount);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesMessengerModelsMessage[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restMessagesGetAsync
     *
     * List the amount following/preceeding messages begining by the message with the given UUID5 (exclusive).
     *
     * @param string $uuid The reference UUID5 of the message to start from (excluding). (optional)
     * @param bool $successors If set to FALSE, the messages older than the referenced message will be returned. (optional)
     * @param int $amount The amount of messages to list (defaults to 50) (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restMessagesGetAsync($uuid = null, $successors = null, $amount = null)
    {
        return $this->restMessagesGetAsyncWithHttpInfo($uuid, $successors, $amount)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restMessagesGetAsyncWithHttpInfo
     *
     * List the amount following/preceeding messages begining by the message with the given UUID5 (exclusive).
     *
     * @param string $uuid The reference UUID5 of the message to start from (excluding). (optional)
     * @param bool $successors If set to FALSE, the messages older than the referenced message will be returned. (optional)
     * @param int $amount The amount of messages to list (defaults to 50) (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restMessagesGetAsyncWithHttpInfo($uuid = null, $successors = null, $amount = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesMessengerModelsMessage[]';
        $request = $this->restMessagesGetRequest($uuid, $successors, $amount);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restMessagesGet'
     *
     * @param string $uuid The reference UUID5 of the message to start from (excluding). (optional)
     * @param bool $successors If set to FALSE, the messages older than the referenced message will be returned. (optional)
     * @param int $amount The amount of messages to list (defaults to 50) (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restMessagesGetRequest($uuid = null, $successors = null, $amount = null)
    {

        $resourcePath = '/rest/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($uuid !== null) {
            $queryParams['uuid'] = ObjectSerializer::toQueryValue($uuid);
        }
        // query params
        if ($successors !== null) {
            $queryParams['successors'] = ObjectSerializer::toQueryValue($successors);
        }
        // query params
        if ($amount !== null) {
            $queryParams['amount'] = ObjectSerializer::toQueryValue($amount);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restMessagesPost
     *
     * Create a new message.
     *
     * @param object $body body (optional)
     *
     * @return PlentyModulesMessengerModelsMessage
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restMessagesPost($body = null)
    {
        list($response) = $this->restMessagesPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation restMessagesPostWithHttpInfo
     *
     * Create a new message.
     *
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesMessengerModelsMessage, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restMessagesPostWithHttpInfo($body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesMessengerModelsMessage';
        $request = $this->restMessagesPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesMessengerModelsMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restMessagesPostAsync
     *
     * Create a new message.
     *
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restMessagesPostAsync($body = null)
    {
        return $this->restMessagesPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restMessagesPostAsyncWithHttpInfo
     *
     * Create a new message.
     *
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restMessagesPostAsyncWithHttpInfo($body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesMessengerModelsMessage';
        $request = $this->restMessagesPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restMessagesPost'
     *
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restMessagesPostRequest($body = null)
    {

        $resourcePath = '/rest/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restMessagesUuid5Delete
     *
     * Deletes Message by UUID
     *
     * @param int $uuid5 uuid5 (required)
     *
     * @return Mixed
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restMessagesUuid5Delete($uuid5)
    {
        list($response) = $this->restMessagesUuid5DeleteWithHttpInfo($uuid5);
        return $response;
    }

    /**
     * Operation restMessagesUuid5DeleteWithHttpInfo
     *
     * Deletes Message by UUID
     *
     * @param int $uuid5 (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\Mixed, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restMessagesUuid5DeleteWithHttpInfo($uuid5)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\Mixed';
        $request = $this->restMessagesUuid5DeleteRequest($uuid5);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\Mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restMessagesUuid5DeleteAsync
     *
     * Deletes Message by UUID
     *
     * @param int $uuid5 (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restMessagesUuid5DeleteAsync($uuid5)
    {
        return $this->restMessagesUuid5DeleteAsyncWithHttpInfo($uuid5)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restMessagesUuid5DeleteAsyncWithHttpInfo
     *
     * Deletes Message by UUID
     *
     * @param int $uuid5 (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restMessagesUuid5DeleteAsyncWithHttpInfo($uuid5)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\Mixed';
        $request = $this->restMessagesUuid5DeleteRequest($uuid5);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restMessagesUuid5Delete'
     *
     * @param int $uuid5 (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restMessagesUuid5DeleteRequest($uuid5)
    {
        // verify the required parameter 'uuid5' is set
        if ($uuid5 === null || (is_array($uuid5) && count($uuid5) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uuid5 when calling restMessagesUuid5Delete'
            );
        }

        $resourcePath = '/rest/messages/{uuid5}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($uuid5 !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid5' . '}',
                ObjectSerializer::toPathValue($uuid5),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restMessagesUuid5DonePut
     *
     * Set or unset the doneAt date of the message.
     *
     * @param int $uuid5 uuid5 (required)
     * @param object $body body (optional)
     * @param string $done_at Set (or unset, if &lt;tt&gt;doneAt&lt;/tt&gt; is not given) the doneAt date in the message. (optional)
     *
     * @return PlentyModulesMessengerModelsMessage[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restMessagesUuid5DonePut($uuid5, $body = null, $done_at = null)
    {
        list($response) = $this->restMessagesUuid5DonePutWithHttpInfo($uuid5, $body, $done_at);
        return $response;
    }

    /**
     * Operation restMessagesUuid5DonePutWithHttpInfo
     *
     * Set or unset the doneAt date of the message.
     *
     * @param int $uuid5 (required)
     * @param object $body (optional)
     * @param string $done_at Set (or unset, if &lt;tt&gt;doneAt&lt;/tt&gt; is not given) the doneAt date in the message. (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesMessengerModelsMessage[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restMessagesUuid5DonePutWithHttpInfo($uuid5, $body = null, $done_at = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesMessengerModelsMessage[]';
        $request = $this->restMessagesUuid5DonePutRequest($uuid5, $body, $done_at);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesMessengerModelsMessage[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restMessagesUuid5DonePutAsync
     *
     * Set or unset the doneAt date of the message.
     *
     * @param int $uuid5 (required)
     * @param object $body (optional)
     * @param string $done_at Set (or unset, if &lt;tt&gt;doneAt&lt;/tt&gt; is not given) the doneAt date in the message. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restMessagesUuid5DonePutAsync($uuid5, $body = null, $done_at = null)
    {
        return $this->restMessagesUuid5DonePutAsyncWithHttpInfo($uuid5, $body, $done_at)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restMessagesUuid5DonePutAsyncWithHttpInfo
     *
     * Set or unset the doneAt date of the message.
     *
     * @param int $uuid5 (required)
     * @param object $body (optional)
     * @param string $done_at Set (or unset, if &lt;tt&gt;doneAt&lt;/tt&gt; is not given) the doneAt date in the message. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restMessagesUuid5DonePutAsyncWithHttpInfo($uuid5, $body = null, $done_at = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesMessengerModelsMessage[]';
        $request = $this->restMessagesUuid5DonePutRequest($uuid5, $body, $done_at);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restMessagesUuid5DonePut'
     *
     * @param int $uuid5 (required)
     * @param object $body (optional)
     * @param string $done_at Set (or unset, if &lt;tt&gt;doneAt&lt;/tt&gt; is not given) the doneAt date in the message. (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restMessagesUuid5DonePutRequest($uuid5, $body = null, $done_at = null)
    {
        // verify the required parameter 'uuid5' is set
        if ($uuid5 === null || (is_array($uuid5) && count($uuid5) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uuid5 when calling restMessagesUuid5DonePut'
            );
        }

        $resourcePath = '/rest/messages/{uuid5}/done';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($done_at !== null) {
            $queryParams['doneAt'] = ObjectSerializer::toQueryValue($done_at);
        }

        // path params
        if ($uuid5 !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid5' . '}',
                ObjectSerializer::toPathValue($uuid5),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restMessagesUuid5Get
     *
     * Get the message for the given UUID5 and all its associated successors.
     *
     * @param string $uuid The UUID5 of the message. (required)
     * @param int $uuid5 uuid5 (required)
     *
     * @return PlentyModulesMessengerModelsMessage[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restMessagesUuid5Get($uuid, $uuid5)
    {
        list($response) = $this->restMessagesUuid5GetWithHttpInfo($uuid, $uuid5);
        return $response;
    }

    /**
     * Operation restMessagesUuid5GetWithHttpInfo
     *
     * Get the message for the given UUID5 and all its associated successors.
     *
     * @param string $uuid The UUID5 of the message. (required)
     * @param int $uuid5 (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesMessengerModelsMessage[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restMessagesUuid5GetWithHttpInfo($uuid, $uuid5)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesMessengerModelsMessage[]';
        $request = $this->restMessagesUuid5GetRequest($uuid, $uuid5);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesMessengerModelsMessage[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restMessagesUuid5GetAsync
     *
     * Get the message for the given UUID5 and all its associated successors.
     *
     * @param string $uuid The UUID5 of the message. (required)
     * @param int $uuid5 (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restMessagesUuid5GetAsync($uuid, $uuid5)
    {
        return $this->restMessagesUuid5GetAsyncWithHttpInfo($uuid, $uuid5)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restMessagesUuid5GetAsyncWithHttpInfo
     *
     * Get the message for the given UUID5 and all its associated successors.
     *
     * @param string $uuid The UUID5 of the message. (required)
     * @param int $uuid5 (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restMessagesUuid5GetAsyncWithHttpInfo($uuid, $uuid5)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesMessengerModelsMessage[]';
        $request = $this->restMessagesUuid5GetRequest($uuid, $uuid5);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restMessagesUuid5Get'
     *
     * @param string $uuid The UUID5 of the message. (required)
     * @param int $uuid5 (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restMessagesUuid5GetRequest($uuid, $uuid5)
    {
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uuid when calling restMessagesUuid5Get'
            );
        }
        // verify the required parameter 'uuid5' is set
        if ($uuid5 === null || (is_array($uuid5) && count($uuid5) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uuid5 when calling restMessagesUuid5Get'
            );
        }

        $resourcePath = '/rest/messages/{uuid5}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($uuid !== null) {
            $queryParams['uuid'] = ObjectSerializer::toQueryValue($uuid);
        }

        // path params
        if ($uuid5 !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid5' . '}',
                ObjectSerializer::toPathValue($uuid5),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restMessagesUuid5ReadByPut
     *
     * Update ReadBy array of message
     *
     * @param int $uuid5 uuid5 (required)
     *
     * @return PlentyModulesMessengerModelsMessage[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restMessagesUuid5ReadByPut($uuid5)
    {
        list($response) = $this->restMessagesUuid5ReadByPutWithHttpInfo($uuid5);
        return $response;
    }

    /**
     * Operation restMessagesUuid5ReadByPutWithHttpInfo
     *
     * Update ReadBy array of message
     *
     * @param int $uuid5 (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesMessengerModelsMessage[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restMessagesUuid5ReadByPutWithHttpInfo($uuid5)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesMessengerModelsMessage[]';
        $request = $this->restMessagesUuid5ReadByPutRequest($uuid5);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesMessengerModelsMessage[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restMessagesUuid5ReadByPutAsync
     *
     * Update ReadBy array of message
     *
     * @param int $uuid5 (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restMessagesUuid5ReadByPutAsync($uuid5)
    {
        return $this->restMessagesUuid5ReadByPutAsyncWithHttpInfo($uuid5)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restMessagesUuid5ReadByPutAsyncWithHttpInfo
     *
     * Update ReadBy array of message
     *
     * @param int $uuid5 (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restMessagesUuid5ReadByPutAsyncWithHttpInfo($uuid5)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesMessengerModelsMessage[]';
        $request = $this->restMessagesUuid5ReadByPutRequest($uuid5);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restMessagesUuid5ReadByPut'
     *
     * @param int $uuid5 (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restMessagesUuid5ReadByPutRequest($uuid5)
    {
        // verify the required parameter 'uuid5' is set
        if ($uuid5 === null || (is_array($uuid5) && count($uuid5) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uuid5 when calling restMessagesUuid5ReadByPut'
            );
        }

        $resourcePath = '/rest/messages/{uuid5}/readBy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($uuid5 !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid5' . '}',
                ObjectSerializer::toPathValue($uuid5),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restMessagesUuid5VisibilityPut
     *
     * Update message visibility
     *
     * @param int $uuid5 uuid5 (required)
     * @param object $body body (optional)
     *
     * @return PlentyModulesMessengerModelsMessage[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restMessagesUuid5VisibilityPut($uuid5, $body = null)
    {
        list($response) = $this->restMessagesUuid5VisibilityPutWithHttpInfo($uuid5, $body);
        return $response;
    }

    /**
     * Operation restMessagesUuid5VisibilityPutWithHttpInfo
     *
     * Update message visibility
     *
     * @param int $uuid5 (required)
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesMessengerModelsMessage[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restMessagesUuid5VisibilityPutWithHttpInfo($uuid5, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesMessengerModelsMessage[]';
        $request = $this->restMessagesUuid5VisibilityPutRequest($uuid5, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesMessengerModelsMessage[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restMessagesUuid5VisibilityPutAsync
     *
     * Update message visibility
     *
     * @param int $uuid5 (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restMessagesUuid5VisibilityPutAsync($uuid5, $body = null)
    {
        return $this->restMessagesUuid5VisibilityPutAsyncWithHttpInfo($uuid5, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restMessagesUuid5VisibilityPutAsyncWithHttpInfo
     *
     * Update message visibility
     *
     * @param int $uuid5 (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restMessagesUuid5VisibilityPutAsyncWithHttpInfo($uuid5, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesMessengerModelsMessage[]';
        $request = $this->restMessagesUuid5VisibilityPutRequest($uuid5, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restMessagesUuid5VisibilityPut'
     *
     * @param int $uuid5 (required)
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restMessagesUuid5VisibilityPutRequest($uuid5, $body = null)
    {
        // verify the required parameter 'uuid5' is set
        if ($uuid5 === null || (is_array($uuid5) && count($uuid5) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $uuid5 when calling restMessagesUuid5VisibilityPut'
            );
        }

        $resourcePath = '/rest/messages/{uuid5}/visibility';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($uuid5 !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid5' . '}',
                ObjectSerializer::toPathValue($uuid5),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @return array of http client options
     * @throws RuntimeException on file opening failure
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

<?php
/**
 * ShopApi
 * PHP version 5
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BSApp\Service\plentymarketsAPI\Api;

use BSApp\Service\plentymarketsAPI\Model\IlluminateHttpResponse;
use BSApp\Service\plentymarketsAPI\Model\PlentyDataSimpleRestResponse;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContent;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContentLink;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContentPage;
use BSApp\Service\plentymarketsAPI\Model\Response;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use function GuzzleHttp\Psr7\build_query;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BSApp\Service\plentymarketsAPI\ApiException;
use BSApp\Service\plentymarketsAPI\Configuration;
use BSApp\Service\plentymarketsAPI\HeaderSelector;
use BSApp\Service\plentymarketsAPI\ObjectSerializer;
use InvalidArgumentException;
use RuntimeException;
use stdClass;

/**
 * ShopApi Class Doc Comment
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShopApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    )
    {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation restShopBuilderContentLinksContentLinkIdDelete
     *
     * Delete a content link.
     *
     * @param int $content_link_id content_link_id (required)
     *
     * @return void
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderContentLinksContentLinkIdDelete($content_link_id)
    {
        $this->restShopBuilderContentLinksContentLinkIdDeleteWithHttpInfo($content_link_id);
    }

    /**
     * Operation restShopBuilderContentLinksContentLinkIdDeleteWithHttpInfo
     *
     * Delete a content link.
     *
     * @param int $content_link_id (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderContentLinksContentLinkIdDeleteWithHttpInfo($content_link_id)
    {
        $returnType = '';
        $request = $this->restShopBuilderContentLinksContentLinkIdDeleteRequest($content_link_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderContentLinksContentLinkIdDeleteAsync
     *
     * Delete a content link.
     *
     * @param int $content_link_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderContentLinksContentLinkIdDeleteAsync($content_link_id)
    {
        return $this->restShopBuilderContentLinksContentLinkIdDeleteAsyncWithHttpInfo($content_link_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderContentLinksContentLinkIdDeleteAsyncWithHttpInfo
     *
     * Delete a content link.
     *
     * @param int $content_link_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderContentLinksContentLinkIdDeleteAsyncWithHttpInfo($content_link_id)
    {
        $returnType = '';
        $request = $this->restShopBuilderContentLinksContentLinkIdDeleteRequest($content_link_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderContentLinksContentLinkIdDelete'
     *
     * @param int $content_link_id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restShopBuilderContentLinksContentLinkIdDeleteRequest($content_link_id)
    {
        // verify the required parameter 'content_link_id' is set
        if ($content_link_id === null || (is_array($content_link_id) && count($content_link_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $content_link_id when calling restShopBuilderContentLinksContentLinkIdDelete'
            );
        }

        $resourcePath = '/rest/shop_builder/content_links/{contentLinkId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($content_link_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contentLinkId' . '}',
                ObjectSerializer::toPathValue($content_link_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderContentLinksContentLinkIdGet
     *
     * Find a content link by id.
     *
     * @param int $content_link_id content_link_id (required)
     *
     * @return PlentyModulesShopBuilderModelsContentLink
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderContentLinksContentLinkIdGet($content_link_id)
    {
        list($response) = $this->restShopBuilderContentLinksContentLinkIdGetWithHttpInfo($content_link_id);
        return $response;
    }

    /**
     * Operation restShopBuilderContentLinksContentLinkIdGetWithHttpInfo
     *
     * Find a content link by id.
     *
     * @param int $content_link_id (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContentLink, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderContentLinksContentLinkIdGetWithHttpInfo($content_link_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContentLink';
        $request = $this->restShopBuilderContentLinksContentLinkIdGetRequest($content_link_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContentLink',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderContentLinksContentLinkIdGetAsync
     *
     * Find a content link by id.
     *
     * @param int $content_link_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderContentLinksContentLinkIdGetAsync($content_link_id)
    {
        return $this->restShopBuilderContentLinksContentLinkIdGetAsyncWithHttpInfo($content_link_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderContentLinksContentLinkIdGetAsyncWithHttpInfo
     *
     * Find a content link by id.
     *
     * @param int $content_link_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderContentLinksContentLinkIdGetAsyncWithHttpInfo($content_link_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContentLink';
        $request = $this->restShopBuilderContentLinksContentLinkIdGetRequest($content_link_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderContentLinksContentLinkIdGet'
     *
     * @param int $content_link_id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restShopBuilderContentLinksContentLinkIdGetRequest($content_link_id)
    {
        // verify the required parameter 'content_link_id' is set
        if ($content_link_id === null || (is_array($content_link_id) && count($content_link_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $content_link_id when calling restShopBuilderContentLinksContentLinkIdGet'
            );
        }

        $resourcePath = '/rest/shop_builder/content_links/{contentLinkId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($content_link_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contentLinkId' . '}',
                ObjectSerializer::toPathValue($content_link_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderContentLinksContentLinkIdPut
     *
     * Update a content link.
     *
     * @param int $content_link_id content_link_id (required)
     * @param object $body body (optional)
     *
     * @return PlentyModulesShopBuilderModelsContentLink
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderContentLinksContentLinkIdPut($content_link_id, $body = null)
    {
        list($response) = $this->restShopBuilderContentLinksContentLinkIdPutWithHttpInfo($content_link_id, $body);
        return $response;
    }

    /**
     * Operation restShopBuilderContentLinksContentLinkIdPutWithHttpInfo
     *
     * Update a content link.
     *
     * @param int $content_link_id (required)
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContentLink, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderContentLinksContentLinkIdPutWithHttpInfo($content_link_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContentLink';
        $request = $this->restShopBuilderContentLinksContentLinkIdPutRequest($content_link_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContentLink',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderContentLinksContentLinkIdPutAsync
     *
     * Update a content link.
     *
     * @param int $content_link_id (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderContentLinksContentLinkIdPutAsync($content_link_id, $body = null)
    {
        return $this->restShopBuilderContentLinksContentLinkIdPutAsyncWithHttpInfo($content_link_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderContentLinksContentLinkIdPutAsyncWithHttpInfo
     *
     * Update a content link.
     *
     * @param int $content_link_id (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderContentLinksContentLinkIdPutAsyncWithHttpInfo($content_link_id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContentLink';
        $request = $this->restShopBuilderContentLinksContentLinkIdPutRequest($content_link_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderContentLinksContentLinkIdPut'
     *
     * @param int $content_link_id (required)
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restShopBuilderContentLinksContentLinkIdPutRequest($content_link_id, $body = null)
    {
        // verify the required parameter 'content_link_id' is set
        if ($content_link_id === null || (is_array($content_link_id) && count($content_link_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $content_link_id when calling restShopBuilderContentLinksContentLinkIdPut'
            );
        }

        $resourcePath = '/rest/shop_builder/content_links/{contentLinkId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($content_link_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contentLinkId' . '}',
                ObjectSerializer::toPathValue($content_link_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderContentLinksGet
     *
     * List all content links for a given plugin set
     *
     *
     * @return PlentyModulesShopBuilderModelsContentLink[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderContentLinksGet()
    {
        list($response) = $this->restShopBuilderContentLinksGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation restShopBuilderContentLinksGetWithHttpInfo
     *
     * List all content links for a given plugin set
     *
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContentLink[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderContentLinksGetWithHttpInfo()
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContentLink[]';
        $request = $this->restShopBuilderContentLinksGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContentLink[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderContentLinksGetAsync
     *
     * List all content links for a given plugin set
     *
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderContentLinksGetAsync()
    {
        return $this->restShopBuilderContentLinksGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderContentLinksGetAsyncWithHttpInfo
     *
     * List all content links for a given plugin set
     *
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderContentLinksGetAsyncWithHttpInfo()
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContentLink[]';
        $request = $this->restShopBuilderContentLinksGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderContentLinksGet'
     *
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restShopBuilderContentLinksGetRequest()
    {

        $resourcePath = '/rest/shop_builder/content_links';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderContentLinksPost
     *
     * Link a content to a a layout container of a frontend plugin.
     *
     * @param object $body body (optional)
     *
     * @return PlentyModulesShopBuilderModelsContentLink
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderContentLinksPost($body = null)
    {
        list($response) = $this->restShopBuilderContentLinksPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation restShopBuilderContentLinksPostWithHttpInfo
     *
     * Link a content to a a layout container of a frontend plugin.
     *
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContentLink, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderContentLinksPostWithHttpInfo($body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContentLink';
        $request = $this->restShopBuilderContentLinksPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContentLink',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderContentLinksPostAsync
     *
     * Link a content to a a layout container of a frontend plugin.
     *
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderContentLinksPostAsync($body = null)
    {
        return $this->restShopBuilderContentLinksPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderContentLinksPostAsyncWithHttpInfo
     *
     * Link a content to a a layout container of a frontend plugin.
     *
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderContentLinksPostAsyncWithHttpInfo($body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContentLink';
        $request = $this->restShopBuilderContentLinksPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderContentLinksPost'
     *
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restShopBuilderContentLinksPostRequest($body = null)
    {

        $resourcePath = '/rest/shop_builder/content_links';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderContentsContentIdDelete
     *
     * Delete a content
     *
     * @param int $content_id content_id (required)
     *
     * @return void
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderContentsContentIdDelete($content_id)
    {
        $this->restShopBuilderContentsContentIdDeleteWithHttpInfo($content_id);
    }

    /**
     * Operation restShopBuilderContentsContentIdDeleteWithHttpInfo
     *
     * Delete a content
     *
     * @param int $content_id (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderContentsContentIdDeleteWithHttpInfo($content_id)
    {
        $returnType = '';
        $request = $this->restShopBuilderContentsContentIdDeleteRequest($content_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderContentsContentIdDeleteAsync
     *
     * Delete a content
     *
     * @param int $content_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderContentsContentIdDeleteAsync($content_id)
    {
        return $this->restShopBuilderContentsContentIdDeleteAsyncWithHttpInfo($content_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderContentsContentIdDeleteAsyncWithHttpInfo
     *
     * Delete a content
     *
     * @param int $content_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderContentsContentIdDeleteAsyncWithHttpInfo($content_id)
    {
        $returnType = '';
        $request = $this->restShopBuilderContentsContentIdDeleteRequest($content_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderContentsContentIdDelete'
     *
     * @param int $content_id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restShopBuilderContentsContentIdDeleteRequest($content_id)
    {
        // verify the required parameter 'content_id' is set
        if ($content_id === null || (is_array($content_id) && count($content_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $content_id when calling restShopBuilderContentsContentIdDelete'
            );
        }

        $resourcePath = '/rest/shop_builder/contents/{contentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($content_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contentId' . '}',
                ObjectSerializer::toPathValue($content_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderContentsContentIdGet
     *
     * Find a content by id.
     *
     * @param int $content_id content_id (required)
     *
     * @return PlentyModulesShopBuilderModelsContent
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderContentsContentIdGet($content_id)
    {
        list($response) = $this->restShopBuilderContentsContentIdGetWithHttpInfo($content_id);
        return $response;
    }

    /**
     * Operation restShopBuilderContentsContentIdGetWithHttpInfo
     *
     * Find a content by id.
     *
     * @param int $content_id (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContent, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderContentsContentIdGetWithHttpInfo($content_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContent';
        $request = $this->restShopBuilderContentsContentIdGetRequest($content_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderContentsContentIdGetAsync
     *
     * Find a content by id.
     *
     * @param int $content_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderContentsContentIdGetAsync($content_id)
    {
        return $this->restShopBuilderContentsContentIdGetAsyncWithHttpInfo($content_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderContentsContentIdGetAsyncWithHttpInfo
     *
     * Find a content by id.
     *
     * @param int $content_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderContentsContentIdGetAsyncWithHttpInfo($content_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContent';
        $request = $this->restShopBuilderContentsContentIdGetRequest($content_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderContentsContentIdGet'
     *
     * @param int $content_id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restShopBuilderContentsContentIdGetRequest($content_id)
    {
        // verify the required parameter 'content_id' is set
        if ($content_id === null || (is_array($content_id) && count($content_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $content_id when calling restShopBuilderContentsContentIdGet'
            );
        }

        $resourcePath = '/rest/shop_builder/contents/{contentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($content_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contentId' . '}',
                ObjectSerializer::toPathValue($content_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderContentsContentIdOptions
     *
     * Get cross origin headers.
     *
     * @param int $content_id content_id (required)
     *
     * @return Response
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderContentsContentIdOptions($content_id)
    {
        list($response) = $this->restShopBuilderContentsContentIdOptionsWithHttpInfo($content_id);
        return $response;
    }

    /**
     * Operation restShopBuilderContentsContentIdOptionsWithHttpInfo
     *
     * Get cross origin headers.
     *
     * @param int $content_id (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\Response, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderContentsContentIdOptionsWithHttpInfo($content_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\Response';
        $request = $this->restShopBuilderContentsContentIdOptionsRequest($content_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderContentsContentIdOptionsAsync
     *
     * Get cross origin headers.
     *
     * @param int $content_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderContentsContentIdOptionsAsync($content_id)
    {
        return $this->restShopBuilderContentsContentIdOptionsAsyncWithHttpInfo($content_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderContentsContentIdOptionsAsyncWithHttpInfo
     *
     * Get cross origin headers.
     *
     * @param int $content_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderContentsContentIdOptionsAsyncWithHttpInfo($content_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\Response';
        $request = $this->restShopBuilderContentsContentIdOptionsRequest($content_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderContentsContentIdOptions'
     *
     * @param int $content_id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restShopBuilderContentsContentIdOptionsRequest($content_id)
    {
        // verify the required parameter 'content_id' is set
        if ($content_id === null || (is_array($content_id) && count($content_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $content_id when calling restShopBuilderContentsContentIdOptions'
            );
        }

        $resourcePath = '/rest/shop_builder/contents/{contentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($content_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contentId' . '}',
                ObjectSerializer::toPathValue($content_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'OPTIONS',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderContentsContentIdPost
     *
     * Duplicate a content by id.
     *
     * @param int $content_id content_id (required)
     *
     * @return PlentyModulesShopBuilderModelsContent
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderContentsContentIdPost($content_id)
    {
        list($response) = $this->restShopBuilderContentsContentIdPostWithHttpInfo($content_id);
        return $response;
    }

    /**
     * Operation restShopBuilderContentsContentIdPostWithHttpInfo
     *
     * Duplicate a content by id.
     *
     * @param int $content_id (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContent, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderContentsContentIdPostWithHttpInfo($content_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContent';
        $request = $this->restShopBuilderContentsContentIdPostRequest($content_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderContentsContentIdPostAsync
     *
     * Duplicate a content by id.
     *
     * @param int $content_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderContentsContentIdPostAsync($content_id)
    {
        return $this->restShopBuilderContentsContentIdPostAsyncWithHttpInfo($content_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderContentsContentIdPostAsyncWithHttpInfo
     *
     * Duplicate a content by id.
     *
     * @param int $content_id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderContentsContentIdPostAsyncWithHttpInfo($content_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContent';
        $request = $this->restShopBuilderContentsContentIdPostRequest($content_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderContentsContentIdPost'
     *
     * @param int $content_id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restShopBuilderContentsContentIdPostRequest($content_id)
    {
        // verify the required parameter 'content_id' is set
        if ($content_id === null || (is_array($content_id) && count($content_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $content_id when calling restShopBuilderContentsContentIdPost'
            );
        }

        $resourcePath = '/rest/shop_builder/contents/{contentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($content_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contentId' . '}',
                ObjectSerializer::toPathValue($content_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderContentsContentIdPut
     *
     * Update a content.
     *
     * @param int $content_id content_id (required)
     * @param object $body body (optional)
     * @param string $frontend_lang Language to be used when rendering frontend widgets. (optional)
     *
     * @return PlentyModulesShopBuilderModelsContent
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderContentsContentIdPut($content_id, $body = null, $frontend_lang = null)
    {
        list($response) = $this->restShopBuilderContentsContentIdPutWithHttpInfo($content_id, $body, $frontend_lang);
        return $response;
    }

    /**
     * Operation restShopBuilderContentsContentIdPutWithHttpInfo
     *
     * Update a content.
     *
     * @param int $content_id (required)
     * @param object $body (optional)
     * @param string $frontend_lang Language to be used when rendering frontend widgets. (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContent, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderContentsContentIdPutWithHttpInfo($content_id, $body = null, $frontend_lang = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContent';
        $request = $this->restShopBuilderContentsContentIdPutRequest($content_id, $body, $frontend_lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderContentsContentIdPutAsync
     *
     * Update a content.
     *
     * @param int $content_id (required)
     * @param object $body (optional)
     * @param string $frontend_lang Language to be used when rendering frontend widgets. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderContentsContentIdPutAsync($content_id, $body = null, $frontend_lang = null)
    {
        return $this->restShopBuilderContentsContentIdPutAsyncWithHttpInfo($content_id, $body, $frontend_lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderContentsContentIdPutAsyncWithHttpInfo
     *
     * Update a content.
     *
     * @param int $content_id (required)
     * @param object $body (optional)
     * @param string $frontend_lang Language to be used when rendering frontend widgets. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderContentsContentIdPutAsyncWithHttpInfo($content_id, $body = null, $frontend_lang = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContent';
        $request = $this->restShopBuilderContentsContentIdPutRequest($content_id, $body, $frontend_lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderContentsContentIdPut'
     *
     * @param int $content_id (required)
     * @param object $body (optional)
     * @param string $frontend_lang Language to be used when rendering frontend widgets. (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restShopBuilderContentsContentIdPutRequest($content_id, $body = null, $frontend_lang = null)
    {
        // verify the required parameter 'content_id' is set
        if ($content_id === null || (is_array($content_id) && count($content_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $content_id when calling restShopBuilderContentsContentIdPut'
            );
        }

        $resourcePath = '/rest/shop_builder/contents/{contentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($frontend_lang !== null) {
            $queryParams['frontendLang'] = ObjectSerializer::toQueryValue($frontend_lang);
        }

        // path params
        if ($content_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contentId' . '}',
                ObjectSerializer::toPathValue($content_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderContentsGet
     *
     * List all contents.
     *
     *
     * @return PlentyModulesShopBuilderModelsContent[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderContentsGet()
    {
        list($response) = $this->restShopBuilderContentsGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation restShopBuilderContentsGetWithHttpInfo
     *
     * List all contents.
     *
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContent[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderContentsGetWithHttpInfo()
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContent[]';
        $request = $this->restShopBuilderContentsGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContent[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderContentsGetAsync
     *
     * List all contents.
     *
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderContentsGetAsync()
    {
        return $this->restShopBuilderContentsGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderContentsGetAsyncWithHttpInfo
     *
     * List all contents.
     *
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderContentsGetAsyncWithHttpInfo()
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContent[]';
        $request = $this->restShopBuilderContentsGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderContentsGet'
     *
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restShopBuilderContentsGetRequest()
    {

        $resourcePath = '/rest/shop_builder/contents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderContentsPost
     *
     * Create a new content.
     *
     * @param object $body body (optional)
     * @param string $frontend_lang Language to be used when rendering frontend widgets. (optional)
     *
     * @return PlentyModulesShopBuilderModelsContent
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderContentsPost($body = null, $frontend_lang = null)
    {
        list($response) = $this->restShopBuilderContentsPostWithHttpInfo($body, $frontend_lang);
        return $response;
    }

    /**
     * Operation restShopBuilderContentsPostWithHttpInfo
     *
     * Create a new content.
     *
     * @param object $body (optional)
     * @param string $frontend_lang Language to be used when rendering frontend widgets. (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContent, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderContentsPostWithHttpInfo($body = null, $frontend_lang = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContent';
        $request = $this->restShopBuilderContentsPostRequest($body, $frontend_lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderContentsPostAsync
     *
     * Create a new content.
     *
     * @param object $body (optional)
     * @param string $frontend_lang Language to be used when rendering frontend widgets. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderContentsPostAsync($body = null, $frontend_lang = null)
    {
        return $this->restShopBuilderContentsPostAsyncWithHttpInfo($body, $frontend_lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderContentsPostAsyncWithHttpInfo
     *
     * Create a new content.
     *
     * @param object $body (optional)
     * @param string $frontend_lang Language to be used when rendering frontend widgets. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderContentsPostAsyncWithHttpInfo($body = null, $frontend_lang = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContent';
        $request = $this->restShopBuilderContentsPostRequest($body, $frontend_lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderContentsPost'
     *
     * @param object $body (optional)
     * @param string $frontend_lang Language to be used when rendering frontend widgets. (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restShopBuilderContentsPostRequest($body = null, $frontend_lang = null)
    {

        $resourcePath = '/rest/shop_builder/contents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($frontend_lang !== null) {
            $queryParams['frontendLang'] = ObjectSerializer::toQueryValue($frontend_lang);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderContentsPut
     *
     * Generate templates for all contents.
     *
     *
     * @return PlentyDataSimpleRestResponse
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderContentsPut()
    {
        list($response) = $this->restShopBuilderContentsPutWithHttpInfo();
        return $response;
    }

    /**
     * Operation restShopBuilderContentsPutWithHttpInfo
     *
     * Generate templates for all contents.
     *
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyDataSimpleRestResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderContentsPutWithHttpInfo()
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyDataSimpleRestResponse';
        $request = $this->restShopBuilderContentsPutRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyDataSimpleRestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderContentsPutAsync
     *
     * Generate templates for all contents.
     *
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderContentsPutAsync()
    {
        return $this->restShopBuilderContentsPutAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderContentsPutAsyncWithHttpInfo
     *
     * Generate templates for all contents.
     *
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderContentsPutAsyncWithHttpInfo()
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyDataSimpleRestResponse';
        $request = $this->restShopBuilderContentsPutRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderContentsPut'
     *
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restShopBuilderContentsPutRequest()
    {

        $resourcePath = '/rest/shop_builder/contents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderContentsSearchGet
     *
     * Search for contents.
     *
     * @param int $page page (optional)
     * @param int $items_per_page items_per_page (optional)
     * @param string $data_provider_name Name of the content (optional)
     * @param string $type Type of the content (optional)
     * @param string $container_name Name of the linked container (optional)
     * @param int $plugin_set_id Id of the linked plugin set (optional)
     * @param string $language Language of the content link (optional)
     * @param int $active Active state of the content link (optional)
     *
     * @return object
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     */
    public function restShopBuilderContentsSearchGet($page = null, $items_per_page = null, $data_provider_name = null, $type = null, $container_name = null, $plugin_set_id = null, $language = null, $active = null)
    {
        list($response) = $this->restShopBuilderContentsSearchGetWithHttpInfo($page, $items_per_page, $data_provider_name, $type, $container_name, $plugin_set_id, $language, $active);
        return $response;
    }

    /**
     * Operation restShopBuilderContentsSearchGetWithHttpInfo
     *
     * Search for contents.
     *
     * @param int $page (optional)
     * @param int $items_per_page (optional)
     * @param string $data_provider_name Name of the content (optional)
     * @param string $type Type of the content (optional)
     * @param string $container_name Name of the linked container (optional)
     * @param int $plugin_set_id Id of the linked plugin set (optional)
     * @param string $language Language of the content link (optional)
     * @param int $active Active state of the content link (optional)
     *
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     */
    public function restShopBuilderContentsSearchGetWithHttpInfo($page = null, $items_per_page = null, $data_provider_name = null, $type = null, $container_name = null, $plugin_set_id = null, $language = null, $active = null)
    {
        $returnType = 'object';
        $request = $this->restShopBuilderContentsSearchGetRequest($page, $items_per_page, $data_provider_name, $type, $container_name, $plugin_set_id, $language, $active);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderContentsSearchGetAsync
     *
     * Search for contents.
     *
     * @param int $page (optional)
     * @param int $items_per_page (optional)
     * @param string $data_provider_name Name of the content (optional)
     * @param string $type Type of the content (optional)
     * @param string $container_name Name of the linked container (optional)
     * @param int $plugin_set_id Id of the linked plugin set (optional)
     * @param string $language Language of the content link (optional)
     * @param int $active Active state of the content link (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderContentsSearchGetAsync($page = null, $items_per_page = null, $data_provider_name = null, $type = null, $container_name = null, $plugin_set_id = null, $language = null, $active = null)
    {
        return $this->restShopBuilderContentsSearchGetAsyncWithHttpInfo($page, $items_per_page, $data_provider_name, $type, $container_name, $plugin_set_id, $language, $active)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderContentsSearchGetAsyncWithHttpInfo
     *
     * Search for contents.
     *
     * @param int $page (optional)
     * @param int $items_per_page (optional)
     * @param string $data_provider_name Name of the content (optional)
     * @param string $type Type of the content (optional)
     * @param string $container_name Name of the linked container (optional)
     * @param int $plugin_set_id Id of the linked plugin set (optional)
     * @param string $language Language of the content link (optional)
     * @param int $active Active state of the content link (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderContentsSearchGetAsyncWithHttpInfo($page = null, $items_per_page = null, $data_provider_name = null, $type = null, $container_name = null, $plugin_set_id = null, $language = null, $active = null)
    {
        $returnType = 'object';
        $request = $this->restShopBuilderContentsSearchGetRequest($page, $items_per_page, $data_provider_name, $type, $container_name, $plugin_set_id, $language, $active);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderContentsSearchGet'
     *
     * @param int $page (optional)
     * @param int $items_per_page (optional)
     * @param string $data_provider_name Name of the content (optional)
     * @param string $type Type of the content (optional)
     * @param string $container_name Name of the linked container (optional)
     * @param int $plugin_set_id Id of the linked plugin set (optional)
     * @param string $language Language of the content link (optional)
     * @param int $active Active state of the content link (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restShopBuilderContentsSearchGetRequest($page = null, $items_per_page = null, $data_provider_name = null, $type = null, $container_name = null, $plugin_set_id = null, $language = null, $active = null)
    {

        $resourcePath = '/rest/shop_builder/contents/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($items_per_page !== null) {
            $queryParams['itemsPerPage'] = ObjectSerializer::toQueryValue($items_per_page);
        }
        // query params
        if ($data_provider_name !== null) {
            $queryParams['dataProviderName'] = ObjectSerializer::toQueryValue($data_provider_name);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($container_name !== null) {
            $queryParams['containerName'] = ObjectSerializer::toQueryValue($container_name);
        }
        // query params
        if ($plugin_set_id !== null) {
            $queryParams['pluginSetId'] = ObjectSerializer::toQueryValue($plugin_set_id);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($active !== null) {
            $queryParams['active'] = ObjectSerializer::toQueryValue($active);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderPagesGet
     *
     * List content pages from all plugins in a given plugin set.
     *
     *
     * @return PlentyModulesShopBuilderModelsContentPage[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderPagesGet()
    {
        list($response) = $this->restShopBuilderPagesGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation restShopBuilderPagesGetWithHttpInfo
     *
     * List content pages from all plugins in a given plugin set.
     *
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContentPage[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderPagesGetWithHttpInfo()
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContentPage[]';
        $request = $this->restShopBuilderPagesGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContentPage[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderPagesGetAsync
     *
     * List content pages from all plugins in a given plugin set.
     *
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderPagesGetAsync()
    {
        return $this->restShopBuilderPagesGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderPagesGetAsyncWithHttpInfo
     *
     * List content pages from all plugins in a given plugin set.
     *
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderPagesGetAsyncWithHttpInfo()
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesShopBuilderModelsContentPage[]';
        $request = $this->restShopBuilderPagesGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderPagesGet'
     *
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restShopBuilderPagesGetRequest()
    {

        $resourcePath = '/rest/shop_builder/pages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderWidgetsGet
     *
     * List all widgets provided by all frontend plugins of a given plugin set.
     *
     * @param string $identifier Filter results by widget identifier. (optional)
     *
     * @return IlluminateHttpResponse
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderWidgetsGet($identifier = null)
    {
        list($response) = $this->restShopBuilderWidgetsGetWithHttpInfo($identifier);
        return $response;
    }

    /**
     * Operation restShopBuilderWidgetsGetWithHttpInfo
     *
     * List all widgets provided by all frontend plugins of a given plugin set.
     *
     * @param string $identifier Filter results by widget identifier. (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\IlluminateHttpResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderWidgetsGetWithHttpInfo($identifier = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\IlluminateHttpResponse';
        $request = $this->restShopBuilderWidgetsGetRequest($identifier);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\IlluminateHttpResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderWidgetsGetAsync
     *
     * List all widgets provided by all frontend plugins of a given plugin set.
     *
     * @param string $identifier Filter results by widget identifier. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderWidgetsGetAsync($identifier = null)
    {
        return $this->restShopBuilderWidgetsGetAsyncWithHttpInfo($identifier)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderWidgetsGetAsyncWithHttpInfo
     *
     * List all widgets provided by all frontend plugins of a given plugin set.
     *
     * @param string $identifier Filter results by widget identifier. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderWidgetsGetAsyncWithHttpInfo($identifier = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\IlluminateHttpResponse';
        $request = $this->restShopBuilderWidgetsGetRequest($identifier);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderWidgetsGet'
     *
     * @param string $identifier Filter results by widget identifier. (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restShopBuilderWidgetsGetRequest($identifier = null)
    {

        $resourcePath = '/rest/shop_builder/widgets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($identifier !== null) {
            $queryParams['identifier'] = ObjectSerializer::toQueryValue($identifier);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderWidgetsOptions
     *
     * Get cross origin headers.
     *
     *
     * @return IlluminateHttpResponse
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderWidgetsOptions()
    {
        list($response) = $this->restShopBuilderWidgetsOptionsWithHttpInfo();
        return $response;
    }

    /**
     * Operation restShopBuilderWidgetsOptionsWithHttpInfo
     *
     * Get cross origin headers.
     *
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\IlluminateHttpResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderWidgetsOptionsWithHttpInfo()
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\IlluminateHttpResponse';
        $request = $this->restShopBuilderWidgetsOptionsRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\IlluminateHttpResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderWidgetsOptionsAsync
     *
     * Get cross origin headers.
     *
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderWidgetsOptionsAsync()
    {
        return $this->restShopBuilderWidgetsOptionsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderWidgetsOptionsAsyncWithHttpInfo
     *
     * Get cross origin headers.
     *
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderWidgetsOptionsAsyncWithHttpInfo()
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\IlluminateHttpResponse';
        $request = $this->restShopBuilderWidgetsOptionsRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderWidgetsOptions'
     *
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restShopBuilderWidgetsOptionsRequest()
    {

        $resourcePath = '/rest/shop_builder/widgets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'OPTIONS',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restShopBuilderWidgetsPost
     *
     * Render the preview for widgets.
     *
     * @param string $frontend_lang Language to be used when rendering frontend widgets. (optional)
     *
     * @return IlluminateHttpResponse
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderWidgetsPost($frontend_lang = null)
    {
        list($response) = $this->restShopBuilderWidgetsPostWithHttpInfo($frontend_lang);
        return $response;
    }

    /**
     * Operation restShopBuilderWidgetsPostWithHttpInfo
     *
     * Render the preview for widgets.
     *
     * @param string $frontend_lang Language to be used when rendering frontend widgets. (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\IlluminateHttpResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restShopBuilderWidgetsPostWithHttpInfo($frontend_lang = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\IlluminateHttpResponse';
        $request = $this->restShopBuilderWidgetsPostRequest($frontend_lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\IlluminateHttpResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restShopBuilderWidgetsPostAsync
     *
     * Render the preview for widgets.
     *
     * @param string $frontend_lang Language to be used when rendering frontend widgets. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderWidgetsPostAsync($frontend_lang = null)
    {
        return $this->restShopBuilderWidgetsPostAsyncWithHttpInfo($frontend_lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restShopBuilderWidgetsPostAsyncWithHttpInfo
     *
     * Render the preview for widgets.
     *
     * @param string $frontend_lang Language to be used when rendering frontend widgets. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restShopBuilderWidgetsPostAsyncWithHttpInfo($frontend_lang = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\IlluminateHttpResponse';
        $request = $this->restShopBuilderWidgetsPostRequest($frontend_lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restShopBuilderWidgetsPost'
     *
     * @param string $frontend_lang Language to be used when rendering frontend widgets. (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restShopBuilderWidgetsPostRequest($frontend_lang = null)
    {

        $resourcePath = '/rest/shop_builder/widgets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($frontend_lang !== null) {
            $queryParams['frontendLang'] = ObjectSerializer::toQueryValue($frontend_lang);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @return array of http client options
     * @throws RuntimeException on file opening failure
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

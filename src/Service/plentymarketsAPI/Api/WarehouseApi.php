<?php
/**
 * WarehouseApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * WarehouseApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WarehouseApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation restWarehousesLayoutsPost
     *
     * Create a warehouse location layout
     *
     * @param  int $parent_id The parent ID of the warehouse location dimension (required)
     * @param  int $warehouse_id The warehouse ID of the warehouse location dimension (required)
     * @param  int $level The level of the warehouse location dimension (required)
     * @param  string $name The name of the warehouse location dimension (required)
     * @param  string $shortcut The shortcut of the warehouse location dimension (required)
     * @param  string $separator The separator of the warehouse location dimension (required)
     * @param  int $is_active_for_pickup_path Active flag for pickup path of the warehouse location dimension (required)
     * @param  int $parent_id2 The parent ID of the warehouse location level (required)
     * @param  int $dimension_id The warehouse location dimension ID of the warehouse location level (required)
     * @param  int $position The position of the warehouse location level (required)
     * @param  string $name2 The name of the warehouse location level (required)
     * @param  int $level_id The warehouse location level ID of the warehouse location (required)
     * @param  string $label The label of the warehouse location (required)
     * @param  string $purpose_key The location type key of the warehouse location (required)
     * @param  string $status_key The location status key of the warehouse location (required)
     * @param  int $position2 The position of the warehouse location (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationDimension
     */
    public function restWarehousesLayoutsPost($parent_id, $warehouse_id, $level, $name, $shortcut, $separator, $is_active_for_pickup_path, $parent_id2, $dimension_id, $position, $name2, $level_id, $label, $purpose_key, $status_key, $position2)
    {
        list($response) = $this->restWarehousesLayoutsPostWithHttpInfo($parent_id, $warehouse_id, $level, $name, $shortcut, $separator, $is_active_for_pickup_path, $parent_id2, $dimension_id, $position, $name2, $level_id, $label, $purpose_key, $status_key, $position2);
        return $response;
    }

    /**
     * Operation restWarehousesLayoutsPostWithHttpInfo
     *
     * Create a warehouse location layout
     *
     * @param  int $parent_id The parent ID of the warehouse location dimension (required)
     * @param  int $warehouse_id The warehouse ID of the warehouse location dimension (required)
     * @param  int $level The level of the warehouse location dimension (required)
     * @param  string $name The name of the warehouse location dimension (required)
     * @param  string $shortcut The shortcut of the warehouse location dimension (required)
     * @param  string $separator The separator of the warehouse location dimension (required)
     * @param  int $is_active_for_pickup_path Active flag for pickup path of the warehouse location dimension (required)
     * @param  int $parent_id2 The parent ID of the warehouse location level (required)
     * @param  int $dimension_id The warehouse location dimension ID of the warehouse location level (required)
     * @param  int $position The position of the warehouse location level (required)
     * @param  string $name2 The name of the warehouse location level (required)
     * @param  int $level_id The warehouse location level ID of the warehouse location (required)
     * @param  string $label The label of the warehouse location (required)
     * @param  string $purpose_key The location type key of the warehouse location (required)
     * @param  string $status_key The location status key of the warehouse location (required)
     * @param  int $position2 The position of the warehouse location (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationDimension, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWarehousesLayoutsPostWithHttpInfo($parent_id, $warehouse_id, $level, $name, $shortcut, $separator, $is_active_for_pickup_path, $parent_id2, $dimension_id, $position, $name2, $level_id, $label, $purpose_key, $status_key, $position2)
    {
        $returnType = '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationDimension';
        $request = $this->restWarehousesLayoutsPostRequest($parent_id, $warehouse_id, $level, $name, $shortcut, $separator, $is_active_for_pickup_path, $parent_id2, $dimension_id, $position, $name2, $level_id, $label, $purpose_key, $status_key, $position2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationDimension',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWarehousesLayoutsPostAsync
     *
     * Create a warehouse location layout
     *
     * @param  int $parent_id The parent ID of the warehouse location dimension (required)
     * @param  int $warehouse_id The warehouse ID of the warehouse location dimension (required)
     * @param  int $level The level of the warehouse location dimension (required)
     * @param  string $name The name of the warehouse location dimension (required)
     * @param  string $shortcut The shortcut of the warehouse location dimension (required)
     * @param  string $separator The separator of the warehouse location dimension (required)
     * @param  int $is_active_for_pickup_path Active flag for pickup path of the warehouse location dimension (required)
     * @param  int $parent_id2 The parent ID of the warehouse location level (required)
     * @param  int $dimension_id The warehouse location dimension ID of the warehouse location level (required)
     * @param  int $position The position of the warehouse location level (required)
     * @param  string $name2 The name of the warehouse location level (required)
     * @param  int $level_id The warehouse location level ID of the warehouse location (required)
     * @param  string $label The label of the warehouse location (required)
     * @param  string $purpose_key The location type key of the warehouse location (required)
     * @param  string $status_key The location status key of the warehouse location (required)
     * @param  int $position2 The position of the warehouse location (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLayoutsPostAsync($parent_id, $warehouse_id, $level, $name, $shortcut, $separator, $is_active_for_pickup_path, $parent_id2, $dimension_id, $position, $name2, $level_id, $label, $purpose_key, $status_key, $position2)
    {
        return $this->restWarehousesLayoutsPostAsyncWithHttpInfo($parent_id, $warehouse_id, $level, $name, $shortcut, $separator, $is_active_for_pickup_path, $parent_id2, $dimension_id, $position, $name2, $level_id, $label, $purpose_key, $status_key, $position2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWarehousesLayoutsPostAsyncWithHttpInfo
     *
     * Create a warehouse location layout
     *
     * @param  int $parent_id The parent ID of the warehouse location dimension (required)
     * @param  int $warehouse_id The warehouse ID of the warehouse location dimension (required)
     * @param  int $level The level of the warehouse location dimension (required)
     * @param  string $name The name of the warehouse location dimension (required)
     * @param  string $shortcut The shortcut of the warehouse location dimension (required)
     * @param  string $separator The separator of the warehouse location dimension (required)
     * @param  int $is_active_for_pickup_path Active flag for pickup path of the warehouse location dimension (required)
     * @param  int $parent_id2 The parent ID of the warehouse location level (required)
     * @param  int $dimension_id The warehouse location dimension ID of the warehouse location level (required)
     * @param  int $position The position of the warehouse location level (required)
     * @param  string $name2 The name of the warehouse location level (required)
     * @param  int $level_id The warehouse location level ID of the warehouse location (required)
     * @param  string $label The label of the warehouse location (required)
     * @param  string $purpose_key The location type key of the warehouse location (required)
     * @param  string $status_key The location status key of the warehouse location (required)
     * @param  int $position2 The position of the warehouse location (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLayoutsPostAsyncWithHttpInfo($parent_id, $warehouse_id, $level, $name, $shortcut, $separator, $is_active_for_pickup_path, $parent_id2, $dimension_id, $position, $name2, $level_id, $label, $purpose_key, $status_key, $position2)
    {
        $returnType = '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationDimension';
        $request = $this->restWarehousesLayoutsPostRequest($parent_id, $warehouse_id, $level, $name, $shortcut, $separator, $is_active_for_pickup_path, $parent_id2, $dimension_id, $position, $name2, $level_id, $label, $purpose_key, $status_key, $position2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWarehousesLayoutsPost'
     *
     * @param  int $parent_id The parent ID of the warehouse location dimension (required)
     * @param  int $warehouse_id The warehouse ID of the warehouse location dimension (required)
     * @param  int $level The level of the warehouse location dimension (required)
     * @param  string $name The name of the warehouse location dimension (required)
     * @param  string $shortcut The shortcut of the warehouse location dimension (required)
     * @param  string $separator The separator of the warehouse location dimension (required)
     * @param  int $is_active_for_pickup_path Active flag for pickup path of the warehouse location dimension (required)
     * @param  int $parent_id2 The parent ID of the warehouse location level (required)
     * @param  int $dimension_id The warehouse location dimension ID of the warehouse location level (required)
     * @param  int $position The position of the warehouse location level (required)
     * @param  string $name2 The name of the warehouse location level (required)
     * @param  int $level_id The warehouse location level ID of the warehouse location (required)
     * @param  string $label The label of the warehouse location (required)
     * @param  string $purpose_key The location type key of the warehouse location (required)
     * @param  string $status_key The location status key of the warehouse location (required)
     * @param  int $position2 The position of the warehouse location (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restWarehousesLayoutsPostRequest($parent_id, $warehouse_id, $level, $name, $shortcut, $separator, $is_active_for_pickup_path, $parent_id2, $dimension_id, $position, $name2, $level_id, $label, $purpose_key, $status_key, $position2)
    {
        // verify the required parameter 'parent_id' is set
        if ($parent_id === null || (is_array($parent_id) && count($parent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parent_id when calling restWarehousesLayoutsPost'
            );
        }
        // verify the required parameter 'warehouse_id' is set
        if ($warehouse_id === null || (is_array($warehouse_id) && count($warehouse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_id when calling restWarehousesLayoutsPost'
            );
        }
        // verify the required parameter 'level' is set
        if ($level === null || (is_array($level) && count($level) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $level when calling restWarehousesLayoutsPost'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling restWarehousesLayoutsPost'
            );
        }
        // verify the required parameter 'shortcut' is set
        if ($shortcut === null || (is_array($shortcut) && count($shortcut) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shortcut when calling restWarehousesLayoutsPost'
            );
        }
        // verify the required parameter 'separator' is set
        if ($separator === null || (is_array($separator) && count($separator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $separator when calling restWarehousesLayoutsPost'
            );
        }
        // verify the required parameter 'is_active_for_pickup_path' is set
        if ($is_active_for_pickup_path === null || (is_array($is_active_for_pickup_path) && count($is_active_for_pickup_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_active_for_pickup_path when calling restWarehousesLayoutsPost'
            );
        }
        // verify the required parameter 'parent_id2' is set
        if ($parent_id2 === null || (is_array($parent_id2) && count($parent_id2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parent_id2 when calling restWarehousesLayoutsPost'
            );
        }
        // verify the required parameter 'dimension_id' is set
        if ($dimension_id === null || (is_array($dimension_id) && count($dimension_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dimension_id when calling restWarehousesLayoutsPost'
            );
        }
        // verify the required parameter 'position' is set
        if ($position === null || (is_array($position) && count($position) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $position when calling restWarehousesLayoutsPost'
            );
        }
        // verify the required parameter 'name2' is set
        if ($name2 === null || (is_array($name2) && count($name2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name2 when calling restWarehousesLayoutsPost'
            );
        }
        // verify the required parameter 'level_id' is set
        if ($level_id === null || (is_array($level_id) && count($level_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $level_id when calling restWarehousesLayoutsPost'
            );
        }
        // verify the required parameter 'label' is set
        if ($label === null || (is_array($label) && count($label) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $label when calling restWarehousesLayoutsPost'
            );
        }
        // verify the required parameter 'purpose_key' is set
        if ($purpose_key === null || (is_array($purpose_key) && count($purpose_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purpose_key when calling restWarehousesLayoutsPost'
            );
        }
        // verify the required parameter 'status_key' is set
        if ($status_key === null || (is_array($status_key) && count($status_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $status_key when calling restWarehousesLayoutsPost'
            );
        }
        // verify the required parameter 'position2' is set
        if ($position2 === null || (is_array($position2) && count($position2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $position2 when calling restWarehousesLayoutsPost'
            );
        }

        $resourcePath = '/rest/warehouses/layouts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($parent_id !== null) {
            $queryParams['parentId'] = ObjectSerializer::toQueryValue($parent_id);
        }
        // query params
        if ($warehouse_id !== null) {
            $queryParams['warehouseId'] = ObjectSerializer::toQueryValue($warehouse_id);
        }
        // query params
        if ($level !== null) {
            $queryParams['level'] = ObjectSerializer::toQueryValue($level);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($shortcut !== null) {
            $queryParams['shortcut'] = ObjectSerializer::toQueryValue($shortcut);
        }
        // query params
        if ($separator !== null) {
            $queryParams['separator'] = ObjectSerializer::toQueryValue($separator);
        }
        // query params
        if ($is_active_for_pickup_path !== null) {
            $queryParams['isActiveForPickupPath'] = ObjectSerializer::toQueryValue($is_active_for_pickup_path);
        }
        // query params
        if ($parent_id2 !== null) {
            $queryParams['parentId'] = ObjectSerializer::toQueryValue($parent_id2);
        }
        // query params
        if ($dimension_id !== null) {
            $queryParams['dimensionId'] = ObjectSerializer::toQueryValue($dimension_id);
        }
        // query params
        if ($position !== null) {
            $queryParams['position'] = ObjectSerializer::toQueryValue($position);
        }
        // query params
        if ($name2 !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name2);
        }
        // query params
        if ($level_id !== null) {
            $queryParams['levelId'] = ObjectSerializer::toQueryValue($level_id);
        }
        // query params
        if ($label !== null) {
            $queryParams['label'] = ObjectSerializer::toQueryValue($label);
        }
        // query params
        if ($purpose_key !== null) {
            $queryParams['purposeKey'] = ObjectSerializer::toQueryValue($purpose_key);
        }
        // query params
        if ($status_key !== null) {
            $queryParams['statusKey'] = ObjectSerializer::toQueryValue($status_key);
        }
        // query params
        if ($position2 !== null) {
            $queryParams['position'] = ObjectSerializer::toQueryValue($position2);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWarehousesLocationsAvailabilityWarehouseLocationIdGet
     *
     * Get availability for storage location
     *
     * @param  int $warehouse_location_id The ID of the warehouse location (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Mixed[]
     */
    public function restWarehousesLocationsAvailabilityWarehouseLocationIdGet($warehouse_location_id)
    {
        list($response) = $this->restWarehousesLocationsAvailabilityWarehouseLocationIdGetWithHttpInfo($warehouse_location_id);
        return $response;
    }

    /**
     * Operation restWarehousesLocationsAvailabilityWarehouseLocationIdGetWithHttpInfo
     *
     * Get availability for storage location
     *
     * @param  int $warehouse_location_id The ID of the warehouse location (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Mixed[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restWarehousesLocationsAvailabilityWarehouseLocationIdGetWithHttpInfo($warehouse_location_id)
    {
        $returnType = '\Swagger\Client\Model\Mixed[]';
        $request = $this->restWarehousesLocationsAvailabilityWarehouseLocationIdGetRequest($warehouse_location_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Mixed[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWarehousesLocationsAvailabilityWarehouseLocationIdGetAsync
     *
     * Get availability for storage location
     *
     * @param  int $warehouse_location_id The ID of the warehouse location (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsAvailabilityWarehouseLocationIdGetAsync($warehouse_location_id)
    {
        return $this->restWarehousesLocationsAvailabilityWarehouseLocationIdGetAsyncWithHttpInfo($warehouse_location_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWarehousesLocationsAvailabilityWarehouseLocationIdGetAsyncWithHttpInfo
     *
     * Get availability for storage location
     *
     * @param  int $warehouse_location_id The ID of the warehouse location (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsAvailabilityWarehouseLocationIdGetAsyncWithHttpInfo($warehouse_location_id)
    {
        $returnType = '\Swagger\Client\Model\Mixed[]';
        $request = $this->restWarehousesLocationsAvailabilityWarehouseLocationIdGetRequest($warehouse_location_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWarehousesLocationsAvailabilityWarehouseLocationIdGet'
     *
     * @param  int $warehouse_location_id The ID of the warehouse location (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restWarehousesLocationsAvailabilityWarehouseLocationIdGetRequest($warehouse_location_id)
    {
        // verify the required parameter 'warehouse_location_id' is set
        if ($warehouse_location_id === null || (is_array($warehouse_location_id) && count($warehouse_location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_location_id when calling restWarehousesLocationsAvailabilityWarehouseLocationIdGet'
            );
        }

        $resourcePath = '/rest/warehouses/locations/availability/{warehouseLocationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($warehouse_location_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseLocationId' . '}',
                ObjectSerializer::toPathValue($warehouse_location_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWarehousesLocationsDelete
     *
     * Delete multiple warehouse locations
     *
     * @param  int $warehouse_location_ids An array containing all the ID&#x27;s for the warehouse locations that need to be deleted (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restWarehousesLocationsDelete($warehouse_location_ids)
    {
        $this->restWarehousesLocationsDeleteWithHttpInfo($warehouse_location_ids);
    }

    /**
     * Operation restWarehousesLocationsDeleteWithHttpInfo
     *
     * Delete multiple warehouse locations
     *
     * @param  int $warehouse_location_ids An array containing all the ID&#x27;s for the warehouse locations that need to be deleted (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWarehousesLocationsDeleteWithHttpInfo($warehouse_location_ids)
    {
        $returnType = '';
        $request = $this->restWarehousesLocationsDeleteRequest($warehouse_location_ids);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restWarehousesLocationsDeleteAsync
     *
     * Delete multiple warehouse locations
     *
     * @param  int $warehouse_location_ids An array containing all the ID&#x27;s for the warehouse locations that need to be deleted (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsDeleteAsync($warehouse_location_ids)
    {
        return $this->restWarehousesLocationsDeleteAsyncWithHttpInfo($warehouse_location_ids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWarehousesLocationsDeleteAsyncWithHttpInfo
     *
     * Delete multiple warehouse locations
     *
     * @param  int $warehouse_location_ids An array containing all the ID&#x27;s for the warehouse locations that need to be deleted (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsDeleteAsyncWithHttpInfo($warehouse_location_ids)
    {
        $returnType = '';
        $request = $this->restWarehousesLocationsDeleteRequest($warehouse_location_ids);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWarehousesLocationsDelete'
     *
     * @param  int $warehouse_location_ids An array containing all the ID&#x27;s for the warehouse locations that need to be deleted (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restWarehousesLocationsDeleteRequest($warehouse_location_ids)
    {
        // verify the required parameter 'warehouse_location_ids' is set
        if ($warehouse_location_ids === null || (is_array($warehouse_location_ids) && count($warehouse_location_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_location_ids when calling restWarehousesLocationsDelete'
            );
        }

        $resourcePath = '/rest/warehouses/locations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($warehouse_location_ids !== null) {
            $queryParams['warehouseLocationIds'] = ObjectSerializer::toQueryValue($warehouse_location_ids);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWarehousesLocationsDetailsGet
     *
     * Get warehouse location details
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function restWarehousesLocationsDetailsGet()
    {
        list($response) = $this->restWarehousesLocationsDetailsGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation restWarehousesLocationsDetailsGetWithHttpInfo
     *
     * Get warehouse location details
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWarehousesLocationsDetailsGetWithHttpInfo()
    {
        $returnType = 'string';
        $request = $this->restWarehousesLocationsDetailsGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWarehousesLocationsDetailsGetAsync
     *
     * Get warehouse location details
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsDetailsGetAsync()
    {
        return $this->restWarehousesLocationsDetailsGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWarehousesLocationsDetailsGetAsyncWithHttpInfo
     *
     * Get warehouse location details
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsDetailsGetAsyncWithHttpInfo()
    {
        $returnType = 'string';
        $request = $this->restWarehousesLocationsDetailsGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWarehousesLocationsDetailsGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restWarehousesLocationsDetailsGetRequest()
    {

        $resourcePath = '/rest/warehouses/locations/details';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWarehousesLocationsDimensionsPost
     *
     * Create a warehouse location dimension
     *
     * @param  int $parent_id The parent ID of the warehouse location dimension (required)
     * @param  int $warehouse_id The warehouse ID of the warehouse location dimension (required)
     * @param  int $level The level of the warehouse location dimension (required)
     * @param  string $name The name of the warehouse location dimension (required)
     * @param  string $shortcut The shortcut of the warehouse location dimension (required)
     * @param  string $separator The separator of the warehouse location dimension (required)
     * @param  int $is_active_for_pickup_path Active flag for pickup path of the warehouse location dimension (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationDimension
     */
    public function restWarehousesLocationsDimensionsPost($parent_id, $warehouse_id, $level, $name, $shortcut, $separator, $is_active_for_pickup_path)
    {
        list($response) = $this->restWarehousesLocationsDimensionsPostWithHttpInfo($parent_id, $warehouse_id, $level, $name, $shortcut, $separator, $is_active_for_pickup_path);
        return $response;
    }

    /**
     * Operation restWarehousesLocationsDimensionsPostWithHttpInfo
     *
     * Create a warehouse location dimension
     *
     * @param  int $parent_id The parent ID of the warehouse location dimension (required)
     * @param  int $warehouse_id The warehouse ID of the warehouse location dimension (required)
     * @param  int $level The level of the warehouse location dimension (required)
     * @param  string $name The name of the warehouse location dimension (required)
     * @param  string $shortcut The shortcut of the warehouse location dimension (required)
     * @param  string $separator The separator of the warehouse location dimension (required)
     * @param  int $is_active_for_pickup_path Active flag for pickup path of the warehouse location dimension (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationDimension, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWarehousesLocationsDimensionsPostWithHttpInfo($parent_id, $warehouse_id, $level, $name, $shortcut, $separator, $is_active_for_pickup_path)
    {
        $returnType = '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationDimension';
        $request = $this->restWarehousesLocationsDimensionsPostRequest($parent_id, $warehouse_id, $level, $name, $shortcut, $separator, $is_active_for_pickup_path);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationDimension',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWarehousesLocationsDimensionsPostAsync
     *
     * Create a warehouse location dimension
     *
     * @param  int $parent_id The parent ID of the warehouse location dimension (required)
     * @param  int $warehouse_id The warehouse ID of the warehouse location dimension (required)
     * @param  int $level The level of the warehouse location dimension (required)
     * @param  string $name The name of the warehouse location dimension (required)
     * @param  string $shortcut The shortcut of the warehouse location dimension (required)
     * @param  string $separator The separator of the warehouse location dimension (required)
     * @param  int $is_active_for_pickup_path Active flag for pickup path of the warehouse location dimension (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsDimensionsPostAsync($parent_id, $warehouse_id, $level, $name, $shortcut, $separator, $is_active_for_pickup_path)
    {
        return $this->restWarehousesLocationsDimensionsPostAsyncWithHttpInfo($parent_id, $warehouse_id, $level, $name, $shortcut, $separator, $is_active_for_pickup_path)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWarehousesLocationsDimensionsPostAsyncWithHttpInfo
     *
     * Create a warehouse location dimension
     *
     * @param  int $parent_id The parent ID of the warehouse location dimension (required)
     * @param  int $warehouse_id The warehouse ID of the warehouse location dimension (required)
     * @param  int $level The level of the warehouse location dimension (required)
     * @param  string $name The name of the warehouse location dimension (required)
     * @param  string $shortcut The shortcut of the warehouse location dimension (required)
     * @param  string $separator The separator of the warehouse location dimension (required)
     * @param  int $is_active_for_pickup_path Active flag for pickup path of the warehouse location dimension (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsDimensionsPostAsyncWithHttpInfo($parent_id, $warehouse_id, $level, $name, $shortcut, $separator, $is_active_for_pickup_path)
    {
        $returnType = '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationDimension';
        $request = $this->restWarehousesLocationsDimensionsPostRequest($parent_id, $warehouse_id, $level, $name, $shortcut, $separator, $is_active_for_pickup_path);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWarehousesLocationsDimensionsPost'
     *
     * @param  int $parent_id The parent ID of the warehouse location dimension (required)
     * @param  int $warehouse_id The warehouse ID of the warehouse location dimension (required)
     * @param  int $level The level of the warehouse location dimension (required)
     * @param  string $name The name of the warehouse location dimension (required)
     * @param  string $shortcut The shortcut of the warehouse location dimension (required)
     * @param  string $separator The separator of the warehouse location dimension (required)
     * @param  int $is_active_for_pickup_path Active flag for pickup path of the warehouse location dimension (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restWarehousesLocationsDimensionsPostRequest($parent_id, $warehouse_id, $level, $name, $shortcut, $separator, $is_active_for_pickup_path)
    {
        // verify the required parameter 'parent_id' is set
        if ($parent_id === null || (is_array($parent_id) && count($parent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parent_id when calling restWarehousesLocationsDimensionsPost'
            );
        }
        // verify the required parameter 'warehouse_id' is set
        if ($warehouse_id === null || (is_array($warehouse_id) && count($warehouse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_id when calling restWarehousesLocationsDimensionsPost'
            );
        }
        // verify the required parameter 'level' is set
        if ($level === null || (is_array($level) && count($level) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $level when calling restWarehousesLocationsDimensionsPost'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling restWarehousesLocationsDimensionsPost'
            );
        }
        // verify the required parameter 'shortcut' is set
        if ($shortcut === null || (is_array($shortcut) && count($shortcut) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shortcut when calling restWarehousesLocationsDimensionsPost'
            );
        }
        // verify the required parameter 'separator' is set
        if ($separator === null || (is_array($separator) && count($separator) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $separator when calling restWarehousesLocationsDimensionsPost'
            );
        }
        // verify the required parameter 'is_active_for_pickup_path' is set
        if ($is_active_for_pickup_path === null || (is_array($is_active_for_pickup_path) && count($is_active_for_pickup_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_active_for_pickup_path when calling restWarehousesLocationsDimensionsPost'
            );
        }

        $resourcePath = '/rest/warehouses/locations/dimensions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($parent_id !== null) {
            $queryParams['parentId'] = ObjectSerializer::toQueryValue($parent_id);
        }
        // query params
        if ($warehouse_id !== null) {
            $queryParams['warehouseId'] = ObjectSerializer::toQueryValue($warehouse_id);
        }
        // query params
        if ($level !== null) {
            $queryParams['level'] = ObjectSerializer::toQueryValue($level);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($shortcut !== null) {
            $queryParams['shortcut'] = ObjectSerializer::toQueryValue($shortcut);
        }
        // query params
        if ($separator !== null) {
            $queryParams['separator'] = ObjectSerializer::toQueryValue($separator);
        }
        // query params
        if ($is_active_for_pickup_path !== null) {
            $queryParams['isActiveForPickupPath'] = ObjectSerializer::toQueryValue($is_active_for_pickup_path);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWarehousesLocationsDimensionsWarehouseLocationDimensionIdDelete
     *
     * Delete a warehouse location dimension
     *
     * @param  int $warehouse_location_dimension_id The ID of the warehouse location dimension (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restWarehousesLocationsDimensionsWarehouseLocationDimensionIdDelete($warehouse_location_dimension_id)
    {
        $this->restWarehousesLocationsDimensionsWarehouseLocationDimensionIdDeleteWithHttpInfo($warehouse_location_dimension_id);
    }

    /**
     * Operation restWarehousesLocationsDimensionsWarehouseLocationDimensionIdDeleteWithHttpInfo
     *
     * Delete a warehouse location dimension
     *
     * @param  int $warehouse_location_dimension_id The ID of the warehouse location dimension (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWarehousesLocationsDimensionsWarehouseLocationDimensionIdDeleteWithHttpInfo($warehouse_location_dimension_id)
    {
        $returnType = '';
        $request = $this->restWarehousesLocationsDimensionsWarehouseLocationDimensionIdDeleteRequest($warehouse_location_dimension_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restWarehousesLocationsDimensionsWarehouseLocationDimensionIdDeleteAsync
     *
     * Delete a warehouse location dimension
     *
     * @param  int $warehouse_location_dimension_id The ID of the warehouse location dimension (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsDimensionsWarehouseLocationDimensionIdDeleteAsync($warehouse_location_dimension_id)
    {
        return $this->restWarehousesLocationsDimensionsWarehouseLocationDimensionIdDeleteAsyncWithHttpInfo($warehouse_location_dimension_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWarehousesLocationsDimensionsWarehouseLocationDimensionIdDeleteAsyncWithHttpInfo
     *
     * Delete a warehouse location dimension
     *
     * @param  int $warehouse_location_dimension_id The ID of the warehouse location dimension (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsDimensionsWarehouseLocationDimensionIdDeleteAsyncWithHttpInfo($warehouse_location_dimension_id)
    {
        $returnType = '';
        $request = $this->restWarehousesLocationsDimensionsWarehouseLocationDimensionIdDeleteRequest($warehouse_location_dimension_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWarehousesLocationsDimensionsWarehouseLocationDimensionIdDelete'
     *
     * @param  int $warehouse_location_dimension_id The ID of the warehouse location dimension (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restWarehousesLocationsDimensionsWarehouseLocationDimensionIdDeleteRequest($warehouse_location_dimension_id)
    {
        // verify the required parameter 'warehouse_location_dimension_id' is set
        if ($warehouse_location_dimension_id === null || (is_array($warehouse_location_dimension_id) && count($warehouse_location_dimension_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_location_dimension_id when calling restWarehousesLocationsDimensionsWarehouseLocationDimensionIdDelete'
            );
        }

        $resourcePath = '/rest/warehouses/locations/dimensions/{warehouseLocationDimensionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($warehouse_location_dimension_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseLocationDimensionId' . '}',
                ObjectSerializer::toPathValue($warehouse_location_dimension_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWarehousesLocationsDimensionsWarehouseLocationDimensionIdGet
     *
     * Get a warehouse location dimension
     *
     * @param  int $warehouse_location_dimension_id The ID of the warehouse location dimension (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationDimension
     */
    public function restWarehousesLocationsDimensionsWarehouseLocationDimensionIdGet($warehouse_location_dimension_id)
    {
        list($response) = $this->restWarehousesLocationsDimensionsWarehouseLocationDimensionIdGetWithHttpInfo($warehouse_location_dimension_id);
        return $response;
    }

    /**
     * Operation restWarehousesLocationsDimensionsWarehouseLocationDimensionIdGetWithHttpInfo
     *
     * Get a warehouse location dimension
     *
     * @param  int $warehouse_location_dimension_id The ID of the warehouse location dimension (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationDimension, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWarehousesLocationsDimensionsWarehouseLocationDimensionIdGetWithHttpInfo($warehouse_location_dimension_id)
    {
        $returnType = '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationDimension';
        $request = $this->restWarehousesLocationsDimensionsWarehouseLocationDimensionIdGetRequest($warehouse_location_dimension_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationDimension',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWarehousesLocationsDimensionsWarehouseLocationDimensionIdGetAsync
     *
     * Get a warehouse location dimension
     *
     * @param  int $warehouse_location_dimension_id The ID of the warehouse location dimension (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsDimensionsWarehouseLocationDimensionIdGetAsync($warehouse_location_dimension_id)
    {
        return $this->restWarehousesLocationsDimensionsWarehouseLocationDimensionIdGetAsyncWithHttpInfo($warehouse_location_dimension_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWarehousesLocationsDimensionsWarehouseLocationDimensionIdGetAsyncWithHttpInfo
     *
     * Get a warehouse location dimension
     *
     * @param  int $warehouse_location_dimension_id The ID of the warehouse location dimension (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsDimensionsWarehouseLocationDimensionIdGetAsyncWithHttpInfo($warehouse_location_dimension_id)
    {
        $returnType = '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationDimension';
        $request = $this->restWarehousesLocationsDimensionsWarehouseLocationDimensionIdGetRequest($warehouse_location_dimension_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWarehousesLocationsDimensionsWarehouseLocationDimensionIdGet'
     *
     * @param  int $warehouse_location_dimension_id The ID of the warehouse location dimension (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restWarehousesLocationsDimensionsWarehouseLocationDimensionIdGetRequest($warehouse_location_dimension_id)
    {
        // verify the required parameter 'warehouse_location_dimension_id' is set
        if ($warehouse_location_dimension_id === null || (is_array($warehouse_location_dimension_id) && count($warehouse_location_dimension_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_location_dimension_id when calling restWarehousesLocationsDimensionsWarehouseLocationDimensionIdGet'
            );
        }

        $resourcePath = '/rest/warehouses/locations/dimensions/{warehouseLocationDimensionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($warehouse_location_dimension_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseLocationDimensionId' . '}',
                ObjectSerializer::toPathValue($warehouse_location_dimension_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWarehousesLocationsDimensionsWarehouseLocationDimensionIdPut
     *
     * Update a warehouse location dimension
     *
     * @param  int $warehouse_location_dimension_id The ID of the warehouse location dimension (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationDimension
     */
    public function restWarehousesLocationsDimensionsWarehouseLocationDimensionIdPut($warehouse_location_dimension_id)
    {
        list($response) = $this->restWarehousesLocationsDimensionsWarehouseLocationDimensionIdPutWithHttpInfo($warehouse_location_dimension_id);
        return $response;
    }

    /**
     * Operation restWarehousesLocationsDimensionsWarehouseLocationDimensionIdPutWithHttpInfo
     *
     * Update a warehouse location dimension
     *
     * @param  int $warehouse_location_dimension_id The ID of the warehouse location dimension (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationDimension, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWarehousesLocationsDimensionsWarehouseLocationDimensionIdPutWithHttpInfo($warehouse_location_dimension_id)
    {
        $returnType = '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationDimension';
        $request = $this->restWarehousesLocationsDimensionsWarehouseLocationDimensionIdPutRequest($warehouse_location_dimension_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationDimension',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWarehousesLocationsDimensionsWarehouseLocationDimensionIdPutAsync
     *
     * Update a warehouse location dimension
     *
     * @param  int $warehouse_location_dimension_id The ID of the warehouse location dimension (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsDimensionsWarehouseLocationDimensionIdPutAsync($warehouse_location_dimension_id)
    {
        return $this->restWarehousesLocationsDimensionsWarehouseLocationDimensionIdPutAsyncWithHttpInfo($warehouse_location_dimension_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWarehousesLocationsDimensionsWarehouseLocationDimensionIdPutAsyncWithHttpInfo
     *
     * Update a warehouse location dimension
     *
     * @param  int $warehouse_location_dimension_id The ID of the warehouse location dimension (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsDimensionsWarehouseLocationDimensionIdPutAsyncWithHttpInfo($warehouse_location_dimension_id)
    {
        $returnType = '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationDimension';
        $request = $this->restWarehousesLocationsDimensionsWarehouseLocationDimensionIdPutRequest($warehouse_location_dimension_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWarehousesLocationsDimensionsWarehouseLocationDimensionIdPut'
     *
     * @param  int $warehouse_location_dimension_id The ID of the warehouse location dimension (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restWarehousesLocationsDimensionsWarehouseLocationDimensionIdPutRequest($warehouse_location_dimension_id)
    {
        // verify the required parameter 'warehouse_location_dimension_id' is set
        if ($warehouse_location_dimension_id === null || (is_array($warehouse_location_dimension_id) && count($warehouse_location_dimension_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_location_dimension_id when calling restWarehousesLocationsDimensionsWarehouseLocationDimensionIdPut'
            );
        }

        $resourcePath = '/rest/warehouses/locations/dimensions/{warehouseLocationDimensionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($warehouse_location_dimension_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseLocationDimensionId' . '}',
                ObjectSerializer::toPathValue($warehouse_location_dimension_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWarehousesLocationsGroupPut
     *
     * Edit the purpose and status for a group of storage locations
     *
     * @param  string $purpose The purpose key value for warehouse location purposeKey field (required)
     * @param  string $status The status key value for warehouse location status field (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocation[]
     */
    public function restWarehousesLocationsGroupPut($purpose, $status)
    {
        list($response) = $this->restWarehousesLocationsGroupPutWithHttpInfo($purpose, $status);
        return $response;
    }

    /**
     * Operation restWarehousesLocationsGroupPutWithHttpInfo
     *
     * Edit the purpose and status for a group of storage locations
     *
     * @param  string $purpose The purpose key value for warehouse location purposeKey field (required)
     * @param  string $status The status key value for warehouse location status field (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restWarehousesLocationsGroupPutWithHttpInfo($purpose, $status)
    {
        $returnType = '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocation[]';
        $request = $this->restWarehousesLocationsGroupPutRequest($purpose, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWarehousesLocationsGroupPutAsync
     *
     * Edit the purpose and status for a group of storage locations
     *
     * @param  string $purpose The purpose key value for warehouse location purposeKey field (required)
     * @param  string $status The status key value for warehouse location status field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsGroupPutAsync($purpose, $status)
    {
        return $this->restWarehousesLocationsGroupPutAsyncWithHttpInfo($purpose, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWarehousesLocationsGroupPutAsyncWithHttpInfo
     *
     * Edit the purpose and status for a group of storage locations
     *
     * @param  string $purpose The purpose key value for warehouse location purposeKey field (required)
     * @param  string $status The status key value for warehouse location status field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsGroupPutAsyncWithHttpInfo($purpose, $status)
    {
        $returnType = '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocation[]';
        $request = $this->restWarehousesLocationsGroupPutRequest($purpose, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWarehousesLocationsGroupPut'
     *
     * @param  string $purpose The purpose key value for warehouse location purposeKey field (required)
     * @param  string $status The status key value for warehouse location status field (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restWarehousesLocationsGroupPutRequest($purpose, $status)
    {
        // verify the required parameter 'purpose' is set
        if ($purpose === null || (is_array($purpose) && count($purpose) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purpose when calling restWarehousesLocationsGroupPut'
            );
        }
        // verify the required parameter 'status' is set
        if ($status === null || (is_array($status) && count($status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $status when calling restWarehousesLocationsGroupPut'
            );
        }

        $resourcePath = '/rest/warehouses/locations/group';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($purpose !== null) {
            $queryParams['purpose'] = ObjectSerializer::toQueryValue($purpose);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWarehousesLocationsLevelsPositionsPost
     *
     * Move a warehouse location level position
     *
     * @param  int $to_move The warehouse location level ID that needs needs to be moved (required)
     * @param  int $target The warehouse location level ID that stands as position for the warehouse location level that needs to be moved (required)
     * @param  string $side The actual position from the left or right side of target (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restWarehousesLocationsLevelsPositionsPost($to_move, $target, $side)
    {
        $this->restWarehousesLocationsLevelsPositionsPostWithHttpInfo($to_move, $target, $side);
    }

    /**
     * Operation restWarehousesLocationsLevelsPositionsPostWithHttpInfo
     *
     * Move a warehouse location level position
     *
     * @param  int $to_move The warehouse location level ID that needs needs to be moved (required)
     * @param  int $target The warehouse location level ID that stands as position for the warehouse location level that needs to be moved (required)
     * @param  string $side The actual position from the left or right side of target (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWarehousesLocationsLevelsPositionsPostWithHttpInfo($to_move, $target, $side)
    {
        $returnType = '';
        $request = $this->restWarehousesLocationsLevelsPositionsPostRequest($to_move, $target, $side);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restWarehousesLocationsLevelsPositionsPostAsync
     *
     * Move a warehouse location level position
     *
     * @param  int $to_move The warehouse location level ID that needs needs to be moved (required)
     * @param  int $target The warehouse location level ID that stands as position for the warehouse location level that needs to be moved (required)
     * @param  string $side The actual position from the left or right side of target (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsLevelsPositionsPostAsync($to_move, $target, $side)
    {
        return $this->restWarehousesLocationsLevelsPositionsPostAsyncWithHttpInfo($to_move, $target, $side)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWarehousesLocationsLevelsPositionsPostAsyncWithHttpInfo
     *
     * Move a warehouse location level position
     *
     * @param  int $to_move The warehouse location level ID that needs needs to be moved (required)
     * @param  int $target The warehouse location level ID that stands as position for the warehouse location level that needs to be moved (required)
     * @param  string $side The actual position from the left or right side of target (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsLevelsPositionsPostAsyncWithHttpInfo($to_move, $target, $side)
    {
        $returnType = '';
        $request = $this->restWarehousesLocationsLevelsPositionsPostRequest($to_move, $target, $side);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWarehousesLocationsLevelsPositionsPost'
     *
     * @param  int $to_move The warehouse location level ID that needs needs to be moved (required)
     * @param  int $target The warehouse location level ID that stands as position for the warehouse location level that needs to be moved (required)
     * @param  string $side The actual position from the left or right side of target (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restWarehousesLocationsLevelsPositionsPostRequest($to_move, $target, $side)
    {
        // verify the required parameter 'to_move' is set
        if ($to_move === null || (is_array($to_move) && count($to_move) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to_move when calling restWarehousesLocationsLevelsPositionsPost'
            );
        }
        // verify the required parameter 'target' is set
        if ($target === null || (is_array($target) && count($target) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target when calling restWarehousesLocationsLevelsPositionsPost'
            );
        }
        // verify the required parameter 'side' is set
        if ($side === null || (is_array($side) && count($side) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $side when calling restWarehousesLocationsLevelsPositionsPost'
            );
        }

        $resourcePath = '/rest/warehouses/locations/levels/positions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($to_move !== null) {
            $queryParams['toMove'] = ObjectSerializer::toQueryValue($to_move);
        }
        // query params
        if ($target !== null) {
            $queryParams['target'] = ObjectSerializer::toQueryValue($target);
        }
        // query params
        if ($side !== null) {
            $queryParams['side'] = ObjectSerializer::toQueryValue($side);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWarehousesLocationsLevelsPost
     *
     * Create a warehouse location level
     *
     * @param  int $parent_id The parent ID of the warehouse location level (required)
     * @param  int $dimension_id The warehouse location dimension ID of the warehouse location level (required)
     * @param  int $position The position of the warehouse location level (required)
     * @param  string $name The name of the warehouse location level (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationLevel
     */
    public function restWarehousesLocationsLevelsPost($parent_id, $dimension_id, $position, $name)
    {
        list($response) = $this->restWarehousesLocationsLevelsPostWithHttpInfo($parent_id, $dimension_id, $position, $name);
        return $response;
    }

    /**
     * Operation restWarehousesLocationsLevelsPostWithHttpInfo
     *
     * Create a warehouse location level
     *
     * @param  int $parent_id The parent ID of the warehouse location level (required)
     * @param  int $dimension_id The warehouse location dimension ID of the warehouse location level (required)
     * @param  int $position The position of the warehouse location level (required)
     * @param  string $name The name of the warehouse location level (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationLevel, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWarehousesLocationsLevelsPostWithHttpInfo($parent_id, $dimension_id, $position, $name)
    {
        $returnType = '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationLevel';
        $request = $this->restWarehousesLocationsLevelsPostRequest($parent_id, $dimension_id, $position, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationLevel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWarehousesLocationsLevelsPostAsync
     *
     * Create a warehouse location level
     *
     * @param  int $parent_id The parent ID of the warehouse location level (required)
     * @param  int $dimension_id The warehouse location dimension ID of the warehouse location level (required)
     * @param  int $position The position of the warehouse location level (required)
     * @param  string $name The name of the warehouse location level (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsLevelsPostAsync($parent_id, $dimension_id, $position, $name)
    {
        return $this->restWarehousesLocationsLevelsPostAsyncWithHttpInfo($parent_id, $dimension_id, $position, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWarehousesLocationsLevelsPostAsyncWithHttpInfo
     *
     * Create a warehouse location level
     *
     * @param  int $parent_id The parent ID of the warehouse location level (required)
     * @param  int $dimension_id The warehouse location dimension ID of the warehouse location level (required)
     * @param  int $position The position of the warehouse location level (required)
     * @param  string $name The name of the warehouse location level (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsLevelsPostAsyncWithHttpInfo($parent_id, $dimension_id, $position, $name)
    {
        $returnType = '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationLevel';
        $request = $this->restWarehousesLocationsLevelsPostRequest($parent_id, $dimension_id, $position, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWarehousesLocationsLevelsPost'
     *
     * @param  int $parent_id The parent ID of the warehouse location level (required)
     * @param  int $dimension_id The warehouse location dimension ID of the warehouse location level (required)
     * @param  int $position The position of the warehouse location level (required)
     * @param  string $name The name of the warehouse location level (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restWarehousesLocationsLevelsPostRequest($parent_id, $dimension_id, $position, $name)
    {
        // verify the required parameter 'parent_id' is set
        if ($parent_id === null || (is_array($parent_id) && count($parent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parent_id when calling restWarehousesLocationsLevelsPost'
            );
        }
        // verify the required parameter 'dimension_id' is set
        if ($dimension_id === null || (is_array($dimension_id) && count($dimension_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dimension_id when calling restWarehousesLocationsLevelsPost'
            );
        }
        // verify the required parameter 'position' is set
        if ($position === null || (is_array($position) && count($position) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $position when calling restWarehousesLocationsLevelsPost'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling restWarehousesLocationsLevelsPost'
            );
        }

        $resourcePath = '/rest/warehouses/locations/levels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($parent_id !== null) {
            $queryParams['parentId'] = ObjectSerializer::toQueryValue($parent_id);
        }
        // query params
        if ($dimension_id !== null) {
            $queryParams['dimensionId'] = ObjectSerializer::toQueryValue($dimension_id);
        }
        // query params
        if ($position !== null) {
            $queryParams['position'] = ObjectSerializer::toQueryValue($position);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWarehousesLocationsLevelsWarehouseLocationLevelIdDelete
     *
     * Delete a warehouse location level
     *
     * @param  int $warehouse_location_level_id The ID of the warehouse location level (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restWarehousesLocationsLevelsWarehouseLocationLevelIdDelete($warehouse_location_level_id)
    {
        $this->restWarehousesLocationsLevelsWarehouseLocationLevelIdDeleteWithHttpInfo($warehouse_location_level_id);
    }

    /**
     * Operation restWarehousesLocationsLevelsWarehouseLocationLevelIdDeleteWithHttpInfo
     *
     * Delete a warehouse location level
     *
     * @param  int $warehouse_location_level_id The ID of the warehouse location level (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWarehousesLocationsLevelsWarehouseLocationLevelIdDeleteWithHttpInfo($warehouse_location_level_id)
    {
        $returnType = '';
        $request = $this->restWarehousesLocationsLevelsWarehouseLocationLevelIdDeleteRequest($warehouse_location_level_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restWarehousesLocationsLevelsWarehouseLocationLevelIdDeleteAsync
     *
     * Delete a warehouse location level
     *
     * @param  int $warehouse_location_level_id The ID of the warehouse location level (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsLevelsWarehouseLocationLevelIdDeleteAsync($warehouse_location_level_id)
    {
        return $this->restWarehousesLocationsLevelsWarehouseLocationLevelIdDeleteAsyncWithHttpInfo($warehouse_location_level_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWarehousesLocationsLevelsWarehouseLocationLevelIdDeleteAsyncWithHttpInfo
     *
     * Delete a warehouse location level
     *
     * @param  int $warehouse_location_level_id The ID of the warehouse location level (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsLevelsWarehouseLocationLevelIdDeleteAsyncWithHttpInfo($warehouse_location_level_id)
    {
        $returnType = '';
        $request = $this->restWarehousesLocationsLevelsWarehouseLocationLevelIdDeleteRequest($warehouse_location_level_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWarehousesLocationsLevelsWarehouseLocationLevelIdDelete'
     *
     * @param  int $warehouse_location_level_id The ID of the warehouse location level (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restWarehousesLocationsLevelsWarehouseLocationLevelIdDeleteRequest($warehouse_location_level_id)
    {
        // verify the required parameter 'warehouse_location_level_id' is set
        if ($warehouse_location_level_id === null || (is_array($warehouse_location_level_id) && count($warehouse_location_level_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_location_level_id when calling restWarehousesLocationsLevelsWarehouseLocationLevelIdDelete'
            );
        }

        $resourcePath = '/rest/warehouses/locations/levels/{warehouseLocationLevelId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($warehouse_location_level_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseLocationLevelId' . '}',
                ObjectSerializer::toPathValue($warehouse_location_level_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWarehousesLocationsLevelsWarehouseLocationLevelIdGet
     *
     * Get a warehouse location level
     *
     * @param  int $warehouse_location_level_id The ID of the warehouse location level (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationLevel
     */
    public function restWarehousesLocationsLevelsWarehouseLocationLevelIdGet($warehouse_location_level_id)
    {
        list($response) = $this->restWarehousesLocationsLevelsWarehouseLocationLevelIdGetWithHttpInfo($warehouse_location_level_id);
        return $response;
    }

    /**
     * Operation restWarehousesLocationsLevelsWarehouseLocationLevelIdGetWithHttpInfo
     *
     * Get a warehouse location level
     *
     * @param  int $warehouse_location_level_id The ID of the warehouse location level (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationLevel, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWarehousesLocationsLevelsWarehouseLocationLevelIdGetWithHttpInfo($warehouse_location_level_id)
    {
        $returnType = '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationLevel';
        $request = $this->restWarehousesLocationsLevelsWarehouseLocationLevelIdGetRequest($warehouse_location_level_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationLevel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWarehousesLocationsLevelsWarehouseLocationLevelIdGetAsync
     *
     * Get a warehouse location level
     *
     * @param  int $warehouse_location_level_id The ID of the warehouse location level (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsLevelsWarehouseLocationLevelIdGetAsync($warehouse_location_level_id)
    {
        return $this->restWarehousesLocationsLevelsWarehouseLocationLevelIdGetAsyncWithHttpInfo($warehouse_location_level_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWarehousesLocationsLevelsWarehouseLocationLevelIdGetAsyncWithHttpInfo
     *
     * Get a warehouse location level
     *
     * @param  int $warehouse_location_level_id The ID of the warehouse location level (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsLevelsWarehouseLocationLevelIdGetAsyncWithHttpInfo($warehouse_location_level_id)
    {
        $returnType = '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationLevel';
        $request = $this->restWarehousesLocationsLevelsWarehouseLocationLevelIdGetRequest($warehouse_location_level_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWarehousesLocationsLevelsWarehouseLocationLevelIdGet'
     *
     * @param  int $warehouse_location_level_id The ID of the warehouse location level (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restWarehousesLocationsLevelsWarehouseLocationLevelIdGetRequest($warehouse_location_level_id)
    {
        // verify the required parameter 'warehouse_location_level_id' is set
        if ($warehouse_location_level_id === null || (is_array($warehouse_location_level_id) && count($warehouse_location_level_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_location_level_id when calling restWarehousesLocationsLevelsWarehouseLocationLevelIdGet'
            );
        }

        $resourcePath = '/rest/warehouses/locations/levels/{warehouseLocationLevelId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($warehouse_location_level_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseLocationLevelId' . '}',
                ObjectSerializer::toPathValue($warehouse_location_level_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWarehousesLocationsLevelsWarehouseLocationLevelIdPut
     *
     * Update a warehouse location level
     *
     * @param  int $warehouse_location_level_id The ID of the warehouse location level (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationLevel
     */
    public function restWarehousesLocationsLevelsWarehouseLocationLevelIdPut($warehouse_location_level_id)
    {
        list($response) = $this->restWarehousesLocationsLevelsWarehouseLocationLevelIdPutWithHttpInfo($warehouse_location_level_id);
        return $response;
    }

    /**
     * Operation restWarehousesLocationsLevelsWarehouseLocationLevelIdPutWithHttpInfo
     *
     * Update a warehouse location level
     *
     * @param  int $warehouse_location_level_id The ID of the warehouse location level (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationLevel, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWarehousesLocationsLevelsWarehouseLocationLevelIdPutWithHttpInfo($warehouse_location_level_id)
    {
        $returnType = '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationLevel';
        $request = $this->restWarehousesLocationsLevelsWarehouseLocationLevelIdPutRequest($warehouse_location_level_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationLevel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWarehousesLocationsLevelsWarehouseLocationLevelIdPutAsync
     *
     * Update a warehouse location level
     *
     * @param  int $warehouse_location_level_id The ID of the warehouse location level (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsLevelsWarehouseLocationLevelIdPutAsync($warehouse_location_level_id)
    {
        return $this->restWarehousesLocationsLevelsWarehouseLocationLevelIdPutAsyncWithHttpInfo($warehouse_location_level_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWarehousesLocationsLevelsWarehouseLocationLevelIdPutAsyncWithHttpInfo
     *
     * Update a warehouse location level
     *
     * @param  int $warehouse_location_level_id The ID of the warehouse location level (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsLevelsWarehouseLocationLevelIdPutAsyncWithHttpInfo($warehouse_location_level_id)
    {
        $returnType = '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationLevel';
        $request = $this->restWarehousesLocationsLevelsWarehouseLocationLevelIdPutRequest($warehouse_location_level_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWarehousesLocationsLevelsWarehouseLocationLevelIdPut'
     *
     * @param  int $warehouse_location_level_id The ID of the warehouse location level (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restWarehousesLocationsLevelsWarehouseLocationLevelIdPutRequest($warehouse_location_level_id)
    {
        // verify the required parameter 'warehouse_location_level_id' is set
        if ($warehouse_location_level_id === null || (is_array($warehouse_location_level_id) && count($warehouse_location_level_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_location_level_id when calling restWarehousesLocationsLevelsWarehouseLocationLevelIdPut'
            );
        }

        $resourcePath = '/rest/warehouses/locations/levels/{warehouseLocationLevelId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($warehouse_location_level_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseLocationLevelId' . '}',
                ObjectSerializer::toPathValue($warehouse_location_level_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWarehousesLocationsMultipleDimensionsPost
     *
     * Create multiple warehouse location dimensions
     *
     * @param  int $dimensions The dimensions array that contains data for creating multiple dimensions (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationDimension[]
     */
    public function restWarehousesLocationsMultipleDimensionsPost($dimensions)
    {
        list($response) = $this->restWarehousesLocationsMultipleDimensionsPostWithHttpInfo($dimensions);
        return $response;
    }

    /**
     * Operation restWarehousesLocationsMultipleDimensionsPostWithHttpInfo
     *
     * Create multiple warehouse location dimensions
     *
     * @param  int $dimensions The dimensions array that contains data for creating multiple dimensions (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationDimension[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restWarehousesLocationsMultipleDimensionsPostWithHttpInfo($dimensions)
    {
        $returnType = '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationDimension[]';
        $request = $this->restWarehousesLocationsMultipleDimensionsPostRequest($dimensions);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationDimension[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWarehousesLocationsMultipleDimensionsPostAsync
     *
     * Create multiple warehouse location dimensions
     *
     * @param  int $dimensions The dimensions array that contains data for creating multiple dimensions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsMultipleDimensionsPostAsync($dimensions)
    {
        return $this->restWarehousesLocationsMultipleDimensionsPostAsyncWithHttpInfo($dimensions)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWarehousesLocationsMultipleDimensionsPostAsyncWithHttpInfo
     *
     * Create multiple warehouse location dimensions
     *
     * @param  int $dimensions The dimensions array that contains data for creating multiple dimensions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsMultipleDimensionsPostAsyncWithHttpInfo($dimensions)
    {
        $returnType = '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationDimension[]';
        $request = $this->restWarehousesLocationsMultipleDimensionsPostRequest($dimensions);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWarehousesLocationsMultipleDimensionsPost'
     *
     * @param  int $dimensions The dimensions array that contains data for creating multiple dimensions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restWarehousesLocationsMultipleDimensionsPostRequest($dimensions)
    {
        // verify the required parameter 'dimensions' is set
        if ($dimensions === null || (is_array($dimensions) && count($dimensions) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dimensions when calling restWarehousesLocationsMultipleDimensionsPost'
            );
        }

        $resourcePath = '/rest/warehouses/locations/multiple_dimensions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dimensions !== null) {
            $queryParams['dimensions'] = ObjectSerializer::toQueryValue($dimensions);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWarehousesLocationsPositionsPost
     *
     * Move a warehouse location position
     *
     * @param  int $to_move The warehouse location ID that needs needs to be moved (required)
     * @param  int $target The warehouse location ID that stands as position for the warehouse location that needs to be moved (required)
     * @param  string $side The actual position from the left or right side of target (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restWarehousesLocationsPositionsPost($to_move, $target, $side)
    {
        $this->restWarehousesLocationsPositionsPostWithHttpInfo($to_move, $target, $side);
    }

    /**
     * Operation restWarehousesLocationsPositionsPostWithHttpInfo
     *
     * Move a warehouse location position
     *
     * @param  int $to_move The warehouse location ID that needs needs to be moved (required)
     * @param  int $target The warehouse location ID that stands as position for the warehouse location that needs to be moved (required)
     * @param  string $side The actual position from the left or right side of target (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWarehousesLocationsPositionsPostWithHttpInfo($to_move, $target, $side)
    {
        $returnType = '';
        $request = $this->restWarehousesLocationsPositionsPostRequest($to_move, $target, $side);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restWarehousesLocationsPositionsPostAsync
     *
     * Move a warehouse location position
     *
     * @param  int $to_move The warehouse location ID that needs needs to be moved (required)
     * @param  int $target The warehouse location ID that stands as position for the warehouse location that needs to be moved (required)
     * @param  string $side The actual position from the left or right side of target (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsPositionsPostAsync($to_move, $target, $side)
    {
        return $this->restWarehousesLocationsPositionsPostAsyncWithHttpInfo($to_move, $target, $side)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWarehousesLocationsPositionsPostAsyncWithHttpInfo
     *
     * Move a warehouse location position
     *
     * @param  int $to_move The warehouse location ID that needs needs to be moved (required)
     * @param  int $target The warehouse location ID that stands as position for the warehouse location that needs to be moved (required)
     * @param  string $side The actual position from the left or right side of target (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsPositionsPostAsyncWithHttpInfo($to_move, $target, $side)
    {
        $returnType = '';
        $request = $this->restWarehousesLocationsPositionsPostRequest($to_move, $target, $side);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWarehousesLocationsPositionsPost'
     *
     * @param  int $to_move The warehouse location ID that needs needs to be moved (required)
     * @param  int $target The warehouse location ID that stands as position for the warehouse location that needs to be moved (required)
     * @param  string $side The actual position from the left or right side of target (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restWarehousesLocationsPositionsPostRequest($to_move, $target, $side)
    {
        // verify the required parameter 'to_move' is set
        if ($to_move === null || (is_array($to_move) && count($to_move) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to_move when calling restWarehousesLocationsPositionsPost'
            );
        }
        // verify the required parameter 'target' is set
        if ($target === null || (is_array($target) && count($target) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target when calling restWarehousesLocationsPositionsPost'
            );
        }
        // verify the required parameter 'side' is set
        if ($side === null || (is_array($side) && count($side) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $side when calling restWarehousesLocationsPositionsPost'
            );
        }

        $resourcePath = '/rest/warehouses/locations/positions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($to_move !== null) {
            $queryParams['toMove'] = ObjectSerializer::toQueryValue($to_move);
        }
        // query params
        if ($target !== null) {
            $queryParams['target'] = ObjectSerializer::toQueryValue($target);
        }
        // query params
        if ($side !== null) {
            $queryParams['side'] = ObjectSerializer::toQueryValue($side);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWarehousesLocationsPost
     *
     * Create a warehouse location
     *
     * @param  int $level_id The warehouse location level ID of the warehouse location (required)
     * @param  string $label The label of the warehouse location (required)
     * @param  string $purpose_key The location type key of the warehouse location (required)
     * @param  string $status_key The location status key of the warehouse location (required)
     * @param  int $position The position of the warehouse location (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocation
     */
    public function restWarehousesLocationsPost($level_id, $label, $purpose_key, $status_key, $position)
    {
        list($response) = $this->restWarehousesLocationsPostWithHttpInfo($level_id, $label, $purpose_key, $status_key, $position);
        return $response;
    }

    /**
     * Operation restWarehousesLocationsPostWithHttpInfo
     *
     * Create a warehouse location
     *
     * @param  int $level_id The warehouse location level ID of the warehouse location (required)
     * @param  string $label The label of the warehouse location (required)
     * @param  string $purpose_key The location type key of the warehouse location (required)
     * @param  string $status_key The location status key of the warehouse location (required)
     * @param  int $position The position of the warehouse location (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocation, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWarehousesLocationsPostWithHttpInfo($level_id, $label, $purpose_key, $status_key, $position)
    {
        $returnType = '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocation';
        $request = $this->restWarehousesLocationsPostRequest($level_id, $label, $purpose_key, $status_key, $position);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWarehousesLocationsPostAsync
     *
     * Create a warehouse location
     *
     * @param  int $level_id The warehouse location level ID of the warehouse location (required)
     * @param  string $label The label of the warehouse location (required)
     * @param  string $purpose_key The location type key of the warehouse location (required)
     * @param  string $status_key The location status key of the warehouse location (required)
     * @param  int $position The position of the warehouse location (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsPostAsync($level_id, $label, $purpose_key, $status_key, $position)
    {
        return $this->restWarehousesLocationsPostAsyncWithHttpInfo($level_id, $label, $purpose_key, $status_key, $position)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWarehousesLocationsPostAsyncWithHttpInfo
     *
     * Create a warehouse location
     *
     * @param  int $level_id The warehouse location level ID of the warehouse location (required)
     * @param  string $label The label of the warehouse location (required)
     * @param  string $purpose_key The location type key of the warehouse location (required)
     * @param  string $status_key The location status key of the warehouse location (required)
     * @param  int $position The position of the warehouse location (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsPostAsyncWithHttpInfo($level_id, $label, $purpose_key, $status_key, $position)
    {
        $returnType = '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocation';
        $request = $this->restWarehousesLocationsPostRequest($level_id, $label, $purpose_key, $status_key, $position);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWarehousesLocationsPost'
     *
     * @param  int $level_id The warehouse location level ID of the warehouse location (required)
     * @param  string $label The label of the warehouse location (required)
     * @param  string $purpose_key The location type key of the warehouse location (required)
     * @param  string $status_key The location status key of the warehouse location (required)
     * @param  int $position The position of the warehouse location (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restWarehousesLocationsPostRequest($level_id, $label, $purpose_key, $status_key, $position)
    {
        // verify the required parameter 'level_id' is set
        if ($level_id === null || (is_array($level_id) && count($level_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $level_id when calling restWarehousesLocationsPost'
            );
        }
        // verify the required parameter 'label' is set
        if ($label === null || (is_array($label) && count($label) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $label when calling restWarehousesLocationsPost'
            );
        }
        // verify the required parameter 'purpose_key' is set
        if ($purpose_key === null || (is_array($purpose_key) && count($purpose_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purpose_key when calling restWarehousesLocationsPost'
            );
        }
        // verify the required parameter 'status_key' is set
        if ($status_key === null || (is_array($status_key) && count($status_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $status_key when calling restWarehousesLocationsPost'
            );
        }
        // verify the required parameter 'position' is set
        if ($position === null || (is_array($position) && count($position) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $position when calling restWarehousesLocationsPost'
            );
        }

        $resourcePath = '/rest/warehouses/locations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($level_id !== null) {
            $queryParams['levelId'] = ObjectSerializer::toQueryValue($level_id);
        }
        // query params
        if ($label !== null) {
            $queryParams['label'] = ObjectSerializer::toQueryValue($label);
        }
        // query params
        if ($purpose_key !== null) {
            $queryParams['purposeKey'] = ObjectSerializer::toQueryValue($purpose_key);
        }
        // query params
        if ($status_key !== null) {
            $queryParams['statusKey'] = ObjectSerializer::toQueryValue($status_key);
        }
        // query params
        if ($position !== null) {
            $queryParams['position'] = ObjectSerializer::toQueryValue($position);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWarehousesLocationsPreviewsPost
     *
     * Generate warehouse location preview and saves it
     *
     * @param  int $dimensions The warehouse location dimensions used by the generator (required)
     * @param  int $storage_location_data The warehouse location data used by the generator (required)
     * @param  int $level_data The warehouse location level data used by the generator (required)
     * @param  int $save The save parameter that triggers the preview method or the process save method (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Mixed
     */
    public function restWarehousesLocationsPreviewsPost($dimensions, $storage_location_data, $level_data, $save)
    {
        list($response) = $this->restWarehousesLocationsPreviewsPostWithHttpInfo($dimensions, $storage_location_data, $level_data, $save);
        return $response;
    }

    /**
     * Operation restWarehousesLocationsPreviewsPostWithHttpInfo
     *
     * Generate warehouse location preview and saves it
     *
     * @param  int $dimensions The warehouse location dimensions used by the generator (required)
     * @param  int $storage_location_data The warehouse location data used by the generator (required)
     * @param  int $level_data The warehouse location level data used by the generator (required)
     * @param  int $save The save parameter that triggers the preview method or the process save method (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWarehousesLocationsPreviewsPostWithHttpInfo($dimensions, $storage_location_data, $level_data, $save)
    {
        $returnType = '\Swagger\Client\Model\Mixed';
        $request = $this->restWarehousesLocationsPreviewsPostRequest($dimensions, $storage_location_data, $level_data, $save);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWarehousesLocationsPreviewsPostAsync
     *
     * Generate warehouse location preview and saves it
     *
     * @param  int $dimensions The warehouse location dimensions used by the generator (required)
     * @param  int $storage_location_data The warehouse location data used by the generator (required)
     * @param  int $level_data The warehouse location level data used by the generator (required)
     * @param  int $save The save parameter that triggers the preview method or the process save method (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsPreviewsPostAsync($dimensions, $storage_location_data, $level_data, $save)
    {
        return $this->restWarehousesLocationsPreviewsPostAsyncWithHttpInfo($dimensions, $storage_location_data, $level_data, $save)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWarehousesLocationsPreviewsPostAsyncWithHttpInfo
     *
     * Generate warehouse location preview and saves it
     *
     * @param  int $dimensions The warehouse location dimensions used by the generator (required)
     * @param  int $storage_location_data The warehouse location data used by the generator (required)
     * @param  int $level_data The warehouse location level data used by the generator (required)
     * @param  int $save The save parameter that triggers the preview method or the process save method (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsPreviewsPostAsyncWithHttpInfo($dimensions, $storage_location_data, $level_data, $save)
    {
        $returnType = '\Swagger\Client\Model\Mixed';
        $request = $this->restWarehousesLocationsPreviewsPostRequest($dimensions, $storage_location_data, $level_data, $save);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWarehousesLocationsPreviewsPost'
     *
     * @param  int $dimensions The warehouse location dimensions used by the generator (required)
     * @param  int $storage_location_data The warehouse location data used by the generator (required)
     * @param  int $level_data The warehouse location level data used by the generator (required)
     * @param  int $save The save parameter that triggers the preview method or the process save method (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restWarehousesLocationsPreviewsPostRequest($dimensions, $storage_location_data, $level_data, $save)
    {
        // verify the required parameter 'dimensions' is set
        if ($dimensions === null || (is_array($dimensions) && count($dimensions) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dimensions when calling restWarehousesLocationsPreviewsPost'
            );
        }
        // verify the required parameter 'storage_location_data' is set
        if ($storage_location_data === null || (is_array($storage_location_data) && count($storage_location_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storage_location_data when calling restWarehousesLocationsPreviewsPost'
            );
        }
        // verify the required parameter 'level_data' is set
        if ($level_data === null || (is_array($level_data) && count($level_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $level_data when calling restWarehousesLocationsPreviewsPost'
            );
        }
        // verify the required parameter 'save' is set
        if ($save === null || (is_array($save) && count($save) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $save when calling restWarehousesLocationsPreviewsPost'
            );
        }

        $resourcePath = '/rest/warehouses/locations/previews';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dimensions !== null) {
            $queryParams['dimensions'] = ObjectSerializer::toQueryValue($dimensions);
        }
        // query params
        if ($storage_location_data !== null) {
            $queryParams['storageLocationData'] = ObjectSerializer::toQueryValue($storage_location_data);
        }
        // query params
        if ($level_data !== null) {
            $queryParams['levelData'] = ObjectSerializer::toQueryValue($level_data);
        }
        // query params
        if ($save !== null) {
            $queryParams['save'] = ObjectSerializer::toQueryValue($save);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWarehousesLocationsStockWarehouseLocationIdGet
     *
     * List warehouse locations stock
     *
     * @param  int $warehouse_location_id The ID of the warehouse (required)
     * @param  int $warehouse_location_id2 warehouse_location_id2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restWarehousesLocationsStockWarehouseLocationIdGet($warehouse_location_id, $warehouse_location_id2)
    {
        list($response) = $this->restWarehousesLocationsStockWarehouseLocationIdGetWithHttpInfo($warehouse_location_id, $warehouse_location_id2);
        return $response;
    }

    /**
     * Operation restWarehousesLocationsStockWarehouseLocationIdGetWithHttpInfo
     *
     * List warehouse locations stock
     *
     * @param  int $warehouse_location_id The ID of the warehouse (required)
     * @param  int $warehouse_location_id2 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWarehousesLocationsStockWarehouseLocationIdGetWithHttpInfo($warehouse_location_id, $warehouse_location_id2)
    {
        $returnType = 'object';
        $request = $this->restWarehousesLocationsStockWarehouseLocationIdGetRequest($warehouse_location_id, $warehouse_location_id2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWarehousesLocationsStockWarehouseLocationIdGetAsync
     *
     * List warehouse locations stock
     *
     * @param  int $warehouse_location_id The ID of the warehouse (required)
     * @param  int $warehouse_location_id2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsStockWarehouseLocationIdGetAsync($warehouse_location_id, $warehouse_location_id2)
    {
        return $this->restWarehousesLocationsStockWarehouseLocationIdGetAsyncWithHttpInfo($warehouse_location_id, $warehouse_location_id2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWarehousesLocationsStockWarehouseLocationIdGetAsyncWithHttpInfo
     *
     * List warehouse locations stock
     *
     * @param  int $warehouse_location_id The ID of the warehouse (required)
     * @param  int $warehouse_location_id2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsStockWarehouseLocationIdGetAsyncWithHttpInfo($warehouse_location_id, $warehouse_location_id2)
    {
        $returnType = 'object';
        $request = $this->restWarehousesLocationsStockWarehouseLocationIdGetRequest($warehouse_location_id, $warehouse_location_id2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWarehousesLocationsStockWarehouseLocationIdGet'
     *
     * @param  int $warehouse_location_id The ID of the warehouse (required)
     * @param  int $warehouse_location_id2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restWarehousesLocationsStockWarehouseLocationIdGetRequest($warehouse_location_id, $warehouse_location_id2)
    {
        // verify the required parameter 'warehouse_location_id' is set
        if ($warehouse_location_id === null || (is_array($warehouse_location_id) && count($warehouse_location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_location_id when calling restWarehousesLocationsStockWarehouseLocationIdGet'
            );
        }
        // verify the required parameter 'warehouse_location_id2' is set
        if ($warehouse_location_id2 === null || (is_array($warehouse_location_id2) && count($warehouse_location_id2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_location_id2 when calling restWarehousesLocationsStockWarehouseLocationIdGet'
            );
        }

        $resourcePath = '/rest/warehouses/locations/stock/{warehouseLocationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($warehouse_location_id !== null) {
            $queryParams['$warehouseLocationId'] = ObjectSerializer::toQueryValue($warehouse_location_id);
        }

        // path params
        if ($warehouse_location_id2 !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseLocationId' . '}',
                ObjectSerializer::toPathValue($warehouse_location_id2),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWarehousesLocationsWarehouseIdLabelGet
     *
     * Generate the warehouse location label
     *
     * @param  int $warehouse_id The actual warehouse ID (required)
     * @param  string $warehouse_location_ids A string with all warehouse location ID&#x27;s for which a label needs to be generated (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Mixed
     */
    public function restWarehousesLocationsWarehouseIdLabelGet($warehouse_id, $warehouse_location_ids)
    {
        list($response) = $this->restWarehousesLocationsWarehouseIdLabelGetWithHttpInfo($warehouse_id, $warehouse_location_ids);
        return $response;
    }

    /**
     * Operation restWarehousesLocationsWarehouseIdLabelGetWithHttpInfo
     *
     * Generate the warehouse location label
     *
     * @param  int $warehouse_id The actual warehouse ID (required)
     * @param  string $warehouse_location_ids A string with all warehouse location ID&#x27;s for which a label needs to be generated (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWarehousesLocationsWarehouseIdLabelGetWithHttpInfo($warehouse_id, $warehouse_location_ids)
    {
        $returnType = '\Swagger\Client\Model\Mixed';
        $request = $this->restWarehousesLocationsWarehouseIdLabelGetRequest($warehouse_id, $warehouse_location_ids);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWarehousesLocationsWarehouseIdLabelGetAsync
     *
     * Generate the warehouse location label
     *
     * @param  int $warehouse_id The actual warehouse ID (required)
     * @param  string $warehouse_location_ids A string with all warehouse location ID&#x27;s for which a label needs to be generated (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsWarehouseIdLabelGetAsync($warehouse_id, $warehouse_location_ids)
    {
        return $this->restWarehousesLocationsWarehouseIdLabelGetAsyncWithHttpInfo($warehouse_id, $warehouse_location_ids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWarehousesLocationsWarehouseIdLabelGetAsyncWithHttpInfo
     *
     * Generate the warehouse location label
     *
     * @param  int $warehouse_id The actual warehouse ID (required)
     * @param  string $warehouse_location_ids A string with all warehouse location ID&#x27;s for which a label needs to be generated (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsWarehouseIdLabelGetAsyncWithHttpInfo($warehouse_id, $warehouse_location_ids)
    {
        $returnType = '\Swagger\Client\Model\Mixed';
        $request = $this->restWarehousesLocationsWarehouseIdLabelGetRequest($warehouse_id, $warehouse_location_ids);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWarehousesLocationsWarehouseIdLabelGet'
     *
     * @param  int $warehouse_id The actual warehouse ID (required)
     * @param  string $warehouse_location_ids A string with all warehouse location ID&#x27;s for which a label needs to be generated (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restWarehousesLocationsWarehouseIdLabelGetRequest($warehouse_id, $warehouse_location_ids)
    {
        // verify the required parameter 'warehouse_id' is set
        if ($warehouse_id === null || (is_array($warehouse_id) && count($warehouse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_id when calling restWarehousesLocationsWarehouseIdLabelGet'
            );
        }
        // verify the required parameter 'warehouse_location_ids' is set
        if ($warehouse_location_ids === null || (is_array($warehouse_location_ids) && count($warehouse_location_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_location_ids when calling restWarehousesLocationsWarehouseIdLabelGet'
            );
        }

        $resourcePath = '/rest/warehouses/locations/{warehouseId}/label';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($warehouse_location_ids !== null) {
            $queryParams['warehouseLocationIds'] = ObjectSerializer::toQueryValue($warehouse_location_ids);
        }

        // path params
        if ($warehouse_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseId' . '}',
                ObjectSerializer::toPathValue($warehouse_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWarehousesLocationsWarehouseLocationIdDelete
     *
     * Delete a warehouse location
     *
     * @param  int $warehouse_location_id The ID of the warehouse location (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function restWarehousesLocationsWarehouseLocationIdDelete($warehouse_location_id)
    {
        $this->restWarehousesLocationsWarehouseLocationIdDeleteWithHttpInfo($warehouse_location_id);
    }

    /**
     * Operation restWarehousesLocationsWarehouseLocationIdDeleteWithHttpInfo
     *
     * Delete a warehouse location
     *
     * @param  int $warehouse_location_id The ID of the warehouse location (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWarehousesLocationsWarehouseLocationIdDeleteWithHttpInfo($warehouse_location_id)
    {
        $returnType = '';
        $request = $this->restWarehousesLocationsWarehouseLocationIdDeleteRequest($warehouse_location_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restWarehousesLocationsWarehouseLocationIdDeleteAsync
     *
     * Delete a warehouse location
     *
     * @param  int $warehouse_location_id The ID of the warehouse location (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsWarehouseLocationIdDeleteAsync($warehouse_location_id)
    {
        return $this->restWarehousesLocationsWarehouseLocationIdDeleteAsyncWithHttpInfo($warehouse_location_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWarehousesLocationsWarehouseLocationIdDeleteAsyncWithHttpInfo
     *
     * Delete a warehouse location
     *
     * @param  int $warehouse_location_id The ID of the warehouse location (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsWarehouseLocationIdDeleteAsyncWithHttpInfo($warehouse_location_id)
    {
        $returnType = '';
        $request = $this->restWarehousesLocationsWarehouseLocationIdDeleteRequest($warehouse_location_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWarehousesLocationsWarehouseLocationIdDelete'
     *
     * @param  int $warehouse_location_id The ID of the warehouse location (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restWarehousesLocationsWarehouseLocationIdDeleteRequest($warehouse_location_id)
    {
        // verify the required parameter 'warehouse_location_id' is set
        if ($warehouse_location_id === null || (is_array($warehouse_location_id) && count($warehouse_location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_location_id when calling restWarehousesLocationsWarehouseLocationIdDelete'
            );
        }

        $resourcePath = '/rest/warehouses/locations/{warehouseLocationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($warehouse_location_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseLocationId' . '}',
                ObjectSerializer::toPathValue($warehouse_location_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWarehousesLocationsWarehouseLocationIdGet
     *
     * Get a warehouse location
     *
     * @param  int $warehouse_location_id The ID of the warehouse location (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocation
     */
    public function restWarehousesLocationsWarehouseLocationIdGet($warehouse_location_id)
    {
        list($response) = $this->restWarehousesLocationsWarehouseLocationIdGetWithHttpInfo($warehouse_location_id);
        return $response;
    }

    /**
     * Operation restWarehousesLocationsWarehouseLocationIdGetWithHttpInfo
     *
     * Get a warehouse location
     *
     * @param  int $warehouse_location_id The ID of the warehouse location (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocation, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWarehousesLocationsWarehouseLocationIdGetWithHttpInfo($warehouse_location_id)
    {
        $returnType = '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocation';
        $request = $this->restWarehousesLocationsWarehouseLocationIdGetRequest($warehouse_location_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWarehousesLocationsWarehouseLocationIdGetAsync
     *
     * Get a warehouse location
     *
     * @param  int $warehouse_location_id The ID of the warehouse location (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsWarehouseLocationIdGetAsync($warehouse_location_id)
    {
        return $this->restWarehousesLocationsWarehouseLocationIdGetAsyncWithHttpInfo($warehouse_location_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWarehousesLocationsWarehouseLocationIdGetAsyncWithHttpInfo
     *
     * Get a warehouse location
     *
     * @param  int $warehouse_location_id The ID of the warehouse location (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsWarehouseLocationIdGetAsyncWithHttpInfo($warehouse_location_id)
    {
        $returnType = '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocation';
        $request = $this->restWarehousesLocationsWarehouseLocationIdGetRequest($warehouse_location_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWarehousesLocationsWarehouseLocationIdGet'
     *
     * @param  int $warehouse_location_id The ID of the warehouse location (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restWarehousesLocationsWarehouseLocationIdGetRequest($warehouse_location_id)
    {
        // verify the required parameter 'warehouse_location_id' is set
        if ($warehouse_location_id === null || (is_array($warehouse_location_id) && count($warehouse_location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_location_id when calling restWarehousesLocationsWarehouseLocationIdGet'
            );
        }

        $resourcePath = '/rest/warehouses/locations/{warehouseLocationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($warehouse_location_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseLocationId' . '}',
                ObjectSerializer::toPathValue($warehouse_location_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWarehousesLocationsWarehouseLocationIdPut
     *
     * Update a warehouse location
     *
     * @param  int $warehouse_location_id The ID of the warehouse location (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocation
     */
    public function restWarehousesLocationsWarehouseLocationIdPut($warehouse_location_id)
    {
        list($response) = $this->restWarehousesLocationsWarehouseLocationIdPutWithHttpInfo($warehouse_location_id);
        return $response;
    }

    /**
     * Operation restWarehousesLocationsWarehouseLocationIdPutWithHttpInfo
     *
     * Update a warehouse location
     *
     * @param  int $warehouse_location_id The ID of the warehouse location (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocation, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWarehousesLocationsWarehouseLocationIdPutWithHttpInfo($warehouse_location_id)
    {
        $returnType = '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocation';
        $request = $this->restWarehousesLocationsWarehouseLocationIdPutRequest($warehouse_location_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWarehousesLocationsWarehouseLocationIdPutAsync
     *
     * Update a warehouse location
     *
     * @param  int $warehouse_location_id The ID of the warehouse location (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsWarehouseLocationIdPutAsync($warehouse_location_id)
    {
        return $this->restWarehousesLocationsWarehouseLocationIdPutAsyncWithHttpInfo($warehouse_location_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWarehousesLocationsWarehouseLocationIdPutAsyncWithHttpInfo
     *
     * Update a warehouse location
     *
     * @param  int $warehouse_location_id The ID of the warehouse location (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesLocationsWarehouseLocationIdPutAsyncWithHttpInfo($warehouse_location_id)
    {
        $returnType = '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocation';
        $request = $this->restWarehousesLocationsWarehouseLocationIdPutRequest($warehouse_location_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWarehousesLocationsWarehouseLocationIdPut'
     *
     * @param  int $warehouse_location_id The ID of the warehouse location (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restWarehousesLocationsWarehouseLocationIdPutRequest($warehouse_location_id)
    {
        // verify the required parameter 'warehouse_location_id' is set
        if ($warehouse_location_id === null || (is_array($warehouse_location_id) && count($warehouse_location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_location_id when calling restWarehousesLocationsWarehouseLocationIdPut'
            );
        }

        $resourcePath = '/rest/warehouses/locations/{warehouseLocationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($warehouse_location_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseLocationId' . '}',
                ObjectSerializer::toPathValue($warehouse_location_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWarehousesStructureWarehouseIdGet
     *
     * Get a warehouse location structure
     *
     * @param  int $warehouse_id The actual warehouse ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Mixed
     */
    public function restWarehousesStructureWarehouseIdGet($warehouse_id)
    {
        list($response) = $this->restWarehousesStructureWarehouseIdGetWithHttpInfo($warehouse_id);
        return $response;
    }

    /**
     * Operation restWarehousesStructureWarehouseIdGetWithHttpInfo
     *
     * Get a warehouse location structure
     *
     * @param  int $warehouse_id The actual warehouse ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWarehousesStructureWarehouseIdGetWithHttpInfo($warehouse_id)
    {
        $returnType = '\Swagger\Client\Model\Mixed';
        $request = $this->restWarehousesStructureWarehouseIdGetRequest($warehouse_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWarehousesStructureWarehouseIdGetAsync
     *
     * Get a warehouse location structure
     *
     * @param  int $warehouse_id The actual warehouse ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesStructureWarehouseIdGetAsync($warehouse_id)
    {
        return $this->restWarehousesStructureWarehouseIdGetAsyncWithHttpInfo($warehouse_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWarehousesStructureWarehouseIdGetAsyncWithHttpInfo
     *
     * Get a warehouse location structure
     *
     * @param  int $warehouse_id The actual warehouse ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesStructureWarehouseIdGetAsyncWithHttpInfo($warehouse_id)
    {
        $returnType = '\Swagger\Client\Model\Mixed';
        $request = $this->restWarehousesStructureWarehouseIdGetRequest($warehouse_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWarehousesStructureWarehouseIdGet'
     *
     * @param  int $warehouse_id The actual warehouse ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restWarehousesStructureWarehouseIdGetRequest($warehouse_id)
    {
        // verify the required parameter 'warehouse_id' is set
        if ($warehouse_id === null || (is_array($warehouse_id) && count($warehouse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_id when calling restWarehousesStructureWarehouseIdGet'
            );
        }

        $resourcePath = '/rest/warehouses/structure/{warehouseId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($warehouse_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseId' . '}',
                ObjectSerializer::toPathValue($warehouse_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWarehousesStructureWarehouseIdMovingGet
     *
     * Get a warehouse location structure moving
     *
     * @param  int $warehouse_id The actual warehouse ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Mixed
     */
    public function restWarehousesStructureWarehouseIdMovingGet($warehouse_id)
    {
        list($response) = $this->restWarehousesStructureWarehouseIdMovingGetWithHttpInfo($warehouse_id);
        return $response;
    }

    /**
     * Operation restWarehousesStructureWarehouseIdMovingGetWithHttpInfo
     *
     * Get a warehouse location structure moving
     *
     * @param  int $warehouse_id The actual warehouse ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWarehousesStructureWarehouseIdMovingGetWithHttpInfo($warehouse_id)
    {
        $returnType = '\Swagger\Client\Model\Mixed';
        $request = $this->restWarehousesStructureWarehouseIdMovingGetRequest($warehouse_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWarehousesStructureWarehouseIdMovingGetAsync
     *
     * Get a warehouse location structure moving
     *
     * @param  int $warehouse_id The actual warehouse ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesStructureWarehouseIdMovingGetAsync($warehouse_id)
    {
        return $this->restWarehousesStructureWarehouseIdMovingGetAsyncWithHttpInfo($warehouse_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWarehousesStructureWarehouseIdMovingGetAsyncWithHttpInfo
     *
     * Get a warehouse location structure moving
     *
     * @param  int $warehouse_id The actual warehouse ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesStructureWarehouseIdMovingGetAsyncWithHttpInfo($warehouse_id)
    {
        $returnType = '\Swagger\Client\Model\Mixed';
        $request = $this->restWarehousesStructureWarehouseIdMovingGetRequest($warehouse_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWarehousesStructureWarehouseIdMovingGet'
     *
     * @param  int $warehouse_id The actual warehouse ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restWarehousesStructureWarehouseIdMovingGetRequest($warehouse_id)
    {
        // verify the required parameter 'warehouse_id' is set
        if ($warehouse_id === null || (is_array($warehouse_id) && count($warehouse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_id when calling restWarehousesStructureWarehouseIdMovingGet'
            );
        }

        $resourcePath = '/rest/warehouses/structure/{warehouseId}/moving';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($warehouse_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseId' . '}',
                ObjectSerializer::toPathValue($warehouse_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWarehousesWarehouseIdLocationsDimensionsGet
     *
     * List warehouse location dimensions
     *
     * @param  int $warehouse_id The ID of the warehouse (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationDimension
     */
    public function restWarehousesWarehouseIdLocationsDimensionsGet($warehouse_id)
    {
        list($response) = $this->restWarehousesWarehouseIdLocationsDimensionsGetWithHttpInfo($warehouse_id);
        return $response;
    }

    /**
     * Operation restWarehousesWarehouseIdLocationsDimensionsGetWithHttpInfo
     *
     * List warehouse location dimensions
     *
     * @param  int $warehouse_id The ID of the warehouse (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationDimension, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWarehousesWarehouseIdLocationsDimensionsGetWithHttpInfo($warehouse_id)
    {
        $returnType = '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationDimension';
        $request = $this->restWarehousesWarehouseIdLocationsDimensionsGetRequest($warehouse_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationDimension',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWarehousesWarehouseIdLocationsDimensionsGetAsync
     *
     * List warehouse location dimensions
     *
     * @param  int $warehouse_id The ID of the warehouse (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesWarehouseIdLocationsDimensionsGetAsync($warehouse_id)
    {
        return $this->restWarehousesWarehouseIdLocationsDimensionsGetAsyncWithHttpInfo($warehouse_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWarehousesWarehouseIdLocationsDimensionsGetAsyncWithHttpInfo
     *
     * List warehouse location dimensions
     *
     * @param  int $warehouse_id The ID of the warehouse (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesWarehouseIdLocationsDimensionsGetAsyncWithHttpInfo($warehouse_id)
    {
        $returnType = '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationDimension';
        $request = $this->restWarehousesWarehouseIdLocationsDimensionsGetRequest($warehouse_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWarehousesWarehouseIdLocationsDimensionsGet'
     *
     * @param  int $warehouse_id The ID of the warehouse (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restWarehousesWarehouseIdLocationsDimensionsGetRequest($warehouse_id)
    {
        // verify the required parameter 'warehouse_id' is set
        if ($warehouse_id === null || (is_array($warehouse_id) && count($warehouse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_id when calling restWarehousesWarehouseIdLocationsDimensionsGet'
            );
        }

        $resourcePath = '/rest/warehouses/{warehouseId}/locations/dimensions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($warehouse_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseId' . '}',
                ObjectSerializer::toPathValue($warehouse_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWarehousesWarehouseIdLocationsGet
     *
     * List warehouse locations
     *
     * @param  int $warehouse_id The ID of the warehouse (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function restWarehousesWarehouseIdLocationsGet($warehouse_id)
    {
        list($response) = $this->restWarehousesWarehouseIdLocationsGetWithHttpInfo($warehouse_id);
        return $response;
    }

    /**
     * Operation restWarehousesWarehouseIdLocationsGetWithHttpInfo
     *
     * List warehouse locations
     *
     * @param  int $warehouse_id The ID of the warehouse (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWarehousesWarehouseIdLocationsGetWithHttpInfo($warehouse_id)
    {
        $returnType = 'object';
        $request = $this->restWarehousesWarehouseIdLocationsGetRequest($warehouse_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWarehousesWarehouseIdLocationsGetAsync
     *
     * List warehouse locations
     *
     * @param  int $warehouse_id The ID of the warehouse (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesWarehouseIdLocationsGetAsync($warehouse_id)
    {
        return $this->restWarehousesWarehouseIdLocationsGetAsyncWithHttpInfo($warehouse_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWarehousesWarehouseIdLocationsGetAsyncWithHttpInfo
     *
     * List warehouse locations
     *
     * @param  int $warehouse_id The ID of the warehouse (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesWarehouseIdLocationsGetAsyncWithHttpInfo($warehouse_id)
    {
        $returnType = 'object';
        $request = $this->restWarehousesWarehouseIdLocationsGetRequest($warehouse_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWarehousesWarehouseIdLocationsGet'
     *
     * @param  int $warehouse_id The ID of the warehouse (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restWarehousesWarehouseIdLocationsGetRequest($warehouse_id)
    {
        // verify the required parameter 'warehouse_id' is set
        if ($warehouse_id === null || (is_array($warehouse_id) && count($warehouse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_id when calling restWarehousesWarehouseIdLocationsGet'
            );
        }

        $resourcePath = '/rest/warehouses/{warehouseId}/locations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($warehouse_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseId' . '}',
                ObjectSerializer::toPathValue($warehouse_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWarehousesWarehouseIdLocationsLevelWarehouseLocationLevelIdGet
     *
     * List warehouse locations by levelId
     *
     * @param  int $warehouse_id The ID of the warehouse (required)
     * @param  int $level_id The ID of the warehouse location level (required)
     * @param  int $warehouse_location_level_id warehouse_location_level_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Mixed
     */
    public function restWarehousesWarehouseIdLocationsLevelWarehouseLocationLevelIdGet($warehouse_id, $level_id, $warehouse_location_level_id)
    {
        list($response) = $this->restWarehousesWarehouseIdLocationsLevelWarehouseLocationLevelIdGetWithHttpInfo($warehouse_id, $level_id, $warehouse_location_level_id);
        return $response;
    }

    /**
     * Operation restWarehousesWarehouseIdLocationsLevelWarehouseLocationLevelIdGetWithHttpInfo
     *
     * List warehouse locations by levelId
     *
     * @param  int $warehouse_id The ID of the warehouse (required)
     * @param  int $level_id The ID of the warehouse location level (required)
     * @param  int $warehouse_location_level_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function restWarehousesWarehouseIdLocationsLevelWarehouseLocationLevelIdGetWithHttpInfo($warehouse_id, $level_id, $warehouse_location_level_id)
    {
        $returnType = '\Swagger\Client\Model\Mixed';
        $request = $this->restWarehousesWarehouseIdLocationsLevelWarehouseLocationLevelIdGetRequest($warehouse_id, $level_id, $warehouse_location_level_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWarehousesWarehouseIdLocationsLevelWarehouseLocationLevelIdGetAsync
     *
     * List warehouse locations by levelId
     *
     * @param  int $warehouse_id The ID of the warehouse (required)
     * @param  int $level_id The ID of the warehouse location level (required)
     * @param  int $warehouse_location_level_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesWarehouseIdLocationsLevelWarehouseLocationLevelIdGetAsync($warehouse_id, $level_id, $warehouse_location_level_id)
    {
        return $this->restWarehousesWarehouseIdLocationsLevelWarehouseLocationLevelIdGetAsyncWithHttpInfo($warehouse_id, $level_id, $warehouse_location_level_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWarehousesWarehouseIdLocationsLevelWarehouseLocationLevelIdGetAsyncWithHttpInfo
     *
     * List warehouse locations by levelId
     *
     * @param  int $warehouse_id The ID of the warehouse (required)
     * @param  int $level_id The ID of the warehouse location level (required)
     * @param  int $warehouse_location_level_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesWarehouseIdLocationsLevelWarehouseLocationLevelIdGetAsyncWithHttpInfo($warehouse_id, $level_id, $warehouse_location_level_id)
    {
        $returnType = '\Swagger\Client\Model\Mixed';
        $request = $this->restWarehousesWarehouseIdLocationsLevelWarehouseLocationLevelIdGetRequest($warehouse_id, $level_id, $warehouse_location_level_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWarehousesWarehouseIdLocationsLevelWarehouseLocationLevelIdGet'
     *
     * @param  int $warehouse_id The ID of the warehouse (required)
     * @param  int $level_id The ID of the warehouse location level (required)
     * @param  int $warehouse_location_level_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restWarehousesWarehouseIdLocationsLevelWarehouseLocationLevelIdGetRequest($warehouse_id, $level_id, $warehouse_location_level_id)
    {
        // verify the required parameter 'warehouse_id' is set
        if ($warehouse_id === null || (is_array($warehouse_id) && count($warehouse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_id when calling restWarehousesWarehouseIdLocationsLevelWarehouseLocationLevelIdGet'
            );
        }
        // verify the required parameter 'level_id' is set
        if ($level_id === null || (is_array($level_id) && count($level_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $level_id when calling restWarehousesWarehouseIdLocationsLevelWarehouseLocationLevelIdGet'
            );
        }
        // verify the required parameter 'warehouse_location_level_id' is set
        if ($warehouse_location_level_id === null || (is_array($warehouse_location_level_id) && count($warehouse_location_level_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_location_level_id when calling restWarehousesWarehouseIdLocationsLevelWarehouseLocationLevelIdGet'
            );
        }

        $resourcePath = '/rest/warehouses/{warehouseId}/locations/level/{warehouseLocationLevelId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($level_id !== null) {
            $queryParams['levelId'] = ObjectSerializer::toQueryValue($level_id);
        }

        // path params
        if ($warehouse_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseId' . '}',
                ObjectSerializer::toPathValue($warehouse_id),
                $resourcePath
            );
        }
        // path params
        if ($warehouse_location_level_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseLocationLevelId' . '}',
                ObjectSerializer::toPathValue($warehouse_location_level_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restWarehousesWarehouseIdLocationsLevelsGet
     *
     * List warehouse location levels
     *
     * @param  int $warehouse_id The ID of the warehouse (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationLevel[]
     */
    public function restWarehousesWarehouseIdLocationsLevelsGet($warehouse_id)
    {
        list($response) = $this->restWarehousesWarehouseIdLocationsLevelsGetWithHttpInfo($warehouse_id);
        return $response;
    }

    /**
     * Operation restWarehousesWarehouseIdLocationsLevelsGetWithHttpInfo
     *
     * List warehouse location levels
     *
     * @param  int $warehouse_id The ID of the warehouse (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationLevel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function restWarehousesWarehouseIdLocationsLevelsGetWithHttpInfo($warehouse_id)
    {
        $returnType = '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationLevel[]';
        $request = $this->restWarehousesWarehouseIdLocationsLevelsGetRequest($warehouse_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationLevel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restWarehousesWarehouseIdLocationsLevelsGetAsync
     *
     * List warehouse location levels
     *
     * @param  int $warehouse_id The ID of the warehouse (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesWarehouseIdLocationsLevelsGetAsync($warehouse_id)
    {
        return $this->restWarehousesWarehouseIdLocationsLevelsGetAsyncWithHttpInfo($warehouse_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restWarehousesWarehouseIdLocationsLevelsGetAsyncWithHttpInfo
     *
     * List warehouse location levels
     *
     * @param  int $warehouse_id The ID of the warehouse (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restWarehousesWarehouseIdLocationsLevelsGetAsyncWithHttpInfo($warehouse_id)
    {
        $returnType = '\Swagger\Client\Model\PlentyModulesWarehouseModelsWarehouseLocationLevel[]';
        $request = $this->restWarehousesWarehouseIdLocationsLevelsGetRequest($warehouse_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restWarehousesWarehouseIdLocationsLevelsGet'
     *
     * @param  int $warehouse_id The ID of the warehouse (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restWarehousesWarehouseIdLocationsLevelsGetRequest($warehouse_id)
    {
        // verify the required parameter 'warehouse_id' is set
        if ($warehouse_id === null || (is_array($warehouse_id) && count($warehouse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_id when calling restWarehousesWarehouseIdLocationsLevelsGet'
            );
        }

        $resourcePath = '/rest/warehouses/{warehouseId}/locations/levels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($warehouse_id !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseId' . '}',
                ObjectSerializer::toPathValue($warehouse_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

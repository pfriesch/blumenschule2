<?php
/**
 * TagApi
 * PHP version 5
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BSApp\Service\plentymarketsAPI\Api;

use BSApp\Service\plentymarketsAPI\Model\IlluminateSupportCollection;
use BSApp\Service\plentymarketsAPI\Model\Mixed;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesTagModelsTag;
use BSApp\Service\plentymarketsAPI\Model\PlentyModulesTagModelsTagRelationship;
use BSApp\Service\plentymarketsAPI\Model\PlentyRepositoriesModelsDeleteResponse;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use function GuzzleHttp\Psr7\build_query;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BSApp\Service\plentymarketsAPI\ApiException;
use BSApp\Service\plentymarketsAPI\Configuration;
use BSApp\Service\plentymarketsAPI\HeaderSelector;
use BSApp\Service\plentymarketsAPI\ObjectSerializer;
use InvalidArgumentException;
use RuntimeException;
use stdClass;

/**
 * TagApi Class Doc Comment
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TagApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    )
    {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation restTagsBulkPost
     *
     * Create up to 50 tags
     *
     * @param object $body body (optional)
     *
     * @return Mixed[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restTagsBulkPost($body = null)
    {
        list($response) = $this->restTagsBulkPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation restTagsBulkPostWithHttpInfo
     *
     * Create up to 50 tags
     *
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\Mixed[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restTagsBulkPostWithHttpInfo($body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\Mixed[]';
        $request = $this->restTagsBulkPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\Mixed[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsBulkPostAsync
     *
     * Create up to 50 tags
     *
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restTagsBulkPostAsync($body = null)
    {
        return $this->restTagsBulkPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsBulkPostAsyncWithHttpInfo
     *
     * Create up to 50 tags
     *
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restTagsBulkPostAsyncWithHttpInfo($body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\Mixed[]';
        $request = $this->restTagsBulkPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsBulkPost'
     *
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restTagsBulkPostRequest($body = null)
    {

        $resourcePath = '/rest/tags/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsBulkPut
     *
     * Update up to 50 tags.
     *
     * @param object $body body (optional)
     *
     * @return Mixed[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restTagsBulkPut($body = null)
    {
        list($response) = $this->restTagsBulkPutWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation restTagsBulkPutWithHttpInfo
     *
     * Update up to 50 tags.
     *
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\Mixed[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restTagsBulkPutWithHttpInfo($body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\Mixed[]';
        $request = $this->restTagsBulkPutRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\Mixed[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsBulkPutAsync
     *
     * Update up to 50 tags.
     *
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restTagsBulkPutAsync($body = null)
    {
        return $this->restTagsBulkPutAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsBulkPutAsyncWithHttpInfo
     *
     * Update up to 50 tags.
     *
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restTagsBulkPutAsyncWithHttpInfo($body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\Mixed[]';
        $request = $this->restTagsBulkPutRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsBulkPut'
     *
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restTagsBulkPutRequest($body = null)
    {

        $resourcePath = '/rest/tags/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsGet
     *
     * List tags
     *
     * @param string $with Includes the specified tag information in the results. The following parameters are available: &lt;ul&gt;&lt;li&gt;availabilities &#x3D; The tag availabilities&lt;/li&gt;&lt;li&gt;names &#x3D; The tag names&lt;/li&gt;&lt;li&gt;relationship &#x3D; The tag relationships&lt;/li&gt;&lt;/ul&gt;More than one parameter should be separated by commas. (optional)
     * @param string $tag_name Filter restricts the list of results to tags with the specified tag name. The tag name must be specified. (optional)
     * @param string $tag_availability Filter restricts the list of results to tags with the specified availability type. The availability type must be specified. (optional)
     * @param string $tag_lang Filter restricts the list of results to tags which have names in the specified language. The language must be specified. (optional)
     * @param string $color Filter restricts the list of results to tags with the specified color. The color must be specified. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return IlluminateSupportCollection
     */
    public function restTagsGet($with = null, $tag_name = null, $tag_availability = null, $tag_lang = null, $color = null)
    {
        list($response) = $this->restTagsGetWithHttpInfo($with, $tag_name, $tag_availability, $tag_lang, $color);
        return $response;
    }

    /**
     * Operation restTagsGetWithHttpInfo
     *
     * List tags
     *
     * @param string $with Includes the specified tag information in the results. The following parameters are available: &lt;ul&gt;&lt;li&gt;availabilities &#x3D; The tag availabilities&lt;/li&gt;&lt;li&gt;names &#x3D; The tag names&lt;/li&gt;&lt;li&gt;relationship &#x3D; The tag relationships&lt;/li&gt;&lt;/ul&gt;More than one parameter should be separated by commas. (optional)
     * @param string $tag_name Filter restricts the list of results to tags with the specified tag name. The tag name must be specified. (optional)
     * @param string $tag_availability Filter restricts the list of results to tags with the specified availability type. The availability type must be specified. (optional)
     * @param string $tag_lang Filter restricts the list of results to tags which have names in the specified language. The language must be specified. (optional)
     * @param string $color Filter restricts the list of results to tags with the specified color. The color must be specified. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \BSApp\Service\plentymarketsAPI\Model\IlluminateSupportCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTagsGetWithHttpInfo($with = null, $tag_name = null, $tag_availability = null, $tag_lang = null, $color = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\IlluminateSupportCollection';
        $request = $this->restTagsGetRequest($with, $tag_name, $tag_availability, $tag_lang, $color);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\IlluminateSupportCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsGetAsync
     *
     * List tags
     *
     * @param string $with Includes the specified tag information in the results. The following parameters are available: &lt;ul&gt;&lt;li&gt;availabilities &#x3D; The tag availabilities&lt;/li&gt;&lt;li&gt;names &#x3D; The tag names&lt;/li&gt;&lt;li&gt;relationship &#x3D; The tag relationships&lt;/li&gt;&lt;/ul&gt;More than one parameter should be separated by commas. (optional)
     * @param string $tag_name Filter restricts the list of results to tags with the specified tag name. The tag name must be specified. (optional)
     * @param string $tag_availability Filter restricts the list of results to tags with the specified availability type. The availability type must be specified. (optional)
     * @param string $tag_lang Filter restricts the list of results to tags which have names in the specified language. The language must be specified. (optional)
     * @param string $color Filter restricts the list of results to tags with the specified color. The color must be specified. (optional)
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTagsGetAsync($with = null, $tag_name = null, $tag_availability = null, $tag_lang = null, $color = null)
    {
        return $this->restTagsGetAsyncWithHttpInfo($with, $tag_name, $tag_availability, $tag_lang, $color)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsGetAsyncWithHttpInfo
     *
     * List tags
     *
     * @param string $with Includes the specified tag information in the results. The following parameters are available: &lt;ul&gt;&lt;li&gt;availabilities &#x3D; The tag availabilities&lt;/li&gt;&lt;li&gt;names &#x3D; The tag names&lt;/li&gt;&lt;li&gt;relationship &#x3D; The tag relationships&lt;/li&gt;&lt;/ul&gt;More than one parameter should be separated by commas. (optional)
     * @param string $tag_name Filter restricts the list of results to tags with the specified tag name. The tag name must be specified. (optional)
     * @param string $tag_availability Filter restricts the list of results to tags with the specified availability type. The availability type must be specified. (optional)
     * @param string $tag_lang Filter restricts the list of results to tags which have names in the specified language. The language must be specified. (optional)
     * @param string $color Filter restricts the list of results to tags with the specified color. The color must be specified. (optional)
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTagsGetAsyncWithHttpInfo($with = null, $tag_name = null, $tag_availability = null, $tag_lang = null, $color = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\IlluminateSupportCollection';
        $request = $this->restTagsGetRequest($with, $tag_name, $tag_availability, $tag_lang, $color);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsGet'
     *
     * @param string $with Includes the specified tag information in the results. The following parameters are available: &lt;ul&gt;&lt;li&gt;availabilities &#x3D; The tag availabilities&lt;/li&gt;&lt;li&gt;names &#x3D; The tag names&lt;/li&gt;&lt;li&gt;relationship &#x3D; The tag relationships&lt;/li&gt;&lt;/ul&gt;More than one parameter should be separated by commas. (optional)
     * @param string $tag_name Filter restricts the list of results to tags with the specified tag name. The tag name must be specified. (optional)
     * @param string $tag_availability Filter restricts the list of results to tags with the specified availability type. The availability type must be specified. (optional)
     * @param string $tag_lang Filter restricts the list of results to tags which have names in the specified language. The language must be specified. (optional)
     * @param string $color Filter restricts the list of results to tags with the specified color. The color must be specified. (optional)
     *
     * @throws InvalidArgumentException
     * @return Request
     */
    protected function restTagsGetRequest($with = null, $tag_name = null, $tag_availability = null, $tag_lang = null, $color = null)
    {

        $resourcePath = '/rest/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($with !== null) {
            $queryParams['with'] = ObjectSerializer::toQueryValue($with);
        }
        // query params
        if ($tag_name !== null) {
            $queryParams['tagName'] = ObjectSerializer::toQueryValue($tag_name);
        }
        // query params
        if ($tag_availability !== null) {
            $queryParams['tagAvailability'] = ObjectSerializer::toQueryValue($tag_availability);
        }
        // query params
        if ($tag_lang !== null) {
            $queryParams['tagLang'] = ObjectSerializer::toQueryValue($tag_lang);
        }
        // query params
        if ($color !== null) {
            $queryParams['color'] = ObjectSerializer::toQueryValue($color);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsIdDelete
     *
     * Delete a tag
     *
     * @param int $id id (required)
     *
     * @return void
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restTagsIdDelete($id)
    {
        $this->restTagsIdDeleteWithHttpInfo($id);
    }

    /**
     * Operation restTagsIdDeleteWithHttpInfo
     *
     * Delete a tag
     *
     * @param int $id (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restTagsIdDeleteWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->restTagsIdDeleteRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsIdDeleteAsync
     *
     * Delete a tag
     *
     * @param int $id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restTagsIdDeleteAsync($id)
    {
        return $this->restTagsIdDeleteAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsIdDeleteAsyncWithHttpInfo
     *
     * Delete a tag
     *
     * @param int $id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restTagsIdDeleteAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->restTagsIdDeleteRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsIdDelete'
     *
     * @param int $id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restTagsIdDeleteRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling restTagsIdDelete'
            );
        }

        $resourcePath = '/rest/tags/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsIdGet
     *
     * Get a tag by ID
     *
     * @param int $id id (required)
     *
     * @return PlentyModulesTagModelsTag
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restTagsIdGet($id)
    {
        list($response) = $this->restTagsIdGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation restTagsIdGetWithHttpInfo
     *
     * Get a tag by ID
     *
     * @param int $id (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesTagModelsTag, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restTagsIdGetWithHttpInfo($id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesTagModelsTag';
        $request = $this->restTagsIdGetRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesTagModelsTag',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsIdGetAsync
     *
     * Get a tag by ID
     *
     * @param int $id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restTagsIdGetAsync($id)
    {
        return $this->restTagsIdGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsIdGetAsyncWithHttpInfo
     *
     * Get a tag by ID
     *
     * @param int $id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restTagsIdGetAsyncWithHttpInfo($id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesTagModelsTag';
        $request = $this->restTagsIdGetRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsIdGet'
     *
     * @param int $id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restTagsIdGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling restTagsIdGet'
            );
        }

        $resourcePath = '/rest/tags/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsIdPut
     *
     * Update a tag
     *
     * @param int $id id (required)
     * @param object $body body (optional)
     *
     * @return PlentyModulesTagModelsTag
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restTagsIdPut($id, $body = null)
    {
        list($response) = $this->restTagsIdPutWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation restTagsIdPutWithHttpInfo
     *
     * Update a tag
     *
     * @param int $id (required)
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesTagModelsTag, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restTagsIdPutWithHttpInfo($id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesTagModelsTag';
        $request = $this->restTagsIdPutRequest($id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesTagModelsTag',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsIdPutAsync
     *
     * Update a tag
     *
     * @param int $id (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restTagsIdPutAsync($id, $body = null)
    {
        return $this->restTagsIdPutAsyncWithHttpInfo($id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsIdPutAsyncWithHttpInfo
     *
     * Update a tag
     *
     * @param int $id (required)
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restTagsIdPutAsyncWithHttpInfo($id, $body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesTagModelsTag';
        $request = $this->restTagsIdPutRequest($id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsIdPut'
     *
     * @param int $id (required)
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restTagsIdPutRequest($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling restTagsIdPut'
            );
        }

        $resourcePath = '/rest/tags/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsIdRelationshipsTagTypeRelationshipUUIDDelete
     *
     * Delete a tag relationship
     *
     * @param int $id id (required)
     * @param int $tag_type tag_type (required)
     * @param int $relationship_uuid relationship_uuid (required)
     *
     * @return PlentyRepositoriesModelsDeleteResponse
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restTagsIdRelationshipsTagTypeRelationshipUUIDDelete($id, $tag_type, $relationship_uuid)
    {
        list($response) = $this->restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteWithHttpInfo($id, $tag_type, $relationship_uuid);
        return $response;
    }

    /**
     * Operation restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteWithHttpInfo
     *
     * Delete a tag relationship
     *
     * @param int $id (required)
     * @param int $tag_type (required)
     * @param int $relationship_uuid (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyRepositoriesModelsDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteWithHttpInfo($id, $tag_type, $relationship_uuid)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyRepositoriesModelsDeleteResponse';
        $request = $this->restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteRequest($id, $tag_type, $relationship_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyRepositoriesModelsDeleteResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteAsync
     *
     * Delete a tag relationship
     *
     * @param int $id (required)
     * @param int $tag_type (required)
     * @param int $relationship_uuid (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteAsync($id, $tag_type, $relationship_uuid)
    {
        return $this->restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteAsyncWithHttpInfo($id, $tag_type, $relationship_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteAsyncWithHttpInfo
     *
     * Delete a tag relationship
     *
     * @param int $id (required)
     * @param int $tag_type (required)
     * @param int $relationship_uuid (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteAsyncWithHttpInfo($id, $tag_type, $relationship_uuid)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyRepositoriesModelsDeleteResponse';
        $request = $this->restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteRequest($id, $tag_type, $relationship_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsIdRelationshipsTagTypeRelationshipUUIDDelete'
     *
     * @param int $id (required)
     * @param int $tag_type (required)
     * @param int $relationship_uuid (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restTagsIdRelationshipsTagTypeRelationshipUUIDDeleteRequest($id, $tag_type, $relationship_uuid)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling restTagsIdRelationshipsTagTypeRelationshipUUIDDelete'
            );
        }
        // verify the required parameter 'tag_type' is set
        if ($tag_type === null || (is_array($tag_type) && count($tag_type) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $tag_type when calling restTagsIdRelationshipsTagTypeRelationshipUUIDDelete'
            );
        }
        // verify the required parameter 'relationship_uuid' is set
        if ($relationship_uuid === null || (is_array($relationship_uuid) && count($relationship_uuid) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $relationship_uuid when calling restTagsIdRelationshipsTagTypeRelationshipUUIDDelete'
            );
        }

        $resourcePath = '/rest/tags/{id}/relationships/{tagType}/{relationshipUUID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tag_type !== null) {
            $resourcePath = str_replace(
                '{' . 'tagType' . '}',
                ObjectSerializer::toPathValue($tag_type),
                $resourcePath
            );
        }
        // path params
        if ($relationship_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'relationshipUUID' . '}',
                ObjectSerializer::toPathValue($relationship_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsPost
     *
     * Create a tag
     *
     * @param object $body body (optional)
     *
     * @return PlentyModulesTagModelsTag
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restTagsPost($body = null)
    {
        list($response) = $this->restTagsPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation restTagsPostWithHttpInfo
     *
     * Create a tag
     *
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesTagModelsTag, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restTagsPostWithHttpInfo($body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesTagModelsTag';
        $request = $this->restTagsPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesTagModelsTag',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsPostAsync
     *
     * Create a tag
     *
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restTagsPostAsync($body = null)
    {
        return $this->restTagsPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsPostAsyncWithHttpInfo
     *
     * Create a tag
     *
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restTagsPostAsyncWithHttpInfo($body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesTagModelsTag';
        $request = $this->restTagsPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsPost'
     *
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restTagsPostRequest($body = null)
    {

        $resourcePath = '/rest/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsRelationshipsGet
     *
     * List relationships
     *
     * @param string $with Includes the specified tag information in the results. The following parameters are available: &lt;ul&gt;&lt;li&gt;availability &#x3D; The tag availability&lt;/li&gt;&lt;li&gt;tag &#x3D; The tag&lt;/li&gt;&lt;/ul&gt;More than one parameter should be separated by commas. (optional)
     * @param int $tag_id Filter restricts the list of results to tag relationships with the specified tag ID. The tag ID must be specified. (optional)
     * @param string $tag_type Filter restricts the list of results to tag relationships with the specified tag type. The tag type must be specified. (optional)
     * @param int $relationship_value Filter restricts the list of results to tag relationships with the specified relationship value. This is the ID of the data record. The relationship value must be specified. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return IlluminateSupportCollection
     */
    public function restTagsRelationshipsGet($with = null, $tag_id = null, $tag_type = null, $relationship_value = null)
    {
        list($response) = $this->restTagsRelationshipsGetWithHttpInfo($with, $tag_id, $tag_type, $relationship_value);
        return $response;
    }

    /**
     * Operation restTagsRelationshipsGetWithHttpInfo
     *
     * List relationships
     *
     * @param string $with Includes the specified tag information in the results. The following parameters are available: &lt;ul&gt;&lt;li&gt;availability &#x3D; The tag availability&lt;/li&gt;&lt;li&gt;tag &#x3D; The tag&lt;/li&gt;&lt;/ul&gt;More than one parameter should be separated by commas. (optional)
     * @param int $tag_id Filter restricts the list of results to tag relationships with the specified tag ID. The tag ID must be specified. (optional)
     * @param string $tag_type Filter restricts the list of results to tag relationships with the specified tag type. The tag type must be specified. (optional)
     * @param int $relationship_value Filter restricts the list of results to tag relationships with the specified relationship value. This is the ID of the data record. The relationship value must be specified. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \BSApp\Service\plentymarketsAPI\Model\IlluminateSupportCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function restTagsRelationshipsGetWithHttpInfo($with = null, $tag_id = null, $tag_type = null, $relationship_value = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\IlluminateSupportCollection';
        $request = $this->restTagsRelationshipsGetRequest($with, $tag_id, $tag_type, $relationship_value);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\IlluminateSupportCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsRelationshipsGetAsync
     *
     * List relationships
     *
     * @param string $with Includes the specified tag information in the results. The following parameters are available: &lt;ul&gt;&lt;li&gt;availability &#x3D; The tag availability&lt;/li&gt;&lt;li&gt;tag &#x3D; The tag&lt;/li&gt;&lt;/ul&gt;More than one parameter should be separated by commas. (optional)
     * @param int $tag_id Filter restricts the list of results to tag relationships with the specified tag ID. The tag ID must be specified. (optional)
     * @param string $tag_type Filter restricts the list of results to tag relationships with the specified tag type. The tag type must be specified. (optional)
     * @param int $relationship_value Filter restricts the list of results to tag relationships with the specified relationship value. This is the ID of the data record. The relationship value must be specified. (optional)
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTagsRelationshipsGetAsync($with = null, $tag_id = null, $tag_type = null, $relationship_value = null)
    {
        return $this->restTagsRelationshipsGetAsyncWithHttpInfo($with, $tag_id, $tag_type, $relationship_value)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsRelationshipsGetAsyncWithHttpInfo
     *
     * List relationships
     *
     * @param string $with Includes the specified tag information in the results. The following parameters are available: &lt;ul&gt;&lt;li&gt;availability &#x3D; The tag availability&lt;/li&gt;&lt;li&gt;tag &#x3D; The tag&lt;/li&gt;&lt;/ul&gt;More than one parameter should be separated by commas. (optional)
     * @param int $tag_id Filter restricts the list of results to tag relationships with the specified tag ID. The tag ID must be specified. (optional)
     * @param string $tag_type Filter restricts the list of results to tag relationships with the specified tag type. The tag type must be specified. (optional)
     * @param int $relationship_value Filter restricts the list of results to tag relationships with the specified relationship value. This is the ID of the data record. The relationship value must be specified. (optional)
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function restTagsRelationshipsGetAsyncWithHttpInfo($with = null, $tag_id = null, $tag_type = null, $relationship_value = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\IlluminateSupportCollection';
        $request = $this->restTagsRelationshipsGetRequest($with, $tag_id, $tag_type, $relationship_value);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsRelationshipsGet'
     *
     * @param string $with Includes the specified tag information in the results. The following parameters are available: &lt;ul&gt;&lt;li&gt;availability &#x3D; The tag availability&lt;/li&gt;&lt;li&gt;tag &#x3D; The tag&lt;/li&gt;&lt;/ul&gt;More than one parameter should be separated by commas. (optional)
     * @param int $tag_id Filter restricts the list of results to tag relationships with the specified tag ID. The tag ID must be specified. (optional)
     * @param string $tag_type Filter restricts the list of results to tag relationships with the specified tag type. The tag type must be specified. (optional)
     * @param int $relationship_value Filter restricts the list of results to tag relationships with the specified relationship value. This is the ID of the data record. The relationship value must be specified. (optional)
     *
     * @throws InvalidArgumentException
     * @return Request
     */
    protected function restTagsRelationshipsGetRequest($with = null, $tag_id = null, $tag_type = null, $relationship_value = null)
    {

        $resourcePath = '/rest/tags/relationships';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($with !== null) {
            $queryParams['with'] = ObjectSerializer::toQueryValue($with);
        }
        // query params
        if ($tag_id !== null) {
            $queryParams['tagId'] = ObjectSerializer::toQueryValue($tag_id);
        }
        // query params
        if ($tag_type !== null) {
            $queryParams['tagType'] = ObjectSerializer::toQueryValue($tag_type);
        }
        // query params
        if ($relationship_value !== null) {
            $queryParams['relationshipValue'] = ObjectSerializer::toQueryValue($relationship_value);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsRelationshipsPost
     *
     * Create a tag relationship
     *
     * @param object $body body (optional)
     *
     * @return PlentyModulesTagModelsTagRelationship
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restTagsRelationshipsPost($body = null)
    {
        list($response) = $this->restTagsRelationshipsPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation restTagsRelationshipsPostWithHttpInfo
     *
     * Create a tag relationship
     *
     * @param object $body (optional)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesTagModelsTagRelationship, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restTagsRelationshipsPostWithHttpInfo($body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesTagModelsTagRelationship';
        $request = $this->restTagsRelationshipsPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesTagModelsTagRelationship',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsRelationshipsPostAsync
     *
     * Create a tag relationship
     *
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restTagsRelationshipsPostAsync($body = null)
    {
        return $this->restTagsRelationshipsPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsRelationshipsPostAsyncWithHttpInfo
     *
     * Create a tag relationship
     *
     * @param object $body (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restTagsRelationshipsPostAsyncWithHttpInfo($body = null)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesTagModelsTagRelationship';
        $request = $this->restTagsRelationshipsPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsRelationshipsPost'
     *
     * @param object $body (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restTagsRelationshipsPostRequest($body = null)
    {

        $resourcePath = '/rest/tags/relationships';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restTagsRelationshipsRelationshipValueTagTypeIdDelete
     *
     * Delete a tag relationship
     *
     * @param int $relationship_value relationship_value (required)
     * @param int $tag_type tag_type (required)
     * @param int $id id (required)
     *
     * @return void
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restTagsRelationshipsRelationshipValueTagTypeIdDelete($relationship_value, $tag_type, $id)
    {
        $this->restTagsRelationshipsRelationshipValueTagTypeIdDeleteWithHttpInfo($relationship_value, $tag_type, $id);
    }

    /**
     * Operation restTagsRelationshipsRelationshipValueTagTypeIdDeleteWithHttpInfo
     *
     * Delete a tag relationship
     *
     * @param int $relationship_value (required)
     * @param int $tag_type (required)
     * @param int $id (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restTagsRelationshipsRelationshipValueTagTypeIdDeleteWithHttpInfo($relationship_value, $tag_type, $id)
    {
        $returnType = '';
        $request = $this->restTagsRelationshipsRelationshipValueTagTypeIdDeleteRequest($relationship_value, $tag_type, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation restTagsRelationshipsRelationshipValueTagTypeIdDeleteAsync
     *
     * Delete a tag relationship
     *
     * @param int $relationship_value (required)
     * @param int $tag_type (required)
     * @param int $id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restTagsRelationshipsRelationshipValueTagTypeIdDeleteAsync($relationship_value, $tag_type, $id)
    {
        return $this->restTagsRelationshipsRelationshipValueTagTypeIdDeleteAsyncWithHttpInfo($relationship_value, $tag_type, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restTagsRelationshipsRelationshipValueTagTypeIdDeleteAsyncWithHttpInfo
     *
     * Delete a tag relationship
     *
     * @param int $relationship_value (required)
     * @param int $tag_type (required)
     * @param int $id (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restTagsRelationshipsRelationshipValueTagTypeIdDeleteAsyncWithHttpInfo($relationship_value, $tag_type, $id)
    {
        $returnType = '';
        $request = $this->restTagsRelationshipsRelationshipValueTagTypeIdDeleteRequest($relationship_value, $tag_type, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restTagsRelationshipsRelationshipValueTagTypeIdDelete'
     *
     * @param int $relationship_value (required)
     * @param int $tag_type (required)
     * @param int $id (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restTagsRelationshipsRelationshipValueTagTypeIdDeleteRequest($relationship_value, $tag_type, $id)
    {
        // verify the required parameter 'relationship_value' is set
        if ($relationship_value === null || (is_array($relationship_value) && count($relationship_value) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $relationship_value when calling restTagsRelationshipsRelationshipValueTagTypeIdDelete'
            );
        }
        // verify the required parameter 'tag_type' is set
        if ($tag_type === null || (is_array($tag_type) && count($tag_type) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $tag_type when calling restTagsRelationshipsRelationshipValueTagTypeIdDelete'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling restTagsRelationshipsRelationshipValueTagTypeIdDelete'
            );
        }

        $resourcePath = '/rest/tags/relationships/{relationshipValue}/{tagType}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($relationship_value !== null) {
            $resourcePath = str_replace(
                '{' . 'relationshipValue' . '}',
                ObjectSerializer::toPathValue($relationship_value),
                $resourcePath
            );
        }
        // path params
        if ($tag_type !== null) {
            $resourcePath = str_replace(
                '{' . 'tagType' . '}',
                ObjectSerializer::toPathValue($tag_type),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @return array of http client options
     * @throws RuntimeException on file opening failure
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

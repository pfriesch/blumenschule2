<?php
/**
 * ReturnsApi
 * PHP version 5
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * plentymarkets REST-API
 *
 * The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BSApp\Service\plentymarketsAPI\Api;

use BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingReturnsModelsOrderReturns;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use function GuzzleHttp\Psr7\build_query;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BSApp\Service\plentymarketsAPI\ApiException;
use BSApp\Service\plentymarketsAPI\Configuration;
use BSApp\Service\plentymarketsAPI\HeaderSelector;
use BSApp\Service\plentymarketsAPI\ObjectSerializer;
use InvalidArgumentException;
use RuntimeException;
use stdClass;

/**
 * ReturnsApi Class Doc Comment
 *
 * @category Class
 * @package  BSApp\Service\plentymarketsAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReturnsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    )
    {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation restOrdersOrderIdShippingReturnsAssignLabelReturnsIdPut
     *
     * @param int $returns_id The id of the order returns to be assigned. (required)
     * @param int $order_id The id of the order that the order returns has to be assigned to. (required)
     *
     * @return PlentyModulesOrderShippingReturnsModelsOrderReturns
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingReturnsAssignLabelReturnsIdPut($returns_id, $order_id)
    {
        list($response) = $this->restOrdersOrderIdShippingReturnsAssignLabelReturnsIdPutWithHttpInfo($returns_id, $order_id);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdShippingReturnsAssignLabelReturnsIdPutWithHttpInfo
     *
     * @param int $returns_id The id of the order returns to be assigned. (required)
     * @param int $order_id The id of the order that the order returns has to be assigned to. (required)
     *
     * @return array of \BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingReturnsModelsOrderReturns, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingReturnsAssignLabelReturnsIdPutWithHttpInfo($returns_id, $order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingReturnsModelsOrderReturns';
        $request = $this->restOrdersOrderIdShippingReturnsAssignLabelReturnsIdPutRequest($returns_id, $order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingReturnsModelsOrderReturns',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdShippingReturnsAssignLabelReturnsIdPutAsync
     *
     *
     *
     * @param int $returns_id The id of the order returns to be assigned. (required)
     * @param int $order_id The id of the order that the order returns has to be assigned to. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingReturnsAssignLabelReturnsIdPutAsync($returns_id, $order_id)
    {
        return $this->restOrdersOrderIdShippingReturnsAssignLabelReturnsIdPutAsyncWithHttpInfo($returns_id, $order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdShippingReturnsAssignLabelReturnsIdPutAsyncWithHttpInfo
     *
     *
     *
     * @param int $returns_id The id of the order returns to be assigned. (required)
     * @param int $order_id The id of the order that the order returns has to be assigned to. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingReturnsAssignLabelReturnsIdPutAsyncWithHttpInfo($returns_id, $order_id)
    {
        $returnType = '\BSApp\Service\plentymarketsAPI\Model\PlentyModulesOrderShippingReturnsModelsOrderReturns';
        $request = $this->restOrdersOrderIdShippingReturnsAssignLabelReturnsIdPutRequest($returns_id, $order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdShippingReturnsAssignLabelReturnsIdPut'
     *
     * @param int $returns_id The id of the order returns to be assigned. (required)
     * @param int $order_id The id of the order that the order returns has to be assigned to. (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdShippingReturnsAssignLabelReturnsIdPutRequest($returns_id, $order_id)
    {
        // verify the required parameter 'returns_id' is set
        if ($returns_id === null || (is_array($returns_id) && count($returns_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $returns_id when calling restOrdersOrderIdShippingReturnsAssignLabelReturnsIdPut'
            );
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdShippingReturnsAssignLabelReturnsIdPut'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/shipping/returns/assign_label/{returnsId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($returns_id !== null) {
            $resourcePath = str_replace(
                '{' . 'returnsId' . '}',
                ObjectSerializer::toPathValue($returns_id),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersOrderIdShippingReturnsGet
     *
     * @param int $order_id The id of the order to search the orders returns (required)
     * @param int $page The page to get. The default page that will be returned is page 1. (optional)
     * @param int $items_per_page The number of orders to be displayed per page. The default number of orders per page is 50. (optional)
     * @param int $with Load additional relations for an order. Currently possible are:  &lt;ul&gt;  &lt;li&gt;&#x27;documents&#x27; &#x3D; The document objects that are associated with the order returns.&lt;/li&gt;  &lt;li&gt;&#x27;labels&#x27; &#x3D; The base64 encoded labels that are associated with the order returns.&lt;/li&gt;  &lt;/ul&gt;  Example: &lt;code&gt;?with[]&#x3D;documents&amp;with[]&#x3D;labels&lt;/code&gt; (optional)
     *
     * @return object
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingReturnsGet($order_id, $page = null, $items_per_page = null, $with = null)
    {
        list($response) = $this->restOrdersOrderIdShippingReturnsGetWithHttpInfo($order_id, $page, $items_per_page, $with);
        return $response;
    }

    /**
     * Operation restOrdersOrderIdShippingReturnsGetWithHttpInfo
     *
     * @param int $order_id The id of the order to search the orders returns (required)
     * @param int $page The page to get. The default page that will be returned is page 1. (optional)
     * @param int $items_per_page The number of orders to be displayed per page. The default number of orders per page is 50. (optional)
     * @param int $with Load additional relations for an order. Currently possible are:  &lt;ul&gt;  &lt;li&gt;&#x27;documents&#x27; &#x3D; The document objects that are associated with the order returns.&lt;/li&gt;  &lt;li&gt;&#x27;labels&#x27; &#x3D; The base64 encoded labels that are associated with the order returns.&lt;/li&gt;  &lt;/ul&gt;  Example: &lt;code&gt;?with[]&#x3D;documents&amp;with[]&#x3D;labels&lt;/code&gt; (optional)
     *
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersOrderIdShippingReturnsGetWithHttpInfo($order_id, $page = null, $items_per_page = null, $with = null)
    {
        $returnType = 'object';
        $request = $this->restOrdersOrderIdShippingReturnsGetRequest($order_id, $page, $items_per_page, $with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersOrderIdShippingReturnsGetAsync
     *
     *
     *
     * @param int $order_id The id of the order to search the orders returns (required)
     * @param int $page The page to get. The default page that will be returned is page 1. (optional)
     * @param int $items_per_page The number of orders to be displayed per page. The default number of orders per page is 50. (optional)
     * @param int $with Load additional relations for an order. Currently possible are:  &lt;ul&gt;  &lt;li&gt;&#x27;documents&#x27; &#x3D; The document objects that are associated with the order returns.&lt;/li&gt;  &lt;li&gt;&#x27;labels&#x27; &#x3D; The base64 encoded labels that are associated with the order returns.&lt;/li&gt;  &lt;/ul&gt;  Example: &lt;code&gt;?with[]&#x3D;documents&amp;with[]&#x3D;labels&lt;/code&gt; (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingReturnsGetAsync($order_id, $page = null, $items_per_page = null, $with = null)
    {
        return $this->restOrdersOrderIdShippingReturnsGetAsyncWithHttpInfo($order_id, $page, $items_per_page, $with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersOrderIdShippingReturnsGetAsyncWithHttpInfo
     *
     *
     *
     * @param int $order_id The id of the order to search the orders returns (required)
     * @param int $page The page to get. The default page that will be returned is page 1. (optional)
     * @param int $items_per_page The number of orders to be displayed per page. The default number of orders per page is 50. (optional)
     * @param int $with Load additional relations for an order. Currently possible are:  &lt;ul&gt;  &lt;li&gt;&#x27;documents&#x27; &#x3D; The document objects that are associated with the order returns.&lt;/li&gt;  &lt;li&gt;&#x27;labels&#x27; &#x3D; The base64 encoded labels that are associated with the order returns.&lt;/li&gt;  &lt;/ul&gt;  Example: &lt;code&gt;?with[]&#x3D;documents&amp;with[]&#x3D;labels&lt;/code&gt; (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersOrderIdShippingReturnsGetAsyncWithHttpInfo($order_id, $page = null, $items_per_page = null, $with = null)
    {
        $returnType = 'object';
        $request = $this->restOrdersOrderIdShippingReturnsGetRequest($order_id, $page, $items_per_page, $with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersOrderIdShippingReturnsGet'
     *
     * @param int $order_id The id of the order to search the orders returns (required)
     * @param int $page The page to get. The default page that will be returned is page 1. (optional)
     * @param int $items_per_page The number of orders to be displayed per page. The default number of orders per page is 50. (optional)
     * @param int $with Load additional relations for an order. Currently possible are:  &lt;ul&gt;  &lt;li&gt;&#x27;documents&#x27; &#x3D; The document objects that are associated with the order returns.&lt;/li&gt;  &lt;li&gt;&#x27;labels&#x27; &#x3D; The base64 encoded labels that are associated with the order returns.&lt;/li&gt;  &lt;/ul&gt;  Example: &lt;code&gt;?with[]&#x3D;documents&amp;with[]&#x3D;labels&lt;/code&gt; (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersOrderIdShippingReturnsGetRequest($order_id, $page = null, $items_per_page = null, $with = null)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $order_id when calling restOrdersOrderIdShippingReturnsGet'
            );
        }

        $resourcePath = '/rest/orders/{orderId}/shipping/returns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($items_per_page !== null) {
            $queryParams['itemsPerPage'] = ObjectSerializer::toQueryValue($items_per_page);
        }
        // query params
        if ($with !== null) {
            $queryParams['with'] = ObjectSerializer::toQueryValue($with);
        }

        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restOrdersShippingReturnsReturnsIdGet
     *
     * @param int $returns_id The id of the order returns to search for. (required)
     * @param int $with Load additional relations for an order. Currently possible are:  &lt;ul&gt;  &lt;li&gt;&#x27;documents&#x27; &#x3D; The document objects that are associated with the order returns.&lt;/li&gt;  &lt;li&gt;&#x27;labels&#x27; &#x3D; The base64 encoded labels that are associated with the order returns.&lt;/li&gt;  &lt;/ul&gt;  Example: &lt;code&gt;?with[]&#x3D;documents&amp;with[]&#x3D;labels&lt;/code&gt; (optional)
     *
     * @return object
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingReturnsReturnsIdGet($returns_id, $with = null)
    {
        list($response) = $this->restOrdersShippingReturnsReturnsIdGetWithHttpInfo($returns_id, $with);
        return $response;
    }

    /**
     * Operation restOrdersShippingReturnsReturnsIdGetWithHttpInfo
     *
     * @param int $returns_id The id of the order returns to search for. (required)
     * @param int $with Load additional relations for an order. Currently possible are:  &lt;ul&gt;  &lt;li&gt;&#x27;documents&#x27; &#x3D; The document objects that are associated with the order returns.&lt;/li&gt;  &lt;li&gt;&#x27;labels&#x27; &#x3D; The base64 encoded labels that are associated with the order returns.&lt;/li&gt;  &lt;/ul&gt;  Example: &lt;code&gt;?with[]&#x3D;documents&amp;with[]&#x3D;labels&lt;/code&gt; (optional)
     *
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function restOrdersShippingReturnsReturnsIdGetWithHttpInfo($returns_id, $with = null)
    {
        $returnType = 'object';
        $request = $this->restOrdersShippingReturnsReturnsIdGetRequest($returns_id, $with);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restOrdersShippingReturnsReturnsIdGetAsync
     *
     *
     *
     * @param int $returns_id The id of the order returns to search for. (required)
     * @param int $with Load additional relations for an order. Currently possible are:  &lt;ul&gt;  &lt;li&gt;&#x27;documents&#x27; &#x3D; The document objects that are associated with the order returns.&lt;/li&gt;  &lt;li&gt;&#x27;labels&#x27; &#x3D; The base64 encoded labels that are associated with the order returns.&lt;/li&gt;  &lt;/ul&gt;  Example: &lt;code&gt;?with[]&#x3D;documents&amp;with[]&#x3D;labels&lt;/code&gt; (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingReturnsReturnsIdGetAsync($returns_id, $with = null)
    {
        return $this->restOrdersShippingReturnsReturnsIdGetAsyncWithHttpInfo($returns_id, $with)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restOrdersShippingReturnsReturnsIdGetAsyncWithHttpInfo
     *
     *
     *
     * @param int $returns_id The id of the order returns to search for. (required)
     * @param int $with Load additional relations for an order. Currently possible are:  &lt;ul&gt;  &lt;li&gt;&#x27;documents&#x27; &#x3D; The document objects that are associated with the order returns.&lt;/li&gt;  &lt;li&gt;&#x27;labels&#x27; &#x3D; The base64 encoded labels that are associated with the order returns.&lt;/li&gt;  &lt;/ul&gt;  Example: &lt;code&gt;?with[]&#x3D;documents&amp;with[]&#x3D;labels&lt;/code&gt; (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function restOrdersShippingReturnsReturnsIdGetAsyncWithHttpInfo($returns_id, $with = null)
    {
        $returnType = 'object';
        $request = $this->restOrdersShippingReturnsReturnsIdGetRequest($returns_id, $with);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restOrdersShippingReturnsReturnsIdGet'
     *
     * @param int $returns_id The id of the order returns to search for. (required)
     * @param int $with Load additional relations for an order. Currently possible are:  &lt;ul&gt;  &lt;li&gt;&#x27;documents&#x27; &#x3D; The document objects that are associated with the order returns.&lt;/li&gt;  &lt;li&gt;&#x27;labels&#x27; &#x3D; The base64 encoded labels that are associated with the order returns.&lt;/li&gt;  &lt;/ul&gt;  Example: &lt;code&gt;?with[]&#x3D;documents&amp;with[]&#x3D;labels&lt;/code&gt; (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function restOrdersShippingReturnsReturnsIdGetRequest($returns_id, $with = null)
    {
        // verify the required parameter 'returns_id' is set
        if ($returns_id === null || (is_array($returns_id) && count($returns_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $returns_id when calling restOrdersShippingReturnsReturnsIdGet'
            );
        }

        $resourcePath = '/rest/orders/shipping/returns/{returnsId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($with !== null) {
            $queryParams['with'] = ObjectSerializer::toQueryValue($with);
        }

        // path params
        if ($returns_id !== null) {
            $resourcePath = str_replace(
                '{' . 'returnsId' . '}',
                ObjectSerializer::toPathValue($returns_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @return array of http client options
     * @throws RuntimeException on file opening failure
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
